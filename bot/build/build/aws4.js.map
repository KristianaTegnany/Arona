{"version":3,"sources":["../node_modules/aws4/aws4.js"],"names":["aws4","url","require","querystring","crypto","lru","credentialsCache","c","request","headers","hostParts","credentials","RequestSigner","match","host","region","service","query","Buffer","hash","date","cacheKey","kCredentials","kDate","hmac","kRegion","kService","pathStr","queryStr","normalizePath","decodePath","decodeSlashesInPath","firstValOnly","bodyHash","encodeRfc3986","obj","Array","piece","path","decodeURIComponent","encodeURIComponent","header","a","b","key","trimAll","env","process","accessKeyId","secretAccessKey","sessionToken","AWS_SESSION_TOKEN","queryIx"],"mappings":"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","sourcesContent":["var aws4 = exports,\n    url = require('url'),\n    querystring = require('querystring'),\n    crypto = require('crypto'),\n    lru = require('./lru'),\n    credentialsCache = lru(1000)\n\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\n\nfunction hmac(key, string, encoding) {\n  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)\n}\n\nfunction hash(string, encoding) {\n  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n\n  if (typeof request === 'string') request = url.parse(request)\n\n  var headers = request.headers = (request.headers || {}),\n      hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host)\n\n  this.request = request\n  this.credentials = credentials || this.defaultCredentials()\n\n  this.service = request.service || hostParts[0] || ''\n  this.region = request.region || hostParts[1] || 'us-east-1'\n\n  // SES uses a different domain from the service name\n  if (this.service === 'email') this.service = 'ses'\n\n  if (!request.method && request.body)\n    request.method = 'POST'\n\n  if (!headers.Host && !headers.host) {\n    headers.Host = request.hostname || request.host || this.createHost()\n\n    // If a port is specified explicitly, use it as is\n    if (request.port)\n      headers.Host += ':' + request.port\n  }\n  if (!request.hostname && !request.host)\n    request.hostname = headers.Host || headers.host\n\n  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'\n}\n\nRequestSigner.prototype.matchHost = function(host) {\n  var match = (host || '').match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(\\.cn)?$/)\n  var hostParts = (match || []).slice(1, 3)\n\n  // ES's hostParts are sometimes the other way round, if the value that is expected\n  // to be region equals ‘es’ switch them back\n  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n  if (hostParts[1] === 'es')\n    hostParts = hostParts.reverse()\n\n  return hostParts\n}\n\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n  // Special case for S3 and SimpleDB in us-east-1\n  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true\n\n  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']\n    .indexOf(this.service) >= 0\n}\n\nRequestSigner.prototype.createHost = function() {\n  var region = this.isSingleRegion() ? '' :\n        (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,\n      service = this.service === 'ses' ? 'email' : this.service\n  return service + region + '.amazonaws.com'\n}\n\nRequestSigner.prototype.prepareRequest = function() {\n  this.parsePath()\n\n  var request = this.request, headers = request.headers, query\n\n  if (request.signQuery) {\n\n    this.parsedPath.query = query = this.parsedPath.query || {}\n\n    if (this.credentials.sessionToken)\n      query['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n    if (this.service === 's3' && !query['X-Amz-Expires'])\n      query['X-Amz-Expires'] = 86400\n\n    if (query['X-Amz-Date'])\n      this.datetime = query['X-Amz-Date']\n    else\n      query['X-Amz-Date'] = this.getDateTime()\n\n    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'\n    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()\n    query['X-Amz-SignedHeaders'] = this.signedHeaders()\n\n  } else {\n\n    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n      if (request.body && !headers['Content-Type'] && !headers['content-type'])\n        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'\n\n      if (request.body && !headers['Content-Length'] && !headers['content-length'])\n        headers['Content-Length'] = Buffer.byteLength(request.body)\n\n      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])\n        headers['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])\n        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')\n\n      if (headers['X-Amz-Date'] || headers['x-amz-date'])\n        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']\n      else\n        headers['X-Amz-Date'] = this.getDateTime()\n    }\n\n    delete headers.Authorization\n    delete headers.authorization\n  }\n}\n\nRequestSigner.prototype.sign = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  if (this.request.signQuery) {\n    this.parsedPath.query['X-Amz-Signature'] = this.signature()\n  } else {\n    this.request.headers.Authorization = this.authHeader()\n  }\n\n  this.request.path = this.formatPath()\n\n  return this.request\n}\n\nRequestSigner.prototype.getDateTime = function() {\n  if (!this.datetime) {\n    var headers = this.request.headers,\n      date = new Date(headers.Date || headers.date || new Date)\n\n    this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n\n    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)\n  }\n  return this.datetime\n}\n\nRequestSigner.prototype.getDate = function() {\n  return this.getDateTime().substr(0, 8)\n}\n\nRequestSigner.prototype.authHeader = function() {\n  return [\n    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),\n    'SignedHeaders=' + this.signedHeaders(),\n    'Signature=' + this.signature(),\n  ].join(', ')\n}\n\nRequestSigner.prototype.signature = function() {\n  var date = this.getDate(),\n      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),\n      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)\n  if (!kCredentials) {\n    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)\n    kRegion = hmac(kDate, this.region)\n    kService = hmac(kRegion, this.service)\n    kCredentials = hmac(kService, 'aws4_request')\n    credentialsCache.set(cacheKey, kCredentials)\n  }\n  return hmac(kCredentials, this.stringToSign(), 'hex')\n}\n\nRequestSigner.prototype.stringToSign = function() {\n  return [\n    'AWS4-HMAC-SHA256',\n    this.getDateTime(),\n    this.credentialString(),\n    hash(this.canonicalString(), 'hex'),\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalString = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  var pathStr = this.parsedPath.path,\n      query = this.parsedPath.query,\n      headers = this.request.headers,\n      queryStr = '',\n      normalizePath = this.service !== 's3',\n      decodePath = this.service === 's3' || this.request.doNotEncodePath,\n      decodeSlashesInPath = this.service === 's3',\n      firstValOnly = this.service === 's3',\n      bodyHash\n\n  if (this.service === 's3' && this.request.signQuery) {\n    bodyHash = 'UNSIGNED-PAYLOAD'\n  } else if (this.isCodeCommitGit) {\n    bodyHash = ''\n  } else {\n    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||\n      hash(this.request.body || '', 'hex')\n  }\n\n  if (query) {\n    queryStr = encodeRfc3986(querystring.stringify(Object.keys(query).sort().reduce(function(obj, key) {\n      if (!key) return obj\n      obj[key] = !Array.isArray(query[key]) ? query[key] :\n        (firstValOnly ? query[key][0] : query[key].slice().sort())\n      return obj\n    }, {})))\n  }\n  if (pathStr !== '/') {\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/')\n    pathStr = pathStr.split('/').reduce(function(path, piece) {\n      if (normalizePath && piece === '..') {\n        path.pop()\n      } else if (!normalizePath || piece !== '.') {\n        if (decodePath) piece = decodeURIComponent(piece)\n        path.push(encodeRfc3986(encodeURIComponent(piece)))\n      }\n      return path\n    }, []).join('/')\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')\n  }\n\n  return [\n    this.request.method || 'GET',\n    pathStr,\n    queryStr,\n    this.canonicalHeaders() + '\\n',\n    this.signedHeaders(),\n    bodyHash,\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalHeaders = function() {\n  var headers = this.request.headers\n  function trimAll(header) {\n    return header.toString().trim().replace(/\\s+/g, ' ')\n  }\n  return Object.keys(headers)\n    .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })\n    .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })\n    .join('\\n')\n}\n\nRequestSigner.prototype.signedHeaders = function() {\n  return Object.keys(this.request.headers)\n    .map(function(key) { return key.toLowerCase() })\n    .sort()\n    .join(';')\n}\n\nRequestSigner.prototype.credentialString = function() {\n  return [\n    this.getDate(),\n    this.region,\n    this.service,\n    'aws4_request',\n  ].join('/')\n}\n\nRequestSigner.prototype.defaultCredentials = function() {\n  var env = process.env\n  return {\n    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n    sessionToken: env.AWS_SESSION_TOKEN,\n  }\n}\n\nRequestSigner.prototype.parsePath = function() {\n  var path = this.request.path || '/',\n      queryIx = path.indexOf('?'),\n      query = null\n\n  if (queryIx >= 0) {\n    query = querystring.parse(path.slice(queryIx + 1))\n    path = path.slice(0, queryIx)\n  }\n\n  // S3 doesn't always encode characters > 127 correctly and\n  // all services don't encode characters > 255 correctly\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n  if (/[^0-9A-Za-z!'()*\\-._~%/]/.test(path)) {\n    path = path.split('/').map(function(piece) {\n      return encodeURIComponent(decodeURIComponent(piece))\n    }).join('/')\n  }\n\n  this.parsedPath = {\n    path: path,\n    query: query,\n  }\n}\n\nRequestSigner.prototype.formatPath = function() {\n  var path = this.parsedPath.path,\n      query = this.parsedPath.query\n\n  if (!query) return path\n\n  // Services don't support empty query string keys\n  if (query[''] != null) delete query['']\n\n  return path + '?' + encodeRfc3986(querystring.stringify(query))\n}\n\naws4.RequestSigner = RequestSigner\n\naws4.sign = function(request, credentials) {\n  return new RequestSigner(request, credentials).sign()\n}\n"],"file":"aws4.js"}