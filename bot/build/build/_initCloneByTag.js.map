{"version":3,"sources":["../node_modules/lodash/_initCloneByTag.js"],"names":["cloneArrayBuffer","require","cloneDataView","cloneRegExp","cloneSymbol","cloneTypedArray","boolTag","dateTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","Ctor","object","module"],"mappings":";;AAAA,IAAIA,gBAAgB,GAAGC,OAAO,CAA9B,qBAA8B,CAA9B;AAAA,IACIC,aAAa,GAAGD,OAAO,CAD3B,kBAC2B,CAD3B;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAFzB,gBAEyB,CAFzB;AAAA,IAGIG,WAAW,GAAGH,OAAO,CAHzB,gBAGyB,CAHzB;AAAA,IAIII,eAAe,GAAGJ,OAAO,CAJ7B,oBAI6B,CAJ7B;AAMA;;;AACA,IAAIK,OAAO,GAAX,kBAAA;AAAA,IACIC,OAAO,GADX,eAAA;AAAA,IAEIC,MAAM,GAFV,cAAA;AAAA,IAGIC,SAAS,GAHb,iBAAA;AAAA,IAIIC,SAAS,GAJb,iBAAA;AAAA,IAKIC,MAAM,GALV,cAAA;AAAA,IAMIC,SAAS,GANb,iBAAA;AAAA,IAOIC,SAAS,GAPb,iBAAA;AASA,IAAIC,cAAc,GAAlB,sBAAA;AAAA,IACIC,WAAW,GADf,mBAAA;AAAA,IAEIC,UAAU,GAFd,uBAAA;AAAA,IAGIC,UAAU,GAHd,uBAAA;AAAA,IAIIC,OAAO,GAJX,oBAAA;AAAA,IAKIC,QAAQ,GALZ,qBAAA;AAAA,IAMIC,QAAQ,GANZ,qBAAA;AAAA,IAOIC,QAAQ,GAPZ,qBAAA;AAAA,IAQIC,eAAe,GARnB,4BAAA;AAAA,IASIC,SAAS,GATb,sBAAA;AAAA,IAUIC,SAAS,GAVb,sBAAA;AAYA;;;;;;;;;;;;;AAYA,SAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAAA,MAAA,EAA6C;AAC3C,MAAIC,IAAI,GAAGC,MAAM,CAAjB,WAAA;;AACA,UAAA,GAAA;AACE,SAAA,cAAA;AACE,aAAO1B,gBAAgB,CAAvB,MAAuB,CAAvB;;AAEF,SAAA,OAAA;AACA,SAAA,OAAA;AACE,aAAO,IAAA,IAAA,CAAS,CAAhB,MAAO,CAAP;;AAEF,SAAA,WAAA;AACE,aAAOE,aAAa,CAAA,MAAA,EAApB,MAAoB,CAApB;;AAEF,SAAA,UAAA;AAAiB,SAAA,UAAA;AACjB,SAAA,OAAA;AAAc,SAAA,QAAA;AAAe,SAAA,QAAA;AAC7B,SAAA,QAAA;AAAe,SAAA,eAAA;AAAsB,SAAA,SAAA;AAAgB,SAAA,SAAA;AACnD,aAAOG,eAAe,CAAA,MAAA,EAAtB,MAAsB,CAAtB;;AAEF,SAAA,MAAA;AACE,aAAO,IAAP,IAAO,EAAP;;AAEF,SAAA,SAAA;AACA,SAAA,SAAA;AACE,aAAO,IAAA,IAAA,CAAP,MAAO,CAAP;;AAEF,SAAA,SAAA;AACE,aAAOF,WAAW,CAAlB,MAAkB,CAAlB;;AAEF,SAAA,MAAA;AACE,aAAO,IAAP,IAAO,EAAP;;AAEF,SAAA,SAAA;AACE,aAAOC,WAAW,CAAlB,MAAkB,CAAlB;AA9BJ;AAgCD;;AAEDuB,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n"],"file":"_initCloneByTag.js"}