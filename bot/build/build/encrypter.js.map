{"version":3,"sources":["../node_modules/browserify-aes/encrypter.js"],"names":["MODES","require","AuthCipher","Buffer","StreamCipher","Transform","aes","ebtk","inherits","Cipher","out","chunk","thing","PADDING","Splitter","len","padBuff","i","config","suite","password","iv","keys","createCipheriv","exports"],"mappings":"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","sourcesContent":["var MODES = require('./modes')\nvar AuthCipher = require('./authCipher')\nvar Buffer = require('safe-buffer').Buffer\nvar StreamCipher = require('./streamCipher')\nvar Transform = require('cipher-base')\nvar aes = require('./aes')\nvar ebtk = require('evp_bytestokey')\nvar inherits = require('inherits')\n\nfunction Cipher (mode, key, iv) {\n  Transform.call(this)\n\n  this._cache = new Splitter()\n  this._cipher = new aes.AES(key)\n  this._prev = Buffer.from(iv)\n  this._mode = mode\n  this._autopadding = true\n}\n\ninherits(Cipher, Transform)\n\nCipher.prototype._update = function (data) {\n  this._cache.add(data)\n  var chunk\n  var thing\n  var out = []\n\n  while ((chunk = this._cache.get())) {\n    thing = this._mode.encrypt(this, chunk)\n    out.push(thing)\n  }\n\n  return Buffer.concat(out)\n}\n\nvar PADDING = Buffer.alloc(16, 0x10)\n\nCipher.prototype._final = function () {\n  var chunk = this._cache.flush()\n  if (this._autopadding) {\n    chunk = this._mode.encrypt(this, chunk)\n    this._cipher.scrub()\n    return chunk\n  }\n\n  if (!chunk.equals(PADDING)) {\n    this._cipher.scrub()\n    throw new Error('data not multiple of block length')\n  }\n}\n\nCipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo\n  return this\n}\n\nfunction Splitter () {\n  this.cache = Buffer.allocUnsafe(0)\n}\n\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data])\n}\n\nSplitter.prototype.get = function () {\n  if (this.cache.length > 15) {\n    var out = this.cache.slice(0, 16)\n    this.cache = this.cache.slice(16)\n    return out\n  }\n  return null\n}\n\nSplitter.prototype.flush = function () {\n  var len = 16 - this.cache.length\n  var padBuff = Buffer.allocUnsafe(len)\n\n  var i = -1\n  while (++i < len) {\n    padBuff.writeUInt8(len, i)\n  }\n\n  return Buffer.concat([this.cache, padBuff])\n}\n\nfunction createCipheriv (suite, password, iv) {\n  var config = MODES[suite.toLowerCase()]\n  if (!config) throw new TypeError('invalid suite type')\n\n  if (typeof password === 'string') password = Buffer.from(password)\n  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)\n\n  if (typeof iv === 'string') iv = Buffer.from(iv)\n  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)\n\n  if (config.type === 'stream') {\n    return new StreamCipher(config.module, password, iv)\n  } else if (config.type === 'auth') {\n    return new AuthCipher(config.module, password, iv)\n  }\n\n  return new Cipher(config.module, password, iv)\n}\n\nfunction createCipher (suite, password) {\n  var config = MODES[suite.toLowerCase()]\n  if (!config) throw new TypeError('invalid suite type')\n\n  var keys = ebtk(password, false, config.key, config.iv)\n  return createCipheriv(suite, keys.key, keys.iv)\n}\n\nexports.createCipheriv = createCipheriv\nexports.createCipher = createCipher\n"],"file":"encrypter.js"}