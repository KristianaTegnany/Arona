{"version":3,"sources":["../node_modules/lodash/bindKey.js"],"names":["baseRest","require","createWrap","getHolder","replaceHolders","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_PARTIAL_FLAG","bindKey","bitmask","partials","holders","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,UAAU,GAAGD,OAAO,CADxB,eACwB,CADxB;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAFvB,cAEuB,CAFvB;AAAA,IAGIG,cAAc,GAAGH,OAAO,CAH5B,mBAG4B,CAH5B;AAKA;;;AACA,IAAII,cAAc,GAAlB,CAAA;AAAA,IACIC,kBAAkB,GADtB,CAAA;AAAA,IAEIC,iBAAiB,GAFrB,EAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,IAAIC,OAAO,GAAGR,QAAQ,CAAC,UAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAgC;AACrD,MAAIS,OAAO,GAAGJ,cAAc,GAA5B,kBAAA;;AACA,MAAIK,QAAQ,CAAZ,MAAA,EAAqB;AACnB,QAAIC,OAAO,GAAGP,cAAc,CAAA,QAAA,EAAWD,SAAS,CAAhD,OAAgD,CAApB,CAA5B;AACAM,IAAAA,OAAO,IAAPA,iBAAAA;AACD;;AACD,SAAOP,UAAU,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAjB,OAAiB,CAAjB;AANF,CAAsB,CAAtB,C,CASA;;AACAM,OAAO,CAAPA,WAAAA,GAAAA,EAAAA;AAEAI,MAAM,CAANA,OAAAA,GAAAA,OAAAA","sourcesContent":["var baseRest = require('./_baseRest'),\n    createWrap = require('./_createWrap'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes the method at `object[key]` with `partials`\n * prepended to the arguments it receives.\n *\n * This method differs from `_.bind` by allowing bound functions to reference\n * methods that may be redefined or don't yet exist. See\n * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n * for more details.\n *\n * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Function\n * @param {Object} object The object to invoke the method on.\n * @param {string} key The key of the method.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * var object = {\n *   'user': 'fred',\n *   'greet': function(greeting, punctuation) {\n *     return greeting + ' ' + this.user + punctuation;\n *   }\n * };\n *\n * var bound = _.bindKey(object, 'greet', 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * object.greet = function(greeting, punctuation) {\n *   return greeting + 'ya ' + this.user + punctuation;\n * };\n *\n * bound('!');\n * // => 'hiya fred!'\n *\n * // Bound with placeholders.\n * var bound = _.bindKey(object, 'greet', _, '!');\n * bound('hi');\n * // => 'hiya fred!'\n */\nvar bindKey = baseRest(function(object, key, partials) {\n  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, getHolder(bindKey));\n    bitmask |= WRAP_PARTIAL_FLAG;\n  }\n  return createWrap(key, bitmask, object, partials, holders);\n});\n\n// Assign default placeholders.\nbindKey.placeholder = {};\n\nmodule.exports = bindKey;\n"],"file":"bindKey.js"}