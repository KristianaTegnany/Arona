{"version":3,"sources":["../node_modules/fast-levenshtein/levenshtein.js"],"names":["collator","Intl","sensitivity","console","prevRow","str2Char","Levenshtein","get","useCollator","options","str1Len","str1","str2Len","str2","i","nextCol","j","curCol","strCmp","String","tmp","define","module","self","window"],"mappings":"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","sourcesContent":["(function() {\n  'use strict';\n  \n  var collator;\n  try {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err){\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n  \n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function(str1, str2, options) {\n      var useCollator = (options && collator && options.useCollator);\n      \n      var str1Len = str1.length,\n        str2Len = str2.length;\n      \n      // base cases\n      if (str1Len === 0) return str2Len;\n      if (str2Len === 0) return str1Len;\n\n      // two rows\n      var curCol, nextCol, i, j, tmp;\n\n      // initialise previous row\n      for (i=0; i<str2Len; ++i) {\n        prevRow[i] = i;\n        str2Char[i] = str2.charCodeAt(i);\n      }\n      prevRow[str2Len] = str2Len;\n\n      var strCmp;\n      if (useCollator) {\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      }\n      else {\n        // calculate current row distance from previous row without collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = str1.charCodeAt(i) === str2Char[j];\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n      }\n      return nextCol;\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function() {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n}());\n\n"],"file":"levenshtein.js"}