{"version":3,"sources":["../node_modules/big.js/big.js"],"names":["DP","RM","MAX_DP","MAX_POWER","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","x","n","_Big_","parse","Big","Error","e","i","nl","xc","rm","more","z","id","k","round","s","yc","y","j","l","isneg","a","b","dp","bz","ai","bl","al","r","rl","q","qc","qi","d","cmp","ri","bt","xe","ye","xlty","t","ygtx","one","half","Math","c","stringify","sd","define","module","GLOBAL"],"mappings":"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","sourcesContent":["/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n"],"file":"big.js"}