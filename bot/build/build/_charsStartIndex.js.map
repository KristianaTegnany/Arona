{"version":3,"sources":["../node_modules/lodash/_charsStartIndex.js"],"names":["baseIndexOf","require","index","length","strSymbols","module"],"mappings":";;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAzB,gBAAyB,CAAzB;AAEA;;;;;;;;;;;AASA,SAAA,eAAA,CAAA,UAAA,EAAA,UAAA,EAAiD;AAC/C,MAAIC,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,MAAM,GAAGC,UAAU,CADvB,MAAA;;AAGA,SAAO,EAAA,KAAA,GAAA,MAAA,IAAoBJ,WAAW,CAAA,UAAA,EAAaI,UAAU,CAAvB,KAAuB,CAAvB,EAAXJ,CAAW,CAAXA,GAAgD,CAA3E,CAAA,EAA+E,CAAE;;AACjF,SAAA,KAAA;AACD;;AAEDK,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsStartIndex;\n"],"file":"_charsStartIndex.js"}