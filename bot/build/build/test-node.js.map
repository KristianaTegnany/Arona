{"version":3,"sources":["../node_modules/pump/test-node.js"],"names":["pump","require","rs","ws","toHex","reverse","chunk","callback","wsClosed","rsClosed","callbackCalled","check","console","clearTimeout","res","setTimeout","timeout"],"mappings":";;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAlB,SAAkB,CAAlB;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAPA,IAAO,CAAPA,CAAAA,gBAAAA,CAAT,aAASA,CAAT;;AACA,IAAIE,EAAE,GAAGF,OAAO,CAAPA,IAAO,CAAPA,CAAAA,iBAAAA,CAAT,WAASA,CAAT;;AAEA,IAAIG,KAAK,GAAG,SAARA,KAAQ,GAAY;AACtB,MAAIC,OAAO,GAAG,KAAKJ,OAAO,CAAPA,QAAO,CAAPA,CAAnB,SAAc,GAAd;;AAEAI,EAAAA,OAAO,CAAPA,UAAAA,GAAqB,UAAA,KAAA,EAAA,GAAA,EAAA,QAAA,EAAgC;AACnDA,IAAAA,OAAO,CAAPA,IAAAA,CAAaC,KAAK,CAALA,QAAAA,CAAbD,KAAaC,CAAbD;AACAE,IAAAA,QAAQ;AAFVF,GAAAA;;AAKA,SAAA,OAAA;AARF,CAAA;;AAWA,IAAIG,QAAQ,GAAZ,KAAA;AACA,IAAIC,QAAQ,GAAZ,KAAA;AACA,IAAIC,cAAc,GAAlB,KAAA;;AAEA,IAAIC,KAAK,GAAG,SAARA,KAAQ,GAAY;AACtB,MAAIH,QAAQ,IAARA,QAAAA,IAAJ,cAAA,EAA4C;AAC1CI,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,qBAAAA;AACAC,IAAAA,YAAY,CAAZA,OAAY,CAAZA;AACD;AAJH,CAAA;;AAOAV,EAAE,CAAFA,EAAAA,CAAAA,OAAAA,EAAe,YAAY;AACzBK,EAAAA,QAAQ,GAARA,IAAAA;AACAG,EAAAA,KAAK;AAFPR,CAAAA;AAKAD,EAAE,CAAFA,EAAAA,CAAAA,OAAAA,EAAe,YAAY;AACzBO,EAAAA,QAAQ,GAARA,IAAAA;AACAE,EAAAA,KAAK;AAFPT,CAAAA;AAKA,IAAIY,GAAG,GAAGd,IAAI,CAAA,EAAA,EAAKI,KAAL,EAAA,EAAcA,KAAd,EAAA,EAAuBA,KAAvB,EAAA,EAAA,EAAA,EAAoC,YAAY;AAC5DM,EAAAA,cAAc,GAAdA,IAAAA;AACAC,EAAAA,KAAK;AAFP,CAAc,CAAd;;AAKA,IAAIG,GAAG,KAAP,EAAA,EAAgB;AACd,QAAM,IAAA,KAAA,CAAN,2BAAM,CAAN;AACD;;AAEDC,UAAU,CAAC,YAAY;AACrBb,EAAAA,EAAE,CAAFA,OAAAA;AADQ,CAAA,EAAVa,IAAU,CAAVA;AAIA,IAAIC,OAAO,GAAGD,UAAU,CAAC,YAAY;AACnC,QAAM,IAAA,KAAA,CAAN,SAAM,CAAN;AADsB,CAAA,EAAxB,IAAwB,CAAxB","sourcesContent":["var pump = require('./index')\n\nvar rs = require('fs').createReadStream('/dev/random')\nvar ws = require('fs').createWriteStream('/dev/null')\n\nvar toHex = function () {\n  var reverse = new (require('stream').Transform)()\n\n  reverse._transform = function (chunk, enc, callback) {\n    reverse.push(chunk.toString('hex'))\n    callback()\n  }\n\n  return reverse\n}\n\nvar wsClosed = false\nvar rsClosed = false\nvar callbackCalled = false\n\nvar check = function () {\n  if (wsClosed && rsClosed && callbackCalled) {\n    console.log('test-node.js passes')\n    clearTimeout(timeout)\n  }\n}\n\nws.on('close', function () {\n  wsClosed = true\n  check()\n})\n\nrs.on('close', function () {\n  rsClosed = true\n  check()\n})\n\nvar res = pump(rs, toHex(), toHex(), toHex(), ws, function () {\n  callbackCalled = true\n  check()\n})\n\nif (res !== ws) {\n  throw new Error('should return last stream')\n}\n\nsetTimeout(function () {\n  rs.destroy()\n}, 1000)\n\nvar timeout = setTimeout(function () {\n  throw new Error('timeout')\n}, 5000)\n"],"file":"test-node.js"}