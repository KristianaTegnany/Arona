{"version":3,"sources":["../node_modules/fs.realpath/old.js"],"names":["pathModule","require","isWindows","process","fs","DEBUG","backtrace","callback","err","missingCallback","msg","console","rethrow","normalize","nextPartRe","splitRootRe","exports","p","cache","Object","original","seenLinks","knownHard","start","m","pos","current","base","previous","result","resolvedLink","stat","linkTarget","id","cb","maybeCallback","LOOP","gotResolvedLink","gotTarget"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n"],"file":"old.js"}