{"version":3,"sources":["../node_modules/lodash/toNumber.js"],"names":["isObject","require","isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","other","value","isBinary","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,YAAsB,CAAtB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CADtB,YACsB,CADtB;AAGA;;;AACA,IAAIE,GAAG,GAAG,IAAV,CAAA;AAEA;;AACA,IAAIC,MAAM,GAAV,YAAA;AAEA;;AACA,IAAIC,UAAU,GAAd,oBAAA;AAEA;;AACA,IAAIC,UAAU,GAAd,YAAA;AAEA;;AACA,IAAIC,SAAS,GAAb,aAAA;AAEA;;AACA,IAAIC,YAAY,GAAhB,QAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAA,QAAA,CAAA,KAAA,EAAyB;AACvB,MAAI,OAAA,KAAA,IAAJ,QAAA,EAA8B;AAC5B,WAAA,KAAA;AACD;;AACD,MAAIN,QAAQ,CAAZ,KAAY,CAAZ,EAAqB;AACnB,WAAA,GAAA;AACD;;AACD,MAAIF,QAAQ,CAAZ,KAAY,CAAZ,EAAqB;AACnB,QAAIS,KAAK,GAAG,OAAOC,KAAK,CAAZ,OAAA,IAAA,UAAA,GAAqCA,KAAK,CAA1C,OAAqCA,EAArC,GAAZ,KAAA;AACAA,IAAAA,KAAK,GAAGV,QAAQ,CAARA,KAAQ,CAARA,GAAmBS,KAAK,GAAxBT,EAAAA,GAARU,KAAAA;AACD;;AACD,MAAI,OAAA,KAAA,IAAJ,QAAA,EAA8B;AAC5B,WAAOA,KAAK,KAALA,CAAAA,GAAAA,KAAAA,GAAsB,CAA7B,KAAA;AACD;;AACDA,EAAAA,KAAK,GAAGA,KAAK,CAALA,OAAAA,CAAAA,MAAAA,EAARA,EAAQA,CAARA;AACA,MAAIC,QAAQ,GAAGL,UAAU,CAAVA,IAAAA,CAAf,KAAeA,CAAf;AACA,SAAQK,QAAQ,IAAIJ,SAAS,CAATA,IAAAA,CAAb,KAAaA,CAAZI,GACJH,YAAY,CAACE,KAAK,CAALA,KAAAA,CAAD,CAACA,CAAD,EAAiBC,QAAQ,GAAA,CAAA,GADlC,CACS,CADRA,GAEHN,UAAU,CAAVA,IAAAA,CAAAA,KAAAA,IAAAA,GAAAA,GAA+B,CAFpC,KAAA;AAGD;;AAEDO,MAAM,CAANA,OAAAA,GAAAA,QAAAA","sourcesContent":["var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n"],"file":"toNumber.js"}