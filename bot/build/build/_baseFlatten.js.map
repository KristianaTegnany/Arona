{"version":3,"sources":["../node_modules/lodash/_baseFlatten.js"],"names":["arrayPush","require","isFlattenable","index","length","array","predicate","result","value","depth","baseFlatten","module"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAvB,cAAuB,CAAvB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAD3B,kBAC2B,CAD3B;AAGA;;;;;;;;;;;;;AAWA,SAAA,WAAA,CAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAgE;AAC9D,MAAIE,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,MAAM,GAAGC,KAAK,CADlB,MAAA;AAGAC,EAAAA,SAAS,KAAKA,SAAS,GAAvBA,aAAS,CAATA;AACAC,EAAAA,MAAM,KAAKA,MAAM,GAAjBA,EAAM,CAANA;;AAEA,SAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,QAAIC,KAAK,GAAGH,KAAK,CAAjB,KAAiB,CAAjB;;AACA,QAAII,KAAK,GAALA,CAAAA,IAAaH,SAAS,CAA1B,KAA0B,CAA1B,EAAmC;AACjC,UAAIG,KAAK,GAAT,CAAA,EAAe;AACb;AACAC,QAAAA,WAAW,CAAA,KAAA,EAAQD,KAAK,GAAb,CAAA,EAAA,SAAA,EAAA,QAAA,EAAXC,MAAW,CAAXA;AAFF,OAAA,MAGO;AACLV,QAAAA,SAAS,CAAA,MAAA,EAATA,KAAS,CAATA;AACD;AANH,KAAA,MAOO,IAAI,CAAJ,QAAA,EAAe;AACpBO,MAAAA,MAAM,CAACA,MAAM,CAAbA,MAAM,CAANA,GAAAA,KAAAA;AACD;AACF;;AACD,SAAA,MAAA;AACD;;AAEDI,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"],"file":"_baseFlatten.js"}