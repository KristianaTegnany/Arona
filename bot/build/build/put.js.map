{"version":3,"sources":["../node_modules/cacache/put.js"],"names":["figgyPudding","require","index","memo","write","to","PutOpts","algorithms","default","integrity","memoize","metadata","pickAlgorithm","size","tmpPrefix","single","sep","error","strict","module","opts","res","entry","contentStream","int","s","memoTotal","stream","memoData","chunk","cb","Buffer","erred","err"],"mappings":"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","sourcesContent":["'use strict'\n\nconst figgyPudding = require('figgy-pudding')\nconst index = require('./lib/entry-index')\nconst memo = require('./lib/memoization')\nconst write = require('./lib/content/write')\nconst to = require('mississippi').to\n\nconst PutOpts = figgyPudding({\n  algorithms: {\n    default: ['sha512']\n  },\n  integrity: {},\n  memoize: {},\n  metadata: {},\n  pickAlgorithm: {},\n  size: {},\n  tmpPrefix: {},\n  single: {},\n  sep: {},\n  error: {},\n  strict: {}\n})\n\nmodule.exports = putData\nfunction putData (cache, key, data, opts) {\n  opts = PutOpts(opts)\n  return write(cache, data, opts).then(res => {\n    return index.insert(\n      cache, key, res.integrity, opts.concat({ size: res.size })\n    ).then(entry => {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts)\n      }\n      return res.integrity\n    })\n  })\n}\n\nmodule.exports.stream = putStream\nfunction putStream (cache, key, opts) {\n  opts = PutOpts(opts)\n  let integrity\n  let size\n  const contentStream = write.stream(\n    cache, opts\n  ).on('integrity', int => {\n    integrity = int\n  }).on('size', s => {\n    size = s\n  })\n  let memoData\n  let memoTotal = 0\n  const stream = to((chunk, enc, cb) => {\n    contentStream.write(chunk, enc, () => {\n      if (opts.memoize) {\n        if (!memoData) { memoData = [] }\n        memoData.push(chunk)\n        memoTotal += chunk.length\n      }\n      cb()\n    })\n  }, cb => {\n    contentStream.end(() => {\n      index.insert(cache, key, integrity, opts.concat({ size })).then(entry => {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts)\n        }\n        stream.emit('integrity', integrity)\n        cb()\n      })\n    })\n  })\n  let erred = false\n  stream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    contentStream.emit('error', err)\n  })\n  contentStream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    stream.emit('error', err)\n  })\n  return stream\n}\n"],"file":"put.js"}