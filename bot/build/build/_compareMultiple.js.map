{"version":3,"sources":["../node_modules/lodash/_compareMultiple.js"],"names":["compareAscending","require","index","objCriteria","object","othCriteria","other","length","ordersLength","orders","result","order","module"],"mappings":";;AAAA,IAAIA,gBAAgB,GAAGC,OAAO,CAA9B,qBAA8B,CAA9B;AAEA;;;;;;;;;;;;;;;;AAcA,SAAA,eAAA,CAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAgD;AAC9C,MAAIC,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,WAAW,GAAGC,MAAM,CADxB,QAAA;AAAA,MAEIC,WAAW,GAAGC,KAAK,CAFvB,QAAA;AAAA,MAGIC,MAAM,GAAGJ,WAAW,CAHxB,MAAA;AAAA,MAIIK,YAAY,GAAGC,MAAM,CAJzB,MAAA;;AAMA,SAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,QAAIC,MAAM,GAAGV,gBAAgB,CAACG,WAAW,CAAZ,KAAY,CAAZ,EAAqBE,WAAW,CAA7D,KAA6D,CAAhC,CAA7B;;AACA,QAAA,MAAA,EAAY;AACV,UAAIH,KAAK,IAAT,YAAA,EAA2B;AACzB,eAAA,MAAA;AACD;;AACD,UAAIS,KAAK,GAAGF,MAAM,CAAlB,KAAkB,CAAlB;AACA,aAAOC,MAAM,IAAIC,KAAK,IAALA,MAAAA,GAAkB,CAAlBA,CAAAA,GAAjB,CAAa,CAAb;AACD;AAf2C,GAAA,CAiB9C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOP,MAAM,CAANA,KAAAA,GAAeE,KAAK,CAA3B,KAAA;AACD;;AAEDM,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n"],"file":"_compareMultiple.js"}