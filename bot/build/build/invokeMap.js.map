{"version":3,"sources":["../node_modules/lodash/invokeMap.js"],"names":["apply","require","baseEach","baseInvoke","baseRest","isArrayLike","invokeMap","index","isFunc","result","Array","collection","module"],"mappings":";;AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAnB,UAAmB,CAAnB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CADtB,aACsB,CADtB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAFxB,eAEwB,CAFxB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAHtB,aAGsB,CAHtB;AAAA,IAIII,WAAW,GAAGJ,OAAO,CAJzB,eAIyB,CAJzB;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIK,SAAS,GAAGF,QAAQ,CAAC,UAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAiC;AACxD,MAAIG,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,MAAM,GAAG,OAAA,IAAA,IADb,UAAA;AAAA,MAEIC,MAAM,GAAGJ,WAAW,CAAXA,UAAW,CAAXA,GAA0BK,KAAK,CAACC,UAAU,CAA1CN,MAA+B,CAA/BA,GAFb,EAAA;AAIAH,EAAAA,QAAQ,CAAA,UAAA,EAAa,UAAA,KAAA,EAAgB;AACnCO,IAAAA,MAAM,CAAC,EAAPA,KAAM,CAANA,GAAkBD,MAAM,GAAGR,KAAK,CAAA,IAAA,EAAA,KAAA,EAAR,IAAQ,CAAR,GAA8BG,UAAU,CAAA,KAAA,EAAA,IAAA,EAAhEM,IAAgE,CAAhEA;AADFP,GAAQ,CAARA;AAGA,SAAA,MAAA;AARF,CAAwB,CAAxB;AAWAU,MAAM,CAANA,OAAAA,GAAAA,SAAAA","sourcesContent":["var apply = require('./_apply'),\n    baseEach = require('./_baseEach'),\n    baseInvoke = require('./_baseInvoke'),\n    baseRest = require('./_baseRest'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Invokes the method at `path` of each element in `collection`, returning\n * an array of the results of each invoked method. Any additional arguments\n * are provided to each invoked method. If `path` is a function, it's invoked\n * for, and `this` bound to, each element in `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|string} path The path of the method to invoke or\n *  the function invoked per iteration.\n * @param {...*} [args] The arguments to invoke each method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * _.invokeMap([123, 456], String.prototype.split, '');\n * // => [['1', '2', '3'], ['4', '5', '6']]\n */\nvar invokeMap = baseRest(function(collection, path, args) {\n  var index = -1,\n      isFunc = typeof path == 'function',\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value) {\n    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n  });\n  return result;\n});\n\nmodule.exports = invokeMap;\n"],"file":"invokeMap.js"}