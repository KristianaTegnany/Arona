{"version":3,"sources":["../node_modules/lodash/trimEnd.js"],"names":["baseToString","require","castSlice","charsEndIndex","stringToArray","toString","reTrimEnd","string","guard","chars","strSymbols","end","module"],"mappings":";;AAAA,IAAIA,YAAY,GAAGC,OAAO,CAA1B,iBAA0B,CAA1B;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,cACuB,CADvB;AAAA,IAEIE,aAAa,GAAGF,OAAO,CAF3B,kBAE2B,CAF3B;AAAA,IAGIG,aAAa,GAAGH,OAAO,CAH3B,kBAG2B,CAH3B;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAJtB,YAIsB,CAJtB;AAMA;;;AACA,IAAIK,SAAS,GAAb,MAAA;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAAA,OAAA,CAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAuC;AACrCC,EAAAA,MAAM,GAAGF,QAAQ,CAAjBE,MAAiB,CAAjBA;;AACA,MAAIA,MAAM,KAAKC,KAAK,IAAIC,KAAK,KAA7B,SAAU,CAAV,EAA8C;AAC5C,WAAOF,MAAM,CAANA,OAAAA,CAAAA,SAAAA,EAAP,EAAOA,CAAP;AACD;;AACD,MAAI,CAAA,MAAA,IAAW,EAAEE,KAAK,GAAGT,YAAY,CAArC,KAAqC,CAAtB,CAAf,EAA+C;AAC7C,WAAA,MAAA;AACD;;AACD,MAAIU,UAAU,GAAGN,aAAa,CAA9B,MAA8B,CAA9B;AAAA,MACIO,GAAG,GAAGR,aAAa,CAAA,UAAA,EAAaC,aAAa,CAAvCD,KAAuC,CAA1B,CAAbA,GADV,CAAA;AAGA,SAAOD,SAAS,CAAA,UAAA,EAAA,CAAA,EAATA,GAAS,CAATA,CAAAA,IAAAA,CAAP,EAAOA,CAAP;AACD;;AAEDU,MAAM,CAANA,OAAAA,GAAAA,OAAAA","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimEnd = /\\s+$/;\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimEnd, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n"],"file":"trimEnd.js"}