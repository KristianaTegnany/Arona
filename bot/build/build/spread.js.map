{"version":3,"sources":["../node_modules/lodash/spread.js"],"names":["apply","require","arrayPush","baseRest","castSlice","toInteger","FUNC_ERROR_TEXT","nativeMax","Math","start","array","args","otherArgs","module"],"mappings":";;AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAnB,UAAmB,CAAnB;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,cACuB,CADvB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAFtB,aAEsB,CAFtB;AAAA,IAGIG,SAAS,GAAGH,OAAO,CAHvB,cAGuB,CAHvB;AAAA,IAIII,SAAS,GAAGJ,OAAO,CAJvB,aAIuB,CAJvB;AAMA;;;AACA,IAAIK,eAAe,GAAnB,qBAAA;AAEA;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAApB,GAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAA,MAAA,CAAA,IAAA,EAAA,KAAA,EAA6B;AAC3B,MAAI,OAAA,IAAA,IAAJ,UAAA,EAA+B;AAC7B,UAAM,IAAA,SAAA,CAAN,eAAM,CAAN;AACD;;AACDC,EAAAA,KAAK,GAAGA,KAAK,IAALA,IAAAA,GAAAA,CAAAA,GAAoBF,SAAS,CAACF,SAAS,CAAV,KAAU,CAAV,EAArCI,CAAqC,CAArCA;AACA,SAAON,QAAQ,CAAC,UAAA,IAAA,EAAe;AAC7B,QAAIO,KAAK,GAAGC,IAAI,CAAhB,KAAgB,CAAhB;AAAA,QACIC,SAAS,GAAGR,SAAS,CAAA,IAAA,EAAA,CAAA,EADzB,KACyB,CADzB;;AAGA,QAAA,KAAA,EAAW;AACTF,MAAAA,SAAS,CAAA,SAAA,EAATA,KAAS,CAATA;AACD;;AACD,WAAOF,KAAK,CAAA,IAAA,EAAA,IAAA,EAAZ,SAAY,CAAZ;AAPF,GAAe,CAAf;AASD;;AAEDa,MAAM,CAANA,OAAAA,GAAAA,MAAAA","sourcesContent":["var apply = require('./_apply'),\n    arrayPush = require('./_arrayPush'),\n    baseRest = require('./_baseRest'),\n    castSlice = require('./_castSlice'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of the\n * create function and an array of arguments much like\n * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n *\n * **Note:** This method is based on the\n * [spread operator](https://mdn.io/spread_operator).\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Function\n * @param {Function} func The function to spread arguments over.\n * @param {number} [start=0] The start position of the spread.\n * @returns {Function} Returns the new function.\n * @example\n *\n * var say = _.spread(function(who, what) {\n *   return who + ' says ' + what;\n * });\n *\n * say(['fred', 'hello']);\n * // => 'fred says hello'\n *\n * var numbers = Promise.all([\n *   Promise.resolve(40),\n *   Promise.resolve(36)\n * ]);\n *\n * numbers.then(_.spread(function(x, y) {\n *   return x + y;\n * }));\n * // => a Promise of 76\n */\nfunction spread(func, start) {\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  start = start == null ? 0 : nativeMax(toInteger(start), 0);\n  return baseRest(function(args) {\n    var array = args[start],\n        otherArgs = castSlice(args, 0, start);\n\n    if (array) {\n      arrayPush(otherArgs, array);\n    }\n    return apply(func, this, otherArgs);\n  });\n}\n\nmodule.exports = spread;\n"],"file":"spread.js"}