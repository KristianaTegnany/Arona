{"version":3,"sources":["../node_modules/lodash/_equalArrays.js"],"names":["SetCache","require","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","isPartial","bitmask","arrLength","array","othLength","other","stacked","stack","index","result","seen","arrValue","othValue","compared","customizer","equalFunc","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,cACuB,CADvB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAFtB,aAEsB,CAFtB;AAIA;;;AACA,IAAIG,oBAAoB,GAAxB,CAAA;AAAA,IACIC,sBAAsB,GAD1B,CAAA;AAGA;;;;;;;;;;;;;;AAaA,SAAA,WAAA,CAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,KAAA,EAA0E;AACxE,MAAIC,SAAS,GAAGC,OAAO,GAAvB,oBAAA;AAAA,MACIC,SAAS,GAAGC,KAAK,CADrB,MAAA;AAAA,MAEIC,SAAS,GAAGC,KAAK,CAFrB,MAAA;;AAIA,MAAIH,SAAS,IAATA,SAAAA,IAA0B,EAAEF,SAAS,IAAII,SAAS,GAAtD,SAA8B,CAA9B,EAAqE;AACnE,WAAA,KAAA;AANsE,GAAA,CAQxE;;;AACA,MAAIE,OAAO,GAAGC,KAAK,CAALA,GAAAA,CAAd,KAAcA,CAAd;;AACA,MAAID,OAAO,IAAIC,KAAK,CAALA,GAAAA,CAAf,KAAeA,CAAf,EAAiC;AAC/B,WAAOD,OAAO,IAAd,KAAA;AACD;;AACD,MAAIE,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,MAAM,GADV,IAAA;AAAA,MAEIC,IAAI,GAAIT,OAAO,GAAR,sBAACA,GAAoC,IAArC,QAAqC,EAApCA,GAFZ,SAAA;AAIAM,EAAAA,KAAK,CAALA,GAAAA,CAAAA,KAAAA,EAAAA,KAAAA;AACAA,EAAAA,KAAK,CAALA,GAAAA,CAAAA,KAAAA,EAlBwE,KAkBxEA,EAlBwE,CAoBxE;;AACA,SAAO,EAAA,KAAA,GAAP,SAAA,EAA4B;AAC1B,QAAII,QAAQ,GAAGR,KAAK,CAApB,KAAoB,CAApB;AAAA,QACIS,QAAQ,GAAGP,KAAK,CADpB,KACoB,CADpB;;AAGA,QAAA,UAAA,EAAgB;AACd,UAAIQ,QAAQ,GAAGb,SAAS,GACpBc,UAAU,CAAA,QAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EADU,KACV,CADU,GAEpBA,UAAU,CAAA,QAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAFd,KAEc,CAFd;AAGD;;AACD,QAAID,QAAQ,KAAZ,SAAA,EAA4B;AAC1B,UAAA,QAAA,EAAc;AACZ;AACD;;AACDJ,MAAAA,MAAM,GAANA,KAAAA;AACA;AAdwB,KAAA,CAgB1B;;;AACA,QAAA,IAAA,EAAU;AACR,UAAI,CAACb,SAAS,CAAA,KAAA,EAAQ,UAAA,QAAA,EAAA,QAAA,EAA6B;AAC7C,YAAI,CAACC,QAAQ,CAAA,IAAA,EAAT,QAAS,CAAT,KACCc,QAAQ,KAARA,QAAAA,IAAyBI,SAAS,CAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EADvC,KACuC,CADnC,CAAJ,EAC0F;AACxF,iBAAOL,IAAI,CAAJA,IAAAA,CAAP,QAAOA,CAAP;AACD;AAJP,OAAc,CAAd,EAKQ;AACND,QAAAA,MAAM,GAANA,KAAAA;AACA;AACD;AATH,KAAA,MAUO,IAAI,EACLE,QAAQ,KAARA,QAAAA,IACEI,SAAS,CAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,UAAA,EAFV,KAEU,CAFN,CAAJ,EAGA;AACLN,MAAAA,MAAM,GAANA,KAAAA;AACA;AACD;AACF;;AACDF,EAAAA,KAAK,CAALA,QAAK,CAALA,CAAAA,KAAAA;AACAA,EAAAA,KAAK,CAALA,QAAK,CAALA,CAAAA,KAAAA;AACA,SAAA,MAAA;AACD;;AAEDS,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"],"file":"_equalArrays.js"}