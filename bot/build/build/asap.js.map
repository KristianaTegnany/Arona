{"version":3,"sources":["../node_modules/asap/asap.js"],"names":["rawAsap","require","freeTasks","module","rawTask","process","RawTask","threw"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAArB,OAAqB,CAArB;;AACA,IAAIC,SAAS,GAAb,EAAA;AAEA;;;;;;;;;;;AAUAC,MAAM,CAANA,OAAAA,GAAAA,IAAAA;;AACA,SAAA,IAAA,CAAA,IAAA,EAAoB;AAChB,MAAA,OAAA;;AACA,MAAID,SAAS,CAAb,MAAA,EAAsB;AAClBE,IAAAA,OAAO,GAAGF,SAAS,CAAnBE,GAAUF,EAAVE;AADJ,GAAA,MAEO;AACHA,IAAAA,OAAO,GAAG,IAAVA,OAAU,EAAVA;AACH;;AACDA,EAAAA,OAAO,CAAPA,IAAAA,GAAAA,IAAAA;AACAA,EAAAA,OAAO,CAAPA,MAAAA,GAAiBC,OAAO,CAAxBD,MAAAA;AACAJ,EAAAA,OAAO,CAAPA,OAAO,CAAPA;AACH;;AAED,SAAA,OAAA,GAAmB;AACf,OAAA,IAAA,GAAA,IAAA;AACA,OAAA,MAAA,GAAA,IAAA;AACH;;AAEDM,OAAO,CAAPA,SAAAA,CAAAA,IAAAA,GAAyB,YAAY;AACjC,MAAI,KAAJ,MAAA,EAAiB;AACb,SAAA,MAAA,CAAA,KAAA;AACH;;AACD,MAAIC,KAAK,GAAT,IAAA;;AACA,MAAI;AACA,SAAA,IAAA,CAAA,IAAA;AACAA,IAAAA,KAAK,GAFL,KAEAA,CAFA,CAGA;AACA;;AACA,QAAI,KAAJ,MAAA,EAAiB;AACb,WAAA,MAAA,CAAA,IAAA;AACH;AAPL,GAAA,SAQU;AACN;AACA;AACA,QAAA,KAAA,EAAW;AACP;AACA;AACA;AACA;AACA;AACAP,MAAAA,OAAO,CAAPA,YAAAA;AATE,KAAA,CAWN;AACA;;;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,IAAA;AACAE,IAAAA,SAAS,CAATA,IAAAA,CAAAA,IAAAA;AACH;AA7BLI,CAAAA","sourcesContent":["\"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this.task.call();\n        threw = false;\n        // If the task throws an exception (presumably) Node.js restores the\n        // domain stack for the next event.\n        if (this.domain) {\n            this.domain.exit();\n        }\n    } finally {\n        // We use try/finally and a threw flag to avoid messing up stack traces\n        // when we catch and release errors.\n        if (threw) {\n            // In Node.js, uncaught exceptions are considered fatal errors.\n            // Re-throw them to interrupt flushing!\n            // Ensure that flushing continues if an uncaught exception is\n            // suppressed listening process.on(\"uncaughtException\") or\n            // domain.on(\"error\").\n            rawAsap.requestFlush();\n        }\n        // If the task threw an error, we do not want to exit the domain here.\n        // Exiting the domain would prevent the domain from catching the error.\n        this.task = null;\n        this.domain = null;\n        freeTasks.push(this);\n    }\n};\n\n"],"file":"asap.js"}