{"version":3,"sources":["../node_modules/imurmurhash/imurmurhash.js"],"names":["m","key","MurmurHash3","len","k1","i","h1","top","cache","module"],"mappings":"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","sourcesContent":["/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n"],"file":"imurmurhash.js"}