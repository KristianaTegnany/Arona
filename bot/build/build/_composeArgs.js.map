{"version":3,"sources":["../node_modules/lodash/_composeArgs.js"],"names":["nativeMax","Math","argsIndex","argsLength","args","holdersLength","holders","leftIndex","leftLength","partials","rangeLength","result","Array","isUncurried","module"],"mappings":";;AAAA;AACA,IAAIA,SAAS,GAAGC,IAAI,CAApB,GAAA;AAEA;;;;;;;;;;;;AAWA,SAAA,WAAA,CAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAyD;AACvD,MAAIC,SAAS,GAAG,CAAhB,CAAA;AAAA,MACIC,UAAU,GAAGC,IAAI,CADrB,MAAA;AAAA,MAEIC,aAAa,GAAGC,OAAO,CAF3B,MAAA;AAAA,MAGIC,SAAS,GAAG,CAHhB,CAAA;AAAA,MAIIC,UAAU,GAAGC,QAAQ,CAJzB,MAAA;AAAA,MAKIC,WAAW,GAAGV,SAAS,CAACG,UAAU,GAAX,aAAA,EAL3B,CAK2B,CAL3B;AAAA,MAMIQ,MAAM,GAAGC,KAAK,CAACJ,UAAU,GAN7B,WAMkB,CANlB;AAAA,MAOIK,WAAW,GAAG,CAPlB,SAAA;;AASA,SAAO,EAAA,SAAA,GAAP,UAAA,EAAiC;AAC/BF,IAAAA,MAAM,CAANA,SAAM,CAANA,GAAoBF,QAAQ,CAA5BE,SAA4B,CAA5BA;AACD;;AACD,SAAO,EAAA,SAAA,GAAP,aAAA,EAAoC;AAClC,QAAIE,WAAW,IAAIX,SAAS,GAA5B,UAAA,EAA2C;AACzCS,MAAAA,MAAM,CAACL,OAAO,CAAdK,SAAc,CAAR,CAANA,GAA6BP,IAAI,CAAjCO,SAAiC,CAAjCA;AACD;AACF;;AACD,SAAOD,WAAP,EAAA,EAAsB;AACpBC,IAAAA,MAAM,CAACJ,SAAPI,EAAM,CAANA,GAAsBP,IAAI,CAACF,SAA3BS,EAA0B,CAA1BA;AACD;;AACD,SAAA,MAAA;AACD;;AAEDG,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"],"file":"_composeArgs.js"}