{"version":3,"sources":["../node_modules/zip-folder/tests.js"],"names":["tmp","require","fs","path","unzip","zipFolder","txtFileName","txtFileContents","zipFileName","dirFiles","entryPath","fileStats","emptyDirectory","module","setUp","writePath","callback","tearDown","itCreatesTheZipFile","test","theZipFileIsValid","dstPath","dirList","theZipFileContainsTheRightFiles","txtFilePath"],"mappings":"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","sourcesContent":["var tmp = require('temporary');\nvar fs = require('fs');\nvar path = require('path');\nvar unzip = require('unzip');\nvar zipFolder = require('./index');\n\nvar txtFileName = 'file.txt';\nvar txtFileContents = 'this is a text file';\nvar zipFileName = 'archive.zip';\n\nfunction emptyDirectory(dirName) {\n\tvar dirFiles = fs.readdirSync(dirName);\n\tdirFiles.forEach(function(f) {\n\t\tvar entryPath = path.join(dirName, f);\n\t\tvar fileStats = fs.statSync(entryPath);\n\t\tif(fileStats.isFile()) {\n\t\t\tfs.unlink(entryPath);\n\t\t} else {\n\t\t\temptyDirectory(entryPath);\n\t\t}\n\t});\n}\n\nmodule.exports = {\n\tsetUp: function(callback) {\n\t\tthis.tmpSrcDir = new tmp.Dir();\n\n\t\tvar writePath = this.tmpSrcDir.path;\n\n\t\tfs.writeFileSync(path.join(writePath, txtFileName), txtFileContents);\n\t\tthis.txtFileName = txtFileName;\n\t\tthis.txtFileContents = txtFileContents;\n\n\t\tthis.tmpZipFile = new tmp.File();\n\t\tthis.tmpZipExtractionDir = new tmp.Dir();\n\n\t\tzipFolder(writePath, this.tmpZipFile.path, function() {\n\n\t\t\tcallback();\n\n\t\t});\n\t\t\n\t},\n\n\ttearDown: function(callback) {\n\t\t\n\t\temptyDirectory(this.tmpSrcDir.path);\n\t\tthis.tmpSrcDir.rmdir();\n\n\t\temptyDirectory(this.tmpZipExtractionDir.path);\n\t\tthis.tmpZipExtractionDir.rmdir();\n\t\t\n\t\tthis.tmpZipFile.unlink();\n\t\t\n\t\tcallback();\n\t},\n\n\t// Ensure the zip has been created\n\titCreatesTheZipFile: function(test) {\n\t\ttest.ok(fs.existsSync(this.tmpZipFile.path), 'zip exists');\n\t\ttest.done();\n\t},\n\n\t// Assume the zip is valid if it can be unzipped\n\t// and the unzipped contents are not empty\n\ttheZipFileIsValid: function(test) {\n\n\t\ttest.expect(1);\n\n\t\tvar dstPath = this.tmpZipExtractionDir.path;\n\n\t\tfs.createReadStream(this.tmpZipFile.path)\n\t\t\t.pipe(unzip.Extract({ path: dstPath }))\n\t\t\t.on('close', function() {\n\t\t\t\tvar dirList = fs.readdirSync(dstPath);\n\t\t\t\ttest.ok(dirList.length > 0, 'the zip contains files');\n\t\t\t\ttest.done();\n\t\t\t});\n\n\t},\n\t\n\ttheZipFileContainsTheRightFiles: function(test) {\n\n\t\tvar dstPath = this.tmpZipExtractionDir.path;\n\t\tvar txtFileName = this.txtFileName;\n\t\tvar txtFilePath = path.join(dstPath, txtFileName);\n\t\tvar txtFileContents = this.txtFileContents;\n\n\t\tfs.createReadStream(this.tmpZipFile.path)\n\t\t\t.pipe(unzip.Extract({ path: dstPath }))\n\t\t\t.on('close', function() {\n\t\t\t\t\n\t\t\t\ttest.ok(fs.existsSync(txtFilePath), 'txt file exists');\n\t\t\t\ttest.equals(fs.readFileSync(txtFilePath), txtFileContents, 'contents are the same we put in');\n\t\t\t\ttest.done();\n\t\t\t});\n\n\t}\n};\n"],"file":"tests.js"}