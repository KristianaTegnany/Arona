{"version":3,"sources":["../node_modules/lodash/intersectionWith.js"],"names":["arrayMap","require","baseIntersection","baseRest","castArrayLikeObject","last","intersectionWith","comparator","mapped","arrays","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,gBAAgB,GAAGD,OAAO,CAD9B,qBAC8B,CAD9B;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAFtB,aAEsB,CAFtB;AAAA,IAGIG,mBAAmB,GAAGH,OAAO,CAHjC,wBAGiC,CAHjC;AAAA,IAIII,IAAI,GAAGJ,OAAO,CAJlB,QAIkB,CAJlB;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIK,gBAAgB,GAAGH,QAAQ,CAAC,UAAA,MAAA,EAAiB;AAC/C,MAAII,UAAU,GAAGF,IAAI,CAArB,MAAqB,CAArB;AAAA,MACIG,MAAM,GAAGR,QAAQ,CAAA,MAAA,EADrB,mBACqB,CADrB;AAGAO,EAAAA,UAAU,GAAG,OAAA,UAAA,IAAA,UAAA,GAAA,UAAA,GAAbA,SAAAA;;AACA,MAAA,UAAA,EAAgB;AACdC,IAAAA,MAAM,CAANA,GAAAA;AACD;;AACD,SAAQA,MAAM,CAANA,MAAAA,IAAiBA,MAAM,CAANA,CAAM,CAANA,KAAcC,MAAM,CAAtC,CAAsC,CAArCD,GACJN,gBAAgB,CAAA,MAAA,EAAA,SAAA,EADb,UACa,CADZM,GAAR,EAAA;AARF,CAA+B,CAA/B;AAaAE,MAAM,CAANA,OAAAA,GAAAA,gBAAAA","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIntersection = require('./_baseIntersection'),\n    baseRest = require('./_baseRest'),\n    castArrayLikeObject = require('./_castArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. The order and references\n * of result values are determined by the first array. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.intersectionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }]\n */\nvar intersectionWith = baseRest(function(arrays) {\n  var comparator = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  if (comparator) {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, undefined, comparator)\n    : [];\n});\n\nmodule.exports = intersectionWith;\n"],"file":"intersectionWith.js"}