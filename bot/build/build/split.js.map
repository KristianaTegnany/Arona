{"version":3,"sources":["../node_modules/lodash/split.js"],"names":["baseToString","require","castSlice","hasUnicode","isIterateeCall","isRegExp","stringToArray","toString","MAX_ARRAY_LENGTH","limit","separator","string","module"],"mappings":";;AAAA,IAAIA,YAAY,GAAGC,OAAO,CAA1B,iBAA0B,CAA1B;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,cACuB,CADvB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAFxB,eAEwB,CAFxB;AAAA,IAGIG,cAAc,GAAGH,OAAO,CAH5B,mBAG4B,CAH5B;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAJtB,YAIsB,CAJtB;AAAA,IAKIK,aAAa,GAAGL,OAAO,CAL3B,kBAK2B,CAL3B;AAAA,IAMIM,QAAQ,GAAGN,OAAO,CANtB,YAMsB,CANtB;AAQA;;;AACA,IAAIO,gBAAgB,GAApB,UAAA;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAAA,KAAA,CAAA,MAAA,EAAA,SAAA,EAAA,KAAA,EAAyC;AACvC,MAAIC,KAAK,IAAI,OAAA,KAAA,IAATA,QAAAA,IAAqCL,cAAc,CAAA,MAAA,EAAA,SAAA,EAAvD,KAAuD,CAAvD,EAAmF;AACjFM,IAAAA,SAAS,GAAGD,KAAK,GAAjBC,SAAAA;AACD;;AACDD,EAAAA,KAAK,GAAGA,KAAK,KAALA,SAAAA,GAAAA,gBAAAA,GAAyCA,KAAK,KAAtDA,CAAAA;;AACA,MAAI,CAAJ,KAAA,EAAY;AACV,WAAA,EAAA;AACD;;AACDE,EAAAA,MAAM,GAAGJ,QAAQ,CAAjBI,MAAiB,CAAjBA;;AACA,MAAIA,MAAM,KACJ,OAAA,SAAA,IAAA,QAAA,IACCD,SAAS,IAATA,IAAAA,IAAqB,CAACL,QAAQ,CAFrC,SAEqC,CAF3B,CAAV,EAGO;AACLK,IAAAA,SAAS,GAAGV,YAAY,CAAxBU,SAAwB,CAAxBA;;AACA,QAAI,CAAA,SAAA,IAAcP,UAAU,CAA5B,MAA4B,CAA5B,EAAsC;AACpC,aAAOD,SAAS,CAACI,aAAa,CAAd,MAAc,CAAd,EAAA,CAAA,EAAhB,KAAgB,CAAhB;AACD;AACF;;AACD,SAAOK,MAAM,CAANA,KAAAA,CAAAA,SAAAA,EAAP,KAAOA,CAAP;AACD;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,KAAAA","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;\n"],"file":"split.js"}