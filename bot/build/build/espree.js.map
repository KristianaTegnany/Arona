{"version":3,"sources":["../node_modules/espree/espree.js"],"names":["acorn","require","jsx","astNodeTypes","espree","parsers","_regular","_jsx","get","useJsx","Boolean","options","Parser","tokens","exports","types","Object"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\"use strict\";\n\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst astNodeTypes = require(\"./lib/ast-node-types\");\nconst espree = require(\"./lib/espree\");\n\n// To initialize lazily.\nconst parsers = {\n    _regular: null,\n    _jsx: null,\n\n    get regular() {\n        if (this._regular === null) {\n            this._regular = acorn.Parser.extend(espree());\n        }\n        return this._regular;\n    },\n\n    get jsx() {\n        if (this._jsx === null) {\n            this._jsx = acorn.Parser.extend(jsx(), espree());\n        }\n        return this._jsx;\n    },\n\n    get(options) {\n        const useJsx = Boolean(\n            options &&\n            options.ecmaFeatures &&\n            options.ecmaFeatures.jsx\n        );\n\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n    const Parser = parsers.get(options);\n\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) {\n        options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n    }\n\n    return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nfunction parse(code, options) {\n    const Parser = parsers.get(options);\n\n    return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\n\nexports.tokenize = tokenize;\n\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = (function() {\n    let name,\n        types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in astNodeTypes) {\n        if (astNodeTypes.hasOwnProperty(name)) {\n            types[name] = astNodeTypes[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\n/* istanbul ignore next */\nexports.VisitorKeys = (function() {\n    return require(\"eslint-visitor-keys\").KEYS;\n}());\n"],"file":"espree.js"}