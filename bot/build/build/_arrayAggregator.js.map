{"version":3,"sources":["../node_modules/lodash/_arrayAggregator.js"],"names":["index","length","array","value","setter","iteratee","module"],"mappings":";;AAAA;;;;;;;;;;AAUA,SAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAA,WAAA,EAA+D;AAC7D,MAAIA,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,MAAM,GAAGC,KAAK,IAALA,IAAAA,GAAAA,CAAAA,GAAoBA,KAAK,CADtC,MAAA;;AAGA,SAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,QAAIC,KAAK,GAAGD,KAAK,CAAjB,KAAiB,CAAjB;AACAE,IAAAA,MAAM,CAAA,WAAA,EAAA,KAAA,EAAqBC,QAAQ,CAA7B,KAA6B,CAA7B,EAAND,KAAM,CAANA;AACD;;AACD,SAAA,WAAA;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n"],"file":"_arrayAggregator.js"}