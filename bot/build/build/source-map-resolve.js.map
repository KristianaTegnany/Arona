{"version":3,"sources":["../node_modules/source-map-resolve/source-map-resolve.js"],"names":["define","sourceMappingURL","require","resolveUrl","module","factory","root","setImmediate","callback","JSON","string","error","readUrl","String","read","mapData","resolveSourceMapHelper","callbackAsync","parseMapToJSON","readSync","dataUriRegex","jsonMimeTypeRegex","url","dataUri","mimeType","lastParameter","encoded","data","sourcesRelativeTo","map","atob","decodeURIComponent","mapUrl","options","pending","result","sourcesResolved","sourcesContent","done","resolveSourcesHelper","endingSlash","index","len","sourceRoot","fullUrl","sourceContent","fn","code","_resolveSources","resolveSourceMap","resolveSources","resolveSourceMapSync","resolveSourcesSync","resolve","resolveSync"],"mappings":"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","sourcesContent":["// Copyright 2014, 2015, 2016, 2017 Simon Lydell\n// X11 (“MIT”) Licensed. (See LICENSE.)\n\n// Note: source-map-resolve.js is generated from source-map-resolve-node.js and\n// source-map-resolve-template.js. Only edit the two latter files, _not_\n// source-map-resolve.js!\n\nvoid (function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"source-map-url\", \"resolve-url\"], factory)\n  } else if (typeof exports === \"object\") {\n    var sourceMappingURL = require(\"source-map-url\")\n    var resolveUrl = require(\"resolve-url\")\n    module.exports = factory(sourceMappingURL, resolveUrl)\n  } else {\n    root.sourceMapResolve = factory(root.sourceMappingURL, root.resolveUrl)\n  }\n}(this, function(sourceMappingURL, resolveUrl) {\n\n  function callbackAsync(callback, error, result) {\n    setImmediate(function() { callback(error, result) })\n  }\n\n  function parseMapToJSON(string, data) {\n    try {\n      return JSON.parse(string.replace(/^\\)\\]\\}'/, \"\"))\n    } catch (error) {\n      error.sourceMapData = data\n      throw error\n    }\n  }\n\n  function readSync(read, url, data) {\n    var readUrl = url\n    try {\n      return String(read(readUrl))\n    } catch (error) {\n      error.sourceMapData = data\n      throw error\n    }\n  }\n\n\n\n  function resolveSourceMap(code, codeUrl, read, callback) {\n    var mapData\n    try {\n      mapData = resolveSourceMapHelper(code, codeUrl)\n    } catch (error) {\n      return callbackAsync(callback, error)\n    }\n    if (!mapData || mapData.map) {\n      return callbackAsync(callback, null, mapData)\n    }\n    var readUrl = mapData.url\n    read(readUrl, function(error, result) {\n      if (error) {\n        error.sourceMapData = mapData\n        return callback(error)\n      }\n      mapData.map = String(result)\n      try {\n        mapData.map = parseMapToJSON(mapData.map, mapData)\n      } catch (error) {\n        return callback(error)\n      }\n      callback(null, mapData)\n    })\n  }\n\n  function resolveSourceMapSync(code, codeUrl, read) {\n    var mapData = resolveSourceMapHelper(code, codeUrl)\n    if (!mapData || mapData.map) {\n      return mapData\n    }\n    mapData.map = readSync(read, mapData.url, mapData)\n    mapData.map = parseMapToJSON(mapData.map, mapData)\n    return mapData\n  }\n\n  var dataUriRegex = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/\n  var jsonMimeTypeRegex = /^(?:application|text)\\/json$/\n\n  function resolveSourceMapHelper(code, codeUrl) {\n    var url = sourceMappingURL.getFrom(code)\n    if (!url) {\n      return null\n    }\n\n    var dataUri = url.match(dataUriRegex)\n    if (dataUri) {\n      var mimeType = dataUri[1]\n      var lastParameter = dataUri[2] || \"\"\n      var encoded = dataUri[3] || \"\"\n      var data = {\n        sourceMappingURL: url,\n        url: null,\n        sourcesRelativeTo: codeUrl,\n        map: encoded\n      }\n      if (!jsonMimeTypeRegex.test(mimeType)) {\n        var error = new Error(\"Unuseful data uri mime type: \" + (mimeType || \"text/plain\"))\n        error.sourceMapData = data\n        throw error\n      }\n      data.map = parseMapToJSON(\n        lastParameter === \";base64\" ? atob(encoded) : decodeURIComponent(encoded),\n        data\n      )\n      return data\n    }\n\n    var mapUrl = resolveUrl(codeUrl, url)\n    return {\n      sourceMappingURL: url,\n      url: mapUrl,\n      sourcesRelativeTo: mapUrl,\n      map: null\n    }\n  }\n\n\n\n  function resolveSources(map, mapUrl, read, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options\n      options = {}\n    }\n    var pending = map.sources ? map.sources.length : 0\n    var result = {\n      sourcesResolved: [],\n      sourcesContent:  []\n    }\n\n    if (pending === 0) {\n      callbackAsync(callback, null, result)\n      return\n    }\n\n    var done = function() {\n      pending--\n      if (pending === 0) {\n        callback(null, result)\n      }\n    }\n\n    resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) {\n      result.sourcesResolved[index] = fullUrl\n      if (typeof sourceContent === \"string\") {\n        result.sourcesContent[index] = sourceContent\n        callbackAsync(done, null)\n      } else {\n        var readUrl = fullUrl\n        read(readUrl, function(error, source) {\n          result.sourcesContent[index] = error ? error : String(source)\n          done()\n        })\n      }\n    })\n  }\n\n  function resolveSourcesSync(map, mapUrl, read, options) {\n    var result = {\n      sourcesResolved: [],\n      sourcesContent:  []\n    }\n\n    if (!map.sources || map.sources.length === 0) {\n      return result\n    }\n\n    resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) {\n      result.sourcesResolved[index] = fullUrl\n      if (read !== null) {\n        if (typeof sourceContent === \"string\") {\n          result.sourcesContent[index] = sourceContent\n        } else {\n          var readUrl = fullUrl\n          try {\n            result.sourcesContent[index] = String(read(readUrl))\n          } catch (error) {\n            result.sourcesContent[index] = error\n          }\n        }\n      }\n    })\n\n    return result\n  }\n\n  var endingSlash = /\\/?$/\n\n  function resolveSourcesHelper(map, mapUrl, options, fn) {\n    options = options || {}\n    var fullUrl\n    var sourceContent\n    var sourceRoot\n    for (var index = 0, len = map.sources.length; index < len; index++) {\n      sourceRoot = null\n      if (typeof options.sourceRoot === \"string\") {\n        sourceRoot = options.sourceRoot\n      } else if (typeof map.sourceRoot === \"string\" && options.sourceRoot !== false) {\n        sourceRoot = map.sourceRoot\n      }\n      // If the sourceRoot is the empty string, it is equivalent to not setting\n      // the property at all.\n      if (sourceRoot === null || sourceRoot === '') {\n        fullUrl = resolveUrl(mapUrl, map.sources[index])\n      } else {\n        // Make sure that the sourceRoot ends with a slash, so that `/scripts/subdir` becomes\n        // `/scripts/subdir/<source>`, not `/scripts/<source>`. Pointing to a file as source root\n        // does not make sense.\n        fullUrl = resolveUrl(mapUrl, sourceRoot.replace(endingSlash, \"/\"), map.sources[index])\n      }\n      sourceContent = (map.sourcesContent || [])[index]\n      fn(fullUrl, sourceContent, index)\n    }\n  }\n\n\n\n  function resolve(code, codeUrl, read, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options\n      options = {}\n    }\n    if (code === null) {\n      var mapUrl = codeUrl\n      var data = {\n        sourceMappingURL: null,\n        url: mapUrl,\n        sourcesRelativeTo: mapUrl,\n        map: null\n      }\n      var readUrl = mapUrl\n      read(readUrl, function(error, result) {\n        if (error) {\n          error.sourceMapData = data\n          return callback(error)\n        }\n        data.map = String(result)\n        try {\n          data.map = parseMapToJSON(data.map, data)\n        } catch (error) {\n          return callback(error)\n        }\n        _resolveSources(data)\n      })\n    } else {\n      resolveSourceMap(code, codeUrl, read, function(error, mapData) {\n        if (error) {\n          return callback(error)\n        }\n        if (!mapData) {\n          return callback(null, null)\n        }\n        _resolveSources(mapData)\n      })\n    }\n\n    function _resolveSources(mapData) {\n      resolveSources(mapData.map, mapData.sourcesRelativeTo, read, options, function(error, result) {\n        if (error) {\n          return callback(error)\n        }\n        mapData.sourcesResolved = result.sourcesResolved\n        mapData.sourcesContent  = result.sourcesContent\n        callback(null, mapData)\n      })\n    }\n  }\n\n  function resolveSync(code, codeUrl, read, options) {\n    var mapData\n    if (code === null) {\n      var mapUrl = codeUrl\n      mapData = {\n        sourceMappingURL: null,\n        url: mapUrl,\n        sourcesRelativeTo: mapUrl,\n        map: null\n      }\n      mapData.map = readSync(read, mapUrl, mapData)\n      mapData.map = parseMapToJSON(mapData.map, mapData)\n    } else {\n      mapData = resolveSourceMapSync(code, codeUrl, read)\n      if (!mapData) {\n        return null\n      }\n    }\n    var result = resolveSourcesSync(mapData.map, mapData.sourcesRelativeTo, read, options)\n    mapData.sourcesResolved = result.sourcesResolved\n    mapData.sourcesContent  = result.sourcesContent\n    return mapData\n  }\n\n\n\n  return {\n    resolveSourceMap:     resolveSourceMap,\n    resolveSourceMapSync: resolveSourceMapSync,\n    resolveSources:       resolveSources,\n    resolveSourcesSync:   resolveSourcesSync,\n    resolve:              resolve,\n    resolveSync:          resolveSync,\n    parseMapToJSON:       parseMapToJSON\n  }\n\n}));\n"],"file":"source-map-resolve.js"}