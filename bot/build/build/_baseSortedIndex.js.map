{"version":3,"sources":["../node_modules/lodash/_baseSortedIndex.js"],"names":["baseSortedIndexBy","require","identity","isSymbol","MAX_ARRAY_LENGTH","HALF_MAX_ARRAY_LENGTH","low","high","array","value","mid","computed","retHighest","module"],"mappings":";;AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAA/B,sBAA+B,CAA/B;AAAA,IACIC,QAAQ,GAAGD,OAAO,CADtB,YACsB,CADtB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAFtB,YAEsB,CAFtB;AAIA;;;AACA,IAAIG,gBAAgB,GAApB,UAAA;AAAA,IACIC,qBAAqB,GAAGD,gBAAgB,KAD5C,CAAA;AAGA;;;;;;;;;;;;;AAYA,SAAA,eAAA,CAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAmD;AACjD,MAAIE,GAAG,GAAP,CAAA;AAAA,MACIC,IAAI,GAAGC,KAAK,IAALA,IAAAA,GAAAA,GAAAA,GAAsBA,KAAK,CADtC,MAAA;;AAGA,MAAI,OAAA,KAAA,IAAA,QAAA,IAA4BC,KAAK,KAAjC,KAAA,IAA+CF,IAAI,IAAvD,qBAAA,EAAkF;AAChF,WAAOD,GAAG,GAAV,IAAA,EAAmB;AACjB,UAAII,GAAG,GAAIJ,GAAG,GAAJ,IAACA,KAAX,CAAA;AAAA,UACIK,QAAQ,GAAGH,KAAK,CADpB,GACoB,CADpB;;AAGA,UAAIG,QAAQ,KAARA,IAAAA,IAAqB,CAACR,QAAQ,CAA9BQ,QAA8B,CAA9BA,KACCC,UAAU,GAAID,QAAQ,IAAZ,KAAA,GAA0BA,QAAQ,GADjD,KAAIA,CAAJ,EAC6D;AAC3DL,QAAAA,GAAG,GAAGI,GAAG,GAATJ,CAAAA;AAFF,OAAA,MAGO;AACLC,QAAAA,IAAI,GAAJA,GAAAA;AACD;AACF;;AACD,WAAA,IAAA;AACD;;AACD,SAAOP,iBAAiB,CAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAxB,UAAwB,CAAxB;AACD;;AAEDa,MAAM,CAANA,OAAAA,GAAAA,eAAAA","sourcesContent":["var baseSortedIndexBy = require('./_baseSortedIndexBy'),\n    identity = require('./identity'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nmodule.exports = baseSortedIndex;\n"],"file":"_baseSortedIndex.js"}