{"version":3,"sources":["../node_modules/lodash/assign.js"],"names":["assignValue","require","copyObject","createAssigner","isArrayLike","isPrototype","keys","objectProto","Object","hasOwnProperty","assign","source","module"],"mappings":";;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAzB,gBAAyB,CAAzB;AAAA,IACIC,UAAU,GAAGD,OAAO,CADxB,eACwB,CADxB;AAAA,IAEIE,cAAc,GAAGF,OAAO,CAF5B,mBAE4B,CAF5B;AAAA,IAGIG,WAAW,GAAGH,OAAO,CAHzB,eAGyB,CAHzB;AAAA,IAIII,WAAW,GAAGJ,OAAO,CAJzB,gBAIyB,CAJzB;AAAA,IAKIK,IAAI,GAAGL,OAAO,CALlB,QAKkB,CALlB;AAOA;;;AACA,IAAIM,WAAW,GAAGC,MAAM,CAAxB,SAAA;AAEA;;AACA,IAAIC,cAAc,GAAGF,WAAW,CAAhC,cAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAAIG,MAAM,GAAGP,cAAc,CAAC,UAAA,MAAA,EAAA,MAAA,EAAyB;AACnD,MAAIE,WAAW,CAAXA,MAAW,CAAXA,IAAuBD,WAAW,CAAtC,MAAsC,CAAtC,EAAgD;AAC9CF,IAAAA,UAAU,CAAA,MAAA,EAASI,IAAI,CAAb,MAAa,CAAb,EAAVJ,MAAU,CAAVA;AACA;AACD;;AACD,OAAK,IAAL,GAAA,IAAA,MAAA,EAAwB;AACtB,QAAIO,cAAc,CAAdA,IAAAA,CAAAA,MAAAA,EAAJ,GAAIA,CAAJ,EAAsC;AACpCT,MAAAA,WAAW,CAAA,MAAA,EAAA,GAAA,EAAcW,MAAM,CAA/BX,GAA+B,CAApB,CAAXA;AACD;AACF;AATH,CAA2B,CAA3B;AAYAY,MAAM,CAANA,OAAAA,GAAAA,MAAAA","sourcesContent":["var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"],"file":"assign.js"}