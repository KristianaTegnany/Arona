{"version":3,"sources":["../node_modules/lodash/intersectionBy.js"],"names":["arrayMap","require","baseIntersection","baseIteratee","baseRest","castArrayLikeObject","last","intersectionBy","iteratee","mapped","arrays","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,gBAAgB,GAAGD,OAAO,CAD9B,qBAC8B,CAD9B;AAAA,IAEIE,YAAY,GAAGF,OAAO,CAF1B,iBAE0B,CAF1B;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAHtB,aAGsB,CAHtB;AAAA,IAIII,mBAAmB,GAAGJ,OAAO,CAJjC,wBAIiC,CAJjC;AAAA,IAKIK,IAAI,GAAGL,OAAO,CALlB,QAKkB,CALlB;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIM,cAAc,GAAGH,QAAQ,CAAC,UAAA,MAAA,EAAiB;AAC7C,MAAII,QAAQ,GAAGF,IAAI,CAAnB,MAAmB,CAAnB;AAAA,MACIG,MAAM,GAAGT,QAAQ,CAAA,MAAA,EADrB,mBACqB,CADrB;;AAGA,MAAIQ,QAAQ,KAAKF,IAAI,CAArB,MAAqB,CAArB,EAA+B;AAC7BE,IAAAA,QAAQ,GAARA,SAAAA;AADF,GAAA,MAEO;AACLC,IAAAA,MAAM,CAANA,GAAAA;AACD;;AACD,SAAQA,MAAM,CAANA,MAAAA,IAAiBA,MAAM,CAANA,CAAM,CAANA,KAAcC,MAAM,CAAtC,CAAsC,CAArCD,GACJP,gBAAgB,CAAA,MAAA,EAASC,YAAY,CAAA,QAAA,EADlC,CACkC,CAArB,CADZM,GAAR,EAAA;AATF,CAA6B,CAA7B;AAcAE,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIntersection = require('./_baseIntersection'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    castArrayLikeObject = require('./_castArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [2.1]\n *\n * // The `_.property` iteratee shorthand.\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }]\n */\nvar intersectionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  if (iteratee === last(mapped)) {\n    iteratee = undefined;\n  } else {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, baseIteratee(iteratee, 2))\n    : [];\n});\n\nmodule.exports = intersectionBy;\n"],"file":"intersectionBy.js"}