{"version":3,"sources":["../node_modules/stringstream/stringstream.js"],"names":["util","require","Stream","StringDecoder","module","from","to","StringStream","err","Buffer","data","string","AlignedStringDecoder","leftover","rem","buffer","returnBuffer"],"mappings":"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","sourcesContent":["var util = require('util')\nvar Stream = require('stream')\nvar StringDecoder = require('string_decoder').StringDecoder\n\nmodule.exports = StringStream\nmodule.exports.AlignedStringDecoder = AlignedStringDecoder\n\nfunction StringStream(from, to) {\n  if (!(this instanceof StringStream)) return new StringStream(from, to)\n\n  Stream.call(this)\n\n  if (from == null) from = 'utf8'\n\n  this.readable = this.writable = true\n  this.paused = false\n  this.toEncoding = (to == null ? from : to)\n  this.fromEncoding = (to == null ? '' : from)\n  this.decoder = new AlignedStringDecoder(this.toEncoding)\n}\nutil.inherits(StringStream, Stream)\n\nStringStream.prototype.write = function(data) {\n  if (!this.writable) {\n    var err = new Error('stream not writable')\n    err.code = 'EPIPE'\n    this.emit('error', err)\n    return false\n  }\n  if (this.fromEncoding) {\n    if (Buffer.isBuffer(data) || typeof data === 'number') data = data.toString()\n    data = new Buffer(data, this.fromEncoding)\n  }\n  var string = this.decoder.write(data)\n  if (string.length) this.emit('data', string)\n  return !this.paused\n}\n\nStringStream.prototype.flush = function() {\n  if (this.decoder.flush) {\n    var string = this.decoder.flush()\n    if (string.length) this.emit('data', string)\n  }\n}\n\nStringStream.prototype.end = function() {\n  if (!this.writable && !this.readable) return\n  this.flush()\n  this.emit('end')\n  this.writable = this.readable = false\n  this.destroy()\n}\n\nStringStream.prototype.destroy = function() {\n  this.decoder = null\n  this.writable = this.readable = false\n  this.emit('close')\n}\n\nStringStream.prototype.pause = function() {\n  this.paused = true\n}\n\nStringStream.prototype.resume = function () {\n  if (this.paused) this.emit('drain')\n  this.paused = false\n}\n\nfunction AlignedStringDecoder(encoding) {\n  StringDecoder.call(this, encoding)\n\n  switch (this.encoding) {\n    case 'base64':\n      this.write = alignedWrite\n      this.alignedBuffer = new Buffer(3)\n      this.alignedBytes = 0\n      break\n  }\n}\nutil.inherits(AlignedStringDecoder, StringDecoder)\n\nAlignedStringDecoder.prototype.flush = function() {\n  if (!this.alignedBuffer || !this.alignedBytes) return ''\n  var leftover = this.alignedBuffer.toString(this.encoding, 0, this.alignedBytes)\n  this.alignedBytes = 0\n  return leftover\n}\n\nfunction alignedWrite(buffer) {\n  var rem = (this.alignedBytes + buffer.length) % this.alignedBuffer.length\n  if (!rem && !this.alignedBytes) return buffer.toString(this.encoding)\n\n  var returnBuffer = new Buffer(this.alignedBytes + buffer.length - rem)\n\n  this.alignedBuffer.copy(returnBuffer, 0, 0, this.alignedBytes)\n  buffer.copy(returnBuffer, this.alignedBytes, 0, buffer.length - rem)\n\n  buffer.copy(this.alignedBuffer, 0, buffer.length - rem, buffer.length)\n  this.alignedBytes = rem\n\n  return returnBuffer.toString(this.encoding)\n}\n"],"file":"stringstream.js"}