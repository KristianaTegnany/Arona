{"version":3,"sources":["../node_modules/lodash/xorWith.js"],"names":["arrayFilter","require","baseRest","baseXor","isArrayLikeObject","last","xorWith","comparator","module"],"mappings":";;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAzB,gBAAyB,CAAzB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CADtB,aACsB,CADtB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAFrB,YAEqB,CAFrB;AAAA,IAGIG,iBAAiB,GAAGH,OAAO,CAH/B,qBAG+B,CAH/B;AAAA,IAIII,IAAI,GAAGJ,OAAO,CAJlB,QAIkB,CAJlB;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIK,OAAO,GAAGJ,QAAQ,CAAC,UAAA,MAAA,EAAiB;AACtC,MAAIK,UAAU,GAAGF,IAAI,CAArB,MAAqB,CAArB;AACAE,EAAAA,UAAU,GAAG,OAAA,UAAA,IAAA,UAAA,GAAA,UAAA,GAAbA,SAAAA;AACA,SAAOJ,OAAO,CAACH,WAAW,CAAA,MAAA,EAAZ,iBAAY,CAAZ,EAAA,SAAA,EAAd,UAAc,CAAd;AAHF,CAAsB,CAAtB;AAMAQ,MAAM,CAANA,OAAAA,GAAAA,OAAAA","sourcesContent":["var arrayFilter = require('./_arrayFilter'),\n    baseRest = require('./_baseRest'),\n    baseXor = require('./_baseXor'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nmodule.exports = xorWith;\n"],"file":"xorWith.js"}