{"version":3,"sources":["../node_modules/extract-domain/benchmark.js"],"names":["bench","require","extractDomainDist","extractDomain","url","times","timesToLocale","domain","matches","b","i","extractDomainRegEx","extractDomainArray"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAArB,WAAqB,CAArB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAjC,2BAAiC,CAAjC;;AACA,IAAME,aAAa,GAAGF,OAAO,CAA7B,SAA6B,CAA7B;;AACA,IAAMG,GAAG,GAAT,8CAAA;AAEA,IAAMC,KAAK,GAAX,OAAA;AAEA,IAAMC,aAAa,GAAGD,KAAK,CAA3B,cAAsBA,EAAtB;;AAEA,SAAA,kBAAA,CAAA,GAAA,EAAiC;AAC7B,MAAA,MAAA;;AAEA,MAAID,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,IAAqB,CAAzB,CAAA,EAA6B;AACzBG,IAAAA,MAAM,GAAGH,GAAG,CAAHA,KAAAA,CAAAA,GAAAA,EAATG,CAASH,CAATG;AADJ,GAAA,MAEO;AACHA,IAAAA,MAAM,GAAGH,GAAG,CAAHA,KAAAA,CAAAA,GAAAA,EAATG,CAASH,CAATG;AACH;;AAED,SAAOA,MAAM,CAANA,KAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAAP,EAAOA,CAAP;AACH;;AAED,SAAA,kBAAA,CAAA,GAAA,EAAiC;AAC7B,MAAMC,OAAO,GAAGJ,GAAG,CAAHA,KAAAA,CAAhB,uCAAgBA,CAAhB;AAEA,SAAOI,OAAO,CAAd,CAAc,CAAd;AACH;;AAEDR,KAAK,+BAAA,aAAA,aAA+CS,UAAAA,CAAC,EAAI;AACrDA,EAAAA,CAAC,CAADA,KAAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC5BR,IAAAA,iBAAiB,CAAjBA,GAAiB,CAAjBA,KAAAA,WAAAA;AACH;;AAEDO,EAAAA,CAAC,CAADA,GAAAA;AAPJT,CAAK,CAALA;AAUAA,KAAK,0BAAA,aAAA,aAA0CS,UAAAA,CAAC,EAAI;AAChDA,EAAAA,CAAC,CAADA,KAAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC5BP,IAAAA,aAAa,CAAbA,GAAa,CAAbA,KAAAA,WAAAA;AACH;;AAEDM,EAAAA,CAAC,CAADA,GAAAA;AAPJT,CAAK,CAALA;AAUAA,KAAK,gCAAA,aAAA,aAAgDS,UAAAA,CAAC,EAAI;AACtDA,EAAAA,CAAC,CAADA,KAAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC5BC,IAAAA,kBAAkB,CAAlBA,GAAkB,CAAlBA,KAAAA,WAAAA;AACH;;AAEDF,EAAAA,CAAC,CAADA,GAAAA;AAPJT,CAAK,CAALA;AAUAA,KAAK,qCAAA,aAAA,aAAqDS,UAAAA,CAAC,EAAI;AAC3DA,EAAAA,CAAC,CAADA,KAAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC5BE,IAAAA,kBAAkB,CAAlBA,GAAkB,CAAlBA,KAAAA,WAAAA;AACH;;AAEDH,EAAAA,CAAC,CAADA,GAAAA;AAPJT,CAAK,CAALA","sourcesContent":["const bench = require('nanobench');\nconst extractDomainDist = require('./dist/extract-domain.min');\nconst extractDomain = require('./index');\nconst url = 'https://www.npmjs.com/package/extract-domain';\n\nconst times = 2500000;\n\nconst timesToLocale = times.toLocaleString();\n\nfunction extractDomainArray(url) {\n    let domain;\n\n    if (url.indexOf('://') > -1) {\n        domain = url.split('/')[2];\n    } else {\n        domain = url.split('/')[0];\n    }\n\n    return domain.split(':')[0].replace('www.', '');\n}\n\nfunction extractDomainRegEx(url) {\n    const matches = url.match(/([^\\/?#.]+\\.[^\\/?#.:]+)(?:[\\/?#:]|$)/i);\n\n    return matches[1];\n}\n\nbench(`extract domain dist ${timesToLocale} times`, b => {\n    b.start();\n\n    for (let i = 0; i < times; i++) {\n        extractDomainDist(url) === 'npmjs.com';\n    }\n\n    b.end();\n});\n\nbench(`extract domain ${timesToLocale} times`, b => {\n    b.start();\n\n    for (let i = 0; i < times; i++) {\n        extractDomain(url) === 'npmjs.com';\n    }\n\n    b.end();\n});\n\nbench(`extract domain regex ${timesToLocale} times`, b => {\n    b.start();\n\n    for (let i = 0; i < times; i++) {\n        extractDomainRegEx(url) === 'npmjs.com';\n    }\n\n    b.end();\n});\n\nbench(`extract domain array hack ${timesToLocale} times`, b => {\n    b.start();\n\n    for (let i = 0; i < times; i++) {\n        extractDomainArray(url) === 'npmjs.com';\n    }\n\n    b.end();\n});\n"],"file":"benchmark.js"}