{"version":3,"sources":["../node_modules/bl/bl.js"],"names":["DuplexStream","require","util","piper","src","Buffer","Array","callback","BufferList","tot","i","_t","offset","isBuffer","buf","size","Math","index","srcStart","srcEnd","dst","copy","off","len","bytes","bufoff","start","l","methods","module"],"mappings":"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","sourcesContent":["var DuplexStream = require('readable-stream/duplex')\n  , util         = require('util')\n\nfunction BufferList (callback) {\n  if (!(this instanceof BufferList))\n    return new BufferList(callback)\n\n  this._bufs  = []\n  this.length = 0\n\n  if (typeof callback == 'function') {\n    this._callback = callback\n\n    var piper = function (err) {\n      if (this._callback) {\n        this._callback(err)\n        this._callback = null\n      }\n    }.bind(this)\n\n    this.on('pipe', function (src) {\n      src.on('error', piper)\n    })\n    this.on('unpipe', function (src) {\n      src.removeListener('error', piper)\n    })\n  }\n  else if (Buffer.isBuffer(callback))\n    this.append(callback)\n  else if (Array.isArray(callback)) {\n    callback.forEach(function (b) {\n      Buffer.isBuffer(b) && this.append(b)\n    }.bind(this))\n  }\n\n  DuplexStream.call(this)\n}\n\nutil.inherits(BufferList, DuplexStream)\n\nBufferList.prototype._offset = function (offset) {\n  var tot = 0, i = 0, _t\n  for (; i < this._bufs.length; i++) {\n    _t = tot + this._bufs[i].length\n    if (offset < _t)\n      return [ i, offset - tot ]\n    tot = _t\n  }\n}\n\nBufferList.prototype.append = function (buf) {\n  var isBuffer = Buffer.isBuffer(buf) ||\n                 buf instanceof BufferList\n\n  // coerce number arguments to strings, since Buffer(number) does\n  // uninitialized memory allocation\n  if (typeof buf == 'number')\n    buf = buf.toString()\n\n  this._bufs.push(isBuffer ? buf : new Buffer(buf))\n  this.length += buf.length\n  return this\n}\n\nBufferList.prototype._write = function (buf, encoding, callback) {\n  this.append(buf)\n  if (callback)\n    callback()\n}\n\nBufferList.prototype._read = function (size) {\n  if (!this.length)\n    return this.push(null)\n  size = Math.min(size, this.length)\n  this.push(this.slice(0, size))\n  this.consume(size)\n}\n\nBufferList.prototype.end = function (chunk) {\n  DuplexStream.prototype.end.call(this, chunk)\n\n  if (this._callback) {\n    this._callback(null, this.slice())\n    this._callback = null\n  }\n}\n\nBufferList.prototype.get = function (index) {\n  return this.slice(index, index + 1)[0]\n}\n\nBufferList.prototype.slice = function (start, end) {\n  return this.copy(null, 0, start, end)\n}\n\nBufferList.prototype.copy = function (dst, dstStart, srcStart, srcEnd) {\n  if (typeof srcStart != 'number' || srcStart < 0)\n    srcStart = 0\n  if (typeof srcEnd != 'number' || srcEnd > this.length)\n    srcEnd = this.length\n  if (srcStart >= this.length)\n    return dst || new Buffer(0)\n  if (srcEnd <= 0)\n    return dst || new Buffer(0)\n\n  var copy   = !!dst\n    , off    = this._offset(srcStart)\n    , len    = srcEnd - srcStart\n    , bytes  = len\n    , bufoff = (copy && dstStart) || 0\n    , start  = off[1]\n    , l\n    , i\n\n  // copy/slice everything\n  if (srcStart === 0 && srcEnd == this.length) {\n    if (!copy) // slice, just return a full concat\n      return Buffer.concat(this._bufs)\n\n    // copy, need to copy individual buffers\n    for (i = 0; i < this._bufs.length; i++) {\n      this._bufs[i].copy(dst, bufoff)\n      bufoff += this._bufs[i].length\n    }\n\n    return dst\n  }\n\n  // easy, cheap case where it's a subset of one of the buffers\n  if (bytes <= this._bufs[off[0]].length - start) {\n    return copy\n      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)\n      : this._bufs[off[0]].slice(start, start + bytes)\n  }\n\n  if (!copy) // a slice, we need something to copy in to\n    dst = new Buffer(len)\n\n  for (i = off[0]; i < this._bufs.length; i++) {\n    l = this._bufs[i].length - start\n\n    if (bytes > l) {\n      this._bufs[i].copy(dst, bufoff, start)\n    } else {\n      this._bufs[i].copy(dst, bufoff, start, start + bytes)\n      break\n    }\n\n    bufoff += l\n    bytes -= l\n\n    if (start)\n      start = 0\n  }\n\n  return dst\n}\n\nBufferList.prototype.toString = function (encoding, start, end) {\n  return this.slice(start, end).toString(encoding)\n}\n\nBufferList.prototype.consume = function (bytes) {\n  while (this._bufs.length) {\n    if (bytes > this._bufs[0].length) {\n      bytes -= this._bufs[0].length\n      this.length -= this._bufs[0].length\n      this._bufs.shift()\n    } else {\n      this._bufs[0] = this._bufs[0].slice(bytes)\n      this.length -= bytes\n      break\n    }\n  }\n  return this\n}\n\nBufferList.prototype.duplicate = function () {\n  var i = 0\n    , copy = new BufferList()\n\n  for (; i < this._bufs.length; i++)\n    copy.append(this._bufs[i])\n\n  return copy\n}\n\nBufferList.prototype.destroy = function () {\n  this._bufs.length = 0;\n  this.length = 0;\n  this.push(null);\n}\n\n;(function () {\n  var methods = {\n      'readDoubleBE' : 8\n    , 'readDoubleLE' : 8\n    , 'readFloatBE'  : 4\n    , 'readFloatLE'  : 4\n    , 'readInt32BE'  : 4\n    , 'readInt32LE'  : 4\n    , 'readUInt32BE' : 4\n    , 'readUInt32LE' : 4\n    , 'readInt16BE'  : 2\n    , 'readInt16LE'  : 2\n    , 'readUInt16BE' : 2\n    , 'readUInt16LE' : 2\n    , 'readInt8'     : 1\n    , 'readUInt8'    : 1\n  }\n\n  for (var m in methods) {\n    (function (m) {\n      BufferList.prototype[m] = function (offset) {\n        return this.slice(offset, offset + methods[m])[m](0)\n      }\n    }(m))\n  }\n}())\n\nmodule.exports = BufferList\n"],"file":"bl.js"}