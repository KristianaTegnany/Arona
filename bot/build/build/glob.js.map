{"version":3,"sources":["../node_modules/glob/glob.js"],"names":["module","fs","require","rp","minimatch","Minimatch","inherits","EE","path","assert","isAbsolute","globSync","common","alphasort","alphasorti","setopts","ownProp","inflight","util","childrenIgnored","isIgnored","once","cb","options","glob","GlobSync","add","keys","Object","i","origin","extend","g","set","j","n","self","done","sync","process","Glob","matchset","found","p","er","eq","e","pq","pattern","prefix","remain","read","abs","isGlobStar","pn","negate","rawGlob","dotOk","matchedEntries","entries","m","len","c","Array","st","lstatkey","lstatcb","isSym","lstat","inGlobStar","readdirCb","error","console","remainWithoutGlobStar","gspref","noGlobStar","instead","below","trail","needDir","f","stat","type","statcb"],"mappings":"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","sourcesContent":["// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nmodule.exports = glob\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar inherits = require('inherits')\nvar EE = require('events').EventEmitter\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar globSync = require('./sync.js')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar inflight = require('inflight')\nvar util = require('util')\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nvar once = require('once')\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {}\n  if (!options) options = {}\n\n  if (options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return globSync(pattern, options)\n  }\n\n  return new Glob(pattern, options, cb)\n}\n\nglob.sync = globSync\nvar GlobSync = glob.GlobSync = globSync.GlobSync\n\n// old api surface\nglob.glob = glob\n\nfunction extend (origin, add) {\n  if (add === null || typeof add !== 'object') {\n    return origin\n  }\n\n  var keys = Object.keys(add)\n  var i = keys.length\n  while (i--) {\n    origin[keys[i]] = add[keys[i]]\n  }\n  return origin\n}\n\nglob.hasMagic = function (pattern, options_) {\n  var options = extend({}, options_)\n  options.noprocess = true\n\n  var g = new Glob(pattern, options)\n  var set = g.minimatch.set\n\n  if (!pattern)\n    return false\n\n  if (set.length > 1)\n    return true\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string')\n      return true\n  }\n\n  return false\n}\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = null\n  }\n\n  if (options && options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return new GlobSync(pattern, options)\n  }\n\n  if (!(this instanceof Glob))\n    return new Glob(pattern, options, cb)\n\n  setopts(this, pattern, options)\n  this._didRealPath = false\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  if (typeof cb === 'function') {\n    cb = once(cb)\n    this.on('error', cb)\n    this.on('end', function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  var self = this\n  this._processing = 0\n\n  this._emitQueue = []\n  this._processQueue = []\n  this.paused = false\n\n  if (this.noprocess)\n    return this\n\n  if (n === 0)\n    return done()\n\n  var sync = true\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false, done)\n  }\n  sync = false\n\n  function done () {\n    --self._processing\n    if (self._processing <= 0) {\n      if (sync) {\n        process.nextTick(function () {\n          self._finish()\n        })\n      } else {\n        self._finish()\n      }\n    }\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n  if (this.aborted)\n    return\n\n  if (this.realpath && !this._didRealpath)\n    return this._realpath()\n\n  common.finish(this)\n  this.emit('end', this.found)\n}\n\nGlob.prototype._realpath = function () {\n  if (this._didRealpath)\n    return\n\n  this._didRealpath = true\n\n  var n = this.matches.length\n  if (n === 0)\n    return this._finish()\n\n  var self = this\n  for (var i = 0; i < this.matches.length; i++)\n    this._realpathSet(i, next)\n\n  function next () {\n    if (--n === 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._realpathSet = function (index, cb) {\n  var matchset = this.matches[index]\n  if (!matchset)\n    return cb()\n\n  var found = Object.keys(matchset)\n  var self = this\n  var n = found.length\n\n  if (n === 0)\n    return cb()\n\n  var set = this.matches[index] = Object.create(null)\n  found.forEach(function (p, i) {\n    // If there's a problem with the stat, then it means that\n    // one or more of the links in the realpath couldn't be\n    // resolved.  just return the abs value in that case.\n    p = self._makeAbs(p)\n    rp.realpath(p, self.realpathCache, function (er, real) {\n      if (!er)\n        set[real] = true\n      else if (er.syscall === 'stat')\n        set[p] = true\n      else\n        self.emit('error', er) // srsly wtf right here\n\n      if (--n === 0) {\n        self.matches[index] = set\n        cb()\n      }\n    })\n  })\n}\n\nGlob.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlob.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit('abort')\n}\n\nGlob.prototype.pause = function () {\n  if (!this.paused) {\n    this.paused = true\n    this.emit('pause')\n  }\n}\n\nGlob.prototype.resume = function () {\n  if (this.paused) {\n    this.emit('resume')\n    this.paused = false\n    if (this._emitQueue.length) {\n      var eq = this._emitQueue.slice(0)\n      this._emitQueue.length = 0\n      for (var i = 0; i < eq.length; i ++) {\n        var e = eq[i]\n        this._emitMatch(e[0], e[1])\n      }\n    }\n    if (this._processQueue.length) {\n      var pq = this._processQueue.slice(0)\n      this._processQueue.length = 0\n      for (var i = 0; i < pq.length; i ++) {\n        var p = pq[i]\n        this._processing--\n        this._process(p[0], p[1], p[2], p[3])\n      }\n    }\n  }\n}\n\nGlob.prototype._process = function (pattern, index, inGlobStar, cb) {\n  assert(this instanceof Glob)\n  assert(typeof cb === 'function')\n\n  if (this.aborted)\n    return\n\n  this._processing++\n  if (this.paused) {\n    this._processQueue.push([pattern, index, inGlobStar, cb])\n    return\n  }\n\n  //console.error('PROCESS %d', this._processing, pattern)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index, cb)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip _processing\n  if (childrenIgnored(this, read))\n    return cb()\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)\n}\n\nGlob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\nGlob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return cb()\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return cb()\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return cb()\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix) {\n      if (prefix !== '/')\n        e = prefix + '/' + e\n      else\n        e = prefix + e\n    }\n    this._process([e].concat(remain), index, inGlobStar, cb)\n  }\n  cb()\n}\n\nGlob.prototype._emitMatch = function (index, e) {\n  if (this.aborted)\n    return\n\n  if (isIgnored(this, e))\n    return\n\n  if (this.paused) {\n    this._emitQueue.push([index, e])\n    return\n  }\n\n  var abs = isAbsolute(e) ? e : this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute)\n    e = abs\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  var st = this.statCache[abs]\n  if (st)\n    this.emit('stat', e, st)\n\n  this.emit('match', e)\n}\n\nGlob.prototype._readdirInGlobStar = function (abs, cb) {\n  if (this.aborted)\n    return\n\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false, cb)\n\n  var lstatkey = 'lstat\\0' + abs\n  var self = this\n  var lstatcb = inflight(lstatkey, lstatcb_)\n\n  if (lstatcb)\n    fs.lstat(abs, lstatcb)\n\n  function lstatcb_ (er, lstat) {\n    if (er && er.code === 'ENOENT')\n      return cb()\n\n    var isSym = lstat && lstat.isSymbolicLink()\n    self.symlinks[abs] = isSym\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) {\n      self.cache[abs] = 'FILE'\n      cb()\n    } else\n      self._readdir(abs, false, cb)\n  }\n}\n\nGlob.prototype._readdir = function (abs, inGlobStar, cb) {\n  if (this.aborted)\n    return\n\n  cb = inflight('readdir\\0'+abs+'\\0'+inGlobStar, cb)\n  if (!cb)\n    return\n\n  //console.error('RD %j %j', +inGlobStar, abs)\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs, cb)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return cb()\n\n    if (Array.isArray(c))\n      return cb(null, c)\n  }\n\n  var self = this\n  fs.readdir(abs, readdirCb(this, abs, cb))\n}\n\nfunction readdirCb (self, abs, cb) {\n  return function (er, entries) {\n    if (er)\n      self._readdirError(abs, er, cb)\n    else\n      self._readdirEntries(abs, entries, cb)\n  }\n}\n\nGlob.prototype._readdirEntries = function (abs, entries, cb) {\n  if (this.aborted)\n    return\n\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n  return cb(null, entries)\n}\n\nGlob.prototype._readdirError = function (f, er, cb) {\n  if (this.aborted)\n    return\n\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        this.emit('error', error)\n        this.abort()\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n\n  return cb()\n}\n\nGlob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\n\nGlob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n  //console.error('pgs2', prefix, remain[0], entries)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return cb()\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false, cb)\n\n  var isSym = this.symlinks[abs]\n  var len = entries.length\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return cb()\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true, cb)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true, cb)\n  }\n\n  cb()\n}\n\nGlob.prototype._processSimple = function (prefix, index, cb) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var self = this\n  this._stat(prefix, function (er, exists) {\n    self._processSimple2(prefix, index, er, exists, cb)\n  })\n}\nGlob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {\n\n  //console.error('ps2', prefix, exists)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return cb()\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n  cb()\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return cb()\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return cb(null, c)\n\n    if (needDir && c === 'FILE')\n      return cb()\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (stat !== undefined) {\n    if (stat === false)\n      return cb(null, stat)\n    else {\n      var type = stat.isDirectory() ? 'DIR' : 'FILE'\n      if (needDir && type === 'FILE')\n        return cb()\n      else\n        return cb(null, type, stat)\n    }\n  }\n\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb_)\n  if (statcb)\n    fs.lstat(abs, statcb)\n\n  function lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n    this.statCache[abs] = false\n    return cb()\n  }\n\n  var needDir = f.slice(-1) === '/'\n  this.statCache[abs] = stat\n\n  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())\n    return cb(null, false, stat)\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return cb()\n\n  return cb(null, c, stat)\n}\n"],"file":"glob.js"}