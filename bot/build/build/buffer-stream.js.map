{"version":3,"sources":["../node_modules/get-stream/buffer-stream.js"],"names":["PassThrough","require","module","opts","Object","array","encoding","buffer","objectMode","len","ret","stream","chunk","Buffer"],"mappings":"AAAA;;AACA,IAAMA,WAAW,GAAGC,OAAO,CAAPA,QAAO,CAAPA,CAApB,WAAA;;AAEAC,MAAM,CAANA,OAAAA,GAAiBC,UAAAA,IAAI,EAAI;AACxBA,EAAAA,IAAI,GAAGC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAPD,IAAOC,CAAPD;AAEA,MAAME,KAAK,GAAGF,IAAI,CAAlB,KAAA;AACA,MAAIG,QAAQ,GAAGH,IAAI,CAAnB,QAAA;AACA,MAAMI,MAAM,GAAGD,QAAQ,KAAvB,QAAA;AACA,MAAIE,UAAU,GAAd,KAAA;;AAEA,MAAA,KAAA,EAAW;AACVA,IAAAA,UAAU,GAAG,EAAEF,QAAQ,IAAvBE,MAAa,CAAbA;AADD,GAAA,MAEO;AACNF,IAAAA,QAAQ,GAAGA,QAAQ,IAAnBA,MAAAA;AACA;;AAED,MAAA,MAAA,EAAY;AACXA,IAAAA,QAAQ,GAARA,IAAAA;AACA;;AAED,MAAIG,GAAG,GAAP,CAAA;AACA,MAAMC,GAAG,GAAT,EAAA;AACA,MAAMC,MAAM,GAAG,IAAA,WAAA,CAAgB;AAACH,IAAAA,UAAAA,EAAAA;AAAD,GAAhB,CAAf;;AAEA,MAAA,QAAA,EAAc;AACbG,IAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACA;;AAEDA,EAAAA,MAAM,CAANA,EAAAA,CAAAA,MAAAA,EAAkBC,UAAAA,KAAK,EAAI;AAC1BF,IAAAA,GAAG,CAAHA,IAAAA,CAAAA,KAAAA;;AAEA,QAAA,UAAA,EAAgB;AACfD,MAAAA,GAAG,GAAGC,GAAG,CAATD,MAAAA;AADD,KAAA,MAEO;AACNA,MAAAA,GAAG,IAAIG,KAAK,CAAZH,MAAAA;AACA;AAPFE,GAAAA;;AAUAA,EAAAA,MAAM,CAANA,gBAAAA,GAA0B,YAAM;AAC/B,QAAA,KAAA,EAAW;AACV,aAAA,GAAA;AACA;;AAED,WAAOJ,MAAM,GAAGM,MAAM,CAANA,MAAAA,CAAAA,GAAAA,EAAH,GAAGA,CAAH,GAA6BH,GAAG,CAAHA,IAAAA,CAA1C,EAA0CA,CAA1C;AALDC,GAAAA;;AAQAA,EAAAA,MAAM,CAANA,iBAAAA,GAA2B;AAAA,WAA3BA,GAA2B;AAAA,GAA3BA;;AAEA,SAAA,MAAA;AA9CDT,CAAAA","sourcesContent":["'use strict';\nconst PassThrough = require('stream').PassThrough;\n\nmodule.exports = opts => {\n\topts = Object.assign({}, opts);\n\n\tconst array = opts.array;\n\tlet encoding = opts.encoding;\n\tconst buffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || buffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (buffer) {\n\t\tencoding = null;\n\t}\n\n\tlet len = 0;\n\tconst ret = [];\n\tconst stream = new PassThrough({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tstream.on('data', chunk => {\n\t\tret.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlen = ret.length;\n\t\t} else {\n\t\t\tlen += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn buffer ? Buffer.concat(ret, len) : ret.join('');\n\t};\n\n\tstream.getBufferedLength = () => len;\n\n\treturn stream;\n};\n"],"file":"buffer-stream.js"}