{"version":3,"sources":["../node_modules/public-encrypt/publicEncrypt.js"],"names":["parseKeys","require","randomBytes","createHash","mgf","xor","BN","withPublic","crt","Buffer","module","publicKey","padding","key","paddedMsg","oaep","pkcs1","k","mLen","msg","iHash","hLen","hLen2","ps","dblen","seed","maskedDb","maskedSeed","nonZero","reverse","out","i","cache","len","cur","num"],"mappings":"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","sourcesContent":["var parseKeys = require('parse-asn1')\nvar randomBytes = require('randombytes')\nvar createHash = require('create-hash')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar withPublic = require('./withPublic')\nvar crt = require('browserify-rsa')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\n  var padding\n  if (publicKey.padding) {\n    padding = publicKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n  var key = parseKeys(publicKey)\n  var paddedMsg\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg)\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    paddedMsg = new BN(msg)\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus')\n    }\n  } else {\n    throw new Error('unknown padding')\n  }\n  if (reverse) {\n    return crt(paddedMsg, key)\n  } else {\n    return withPublic(paddedMsg, key)\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var mLen = msg.length\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  var hLen2 = 2 * hLen\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long')\n  }\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\n  var dblen = k - hLen - 1\n  var seed = randomBytes(hLen)\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\n}\nfunction pkcs1 (key, msg, reverse) {\n  var mLen = msg.length\n  var k = key.modulus.byteLength()\n  if (mLen > k - 11) {\n    throw new Error('message too long')\n  }\n  var ps\n  if (reverse) {\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\n  } else {\n    ps = nonZero(k - mLen - 3)\n  }\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\n}\nfunction nonZero (len) {\n  var out = Buffer.allocUnsafe(len)\n  var i = 0\n  var cache = randomBytes(len * 2)\n  var cur = 0\n  var num\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len * 2)\n      cur = 0\n    }\n    num = cache[cur++]\n    if (num) {\n      out[i++] = num\n    }\n  }\n  return out\n}\n"],"file":"publicEncrypt.js"}