{"version":3,"sources":["../node_modules/lodash/_overRest.js"],"names":["apply","require","nativeMax","Math","start","func","args","index","length","array","Array","otherArgs","transform","module"],"mappings":";;AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAnB,UAAmB,CAAnB;AAEA;;;AACA,IAAIC,SAAS,GAAGC,IAAI,CAApB,GAAA;AAEA;;;;;;;;;;AASA,SAAA,QAAA,CAAA,IAAA,EAAA,KAAA,EAAA,SAAA,EAA0C;AACxCC,EAAAA,KAAK,GAAGF,SAAS,CAACE,KAAK,KAALA,SAAAA,GAAuBC,IAAI,CAAJA,MAAAA,GAAvBD,CAAAA,GAAD,KAAA,EAAjBA,CAAiB,CAAjBA;AACA,SAAO,YAAW;AAChB,QAAIE,IAAI,GAAR,SAAA;AAAA,QACIC,KAAK,GAAG,CADZ,CAAA;AAAA,QAEIC,MAAM,GAAGN,SAAS,CAACI,IAAI,CAAJA,MAAAA,GAAD,KAAA,EAFtB,CAEsB,CAFtB;AAAA,QAGIG,KAAK,GAAGC,KAAK,CAHjB,MAGiB,CAHjB;;AAKA,WAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvBD,MAAAA,KAAK,CAALA,KAAK,CAALA,GAAeH,IAAI,CAACF,KAAK,GAAzBK,KAAmB,CAAnBA;AACD;;AACDF,IAAAA,KAAK,GAAG,CAARA,CAAAA;AACA,QAAII,SAAS,GAAGD,KAAK,CAACN,KAAK,GAA3B,CAAqB,CAArB;;AACA,WAAO,EAAA,KAAA,GAAP,KAAA,EAAwB;AACtBO,MAAAA,SAAS,CAATA,KAAS,CAATA,GAAmBL,IAAI,CAAvBK,KAAuB,CAAvBA;AACD;;AACDA,IAAAA,SAAS,CAATA,KAAS,CAATA,GAAmBC,SAAS,CAA5BD,KAA4B,CAA5BA;AACA,WAAOX,KAAK,CAAA,IAAA,EAAA,IAAA,EAAZ,SAAY,CAAZ;AAfF,GAAA;AAiBD;;AAEDa,MAAM,CAANA,OAAAA,GAAAA,QAAAA","sourcesContent":["var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n"],"file":"_overRest.js"}