{"version":3,"sources":["../node_modules/lodash/_createWrap.js"],"names":["baseSetData","require","createBind","createCurry","createHybrid","createPartial","getData","mergeData","setData","setWrapToString","toInteger","FUNC_ERROR_TEXT","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","nativeMax","Math","isBindKey","bitmask","length","partials","holders","ary","arity","partialsRight","holdersRight","data","newData","func","thisArg","result","setter","module"],"mappings":"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","sourcesContent":["var baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n"],"file":"_createWrap.js"}