{"version":3,"sources":["../node_modules/lodash/template.js"],"names":["assignInWith","require","attempt","baseValues","customDefaultsAssignIn","escapeStringChar","isError","isIterateeCall","keys","reInterpolate","templateSettings","toString","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","reEsTemplate","reNoMatch","reUnescapedString","objectProto","Object","hasOwnProperty","settings","guard","options","string","imports","importsKeys","importsValues","index","interpolate","source","reDelimiters","RegExp","sourceURL","interpolateValue","isEscaping","isEvaluating","offset","match","variable","result","Function","module"],"mappings":"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","sourcesContent":["var assignInWith = require('./assignInWith'),\n    attempt = require('./attempt'),\n    baseValues = require('./_baseValues'),\n    customDefaultsAssignIn = require('./_customDefaultsAssignIn'),\n    escapeStringChar = require('./_escapeStringChar'),\n    isError = require('./isError'),\n    isIterateeCall = require('./_isIterateeCall'),\n    keys = require('./keys'),\n    reInterpolate = require('./_reInterpolate'),\n    templateSettings = require('./templateSettings'),\n    toString = require('./toString');\n\n/** Used to match empty string literals in compiled template source. */\nvar reEmptyStringLeading = /\\b__p \\+= '';/g,\n    reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n    reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n/**\n * Used to match\n * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n */\nvar reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n/** Used to ensure capturing order of template delimiters. */\nvar reNoMatch = /($^)/;\n\n/** Used to match unescaped characters in compiled string literals. */\nvar reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates a compiled template function that can interpolate data properties\n * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n * properties may be accessed as free variables in the template. If a setting\n * object is given, it takes precedence over `_.templateSettings` values.\n *\n * **Note:** In the development build `_.template` utilizes\n * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * for easier debugging.\n *\n * For more information on precompiling templates see\n * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n *\n * For more information on Chrome extension sandboxes see\n * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The template string.\n * @param {Object} [options={}] The options object.\n * @param {RegExp} [options.escape=_.templateSettings.escape]\n *  The HTML \"escape\" delimiter.\n * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n *  The \"evaluate\" delimiter.\n * @param {Object} [options.imports=_.templateSettings.imports]\n *  An object to import into the template as free variables.\n * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n *  The \"interpolate\" delimiter.\n * @param {string} [options.sourceURL='templateSources[n]']\n *  The sourceURL of the compiled template.\n * @param {string} [options.variable='obj']\n *  The data object variable name.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Function} Returns the compiled template function.\n * @example\n *\n * // Use the \"interpolate\" delimiter to create a compiled template.\n * var compiled = _.template('hello <%= user %>!');\n * compiled({ 'user': 'fred' });\n * // => 'hello fred!'\n *\n * // Use the HTML \"escape\" delimiter to escape data property values.\n * var compiled = _.template('<b><%- value %></b>');\n * compiled({ 'value': '<script>' });\n * // => '<b>&lt;script&gt;</b>'\n *\n * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // Use the internal `print` function in \"evaluate\" delimiters.\n * var compiled = _.template('<% print(\"hello \" + user); %>!');\n * compiled({ 'user': 'barney' });\n * // => 'hello barney!'\n *\n * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n * // Disable support by replacing the \"interpolate\" delimiter.\n * var compiled = _.template('hello ${ user }!');\n * compiled({ 'user': 'pebbles' });\n * // => 'hello pebbles!'\n *\n * // Use backslashes to treat delimiters as plain text.\n * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n * compiled({ 'value': 'ignored' });\n * // => '<%- value %>'\n *\n * // Use the `imports` option to import `jQuery` as `jq`.\n * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n * compiled(data);\n * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n *\n * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n * compiled.source;\n * // => function(data) {\n * //   var __t, __p = '';\n * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n * //   return __p;\n * // }\n *\n * // Use custom template delimiters.\n * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n * var compiled = _.template('hello {{ user }}!');\n * compiled({ 'user': 'mustache' });\n * // => 'hello mustache!'\n *\n * // Use the `source` property to inline compiled templates for meaningful\n * // line numbers in error messages and stack traces.\n * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n *   var JST = {\\\n *     \"main\": ' + _.template(mainText).source + '\\\n *   };\\\n * ');\n */\nfunction template(string, options, guard) {\n  // Based on John Resig's `tmpl` implementation\n  // (http://ejohn.org/blog/javascript-micro-templating/)\n  // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n  var settings = templateSettings.imports._.templateSettings || templateSettings;\n\n  if (guard && isIterateeCall(string, options, guard)) {\n    options = undefined;\n  }\n  string = toString(string);\n  options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n      importsKeys = keys(imports),\n      importsValues = baseValues(imports, importsKeys);\n\n  var isEscaping,\n      isEvaluating,\n      index = 0,\n      interpolate = options.interpolate || reNoMatch,\n      source = \"__p += '\";\n\n  // Compile the regexp to match each delimiter.\n  var reDelimiters = RegExp(\n    (options.escape || reNoMatch).source + '|' +\n    interpolate.source + '|' +\n    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n    (options.evaluate || reNoMatch).source + '|$'\n  , 'g');\n\n  // Use a sourceURL for easier debugging.\n  // The sourceURL gets injected into the source that's eval-ed, so be careful\n  // with lookup (in case of e.g. prototype pollution), and strip newlines if any.\n  // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.\n  var sourceURL = hasOwnProperty.call(options, 'sourceURL')\n    ? ('//# sourceURL=' +\n       (options.sourceURL + '').replace(/[\\r\\n]/g, ' ') +\n       '\\n')\n    : '';\n\n  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n    interpolateValue || (interpolateValue = esTemplateValue);\n\n    // Escape characters that can't be included in string literals.\n    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n    // Replace delimiters with snippets.\n    if (escapeValue) {\n      isEscaping = true;\n      source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n    }\n    if (evaluateValue) {\n      isEvaluating = true;\n      source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n    }\n    if (interpolateValue) {\n      source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n    }\n    index = offset + match.length;\n\n    // The JS engine embedded in Adobe products needs `match` returned in\n    // order to produce the correct `offset` value.\n    return match;\n  });\n\n  source += \"';\\n\";\n\n  // If `variable` is not specified wrap a with-statement around the generated\n  // code to add the data object to the top of the scope chain.\n  // Like with sourceURL, we take care to not check the option's prototype,\n  // as this configuration is a code injection vector.\n  var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n  if (!variable) {\n    source = 'with (obj) {\\n' + source + '\\n}\\n';\n  }\n  // Cleanup code by stripping empty strings.\n  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n    .replace(reEmptyStringMiddle, '$1')\n    .replace(reEmptyStringTrailing, '$1;');\n\n  // Frame code as the function body.\n  source = 'function(' + (variable || 'obj') + ') {\\n' +\n    (variable\n      ? ''\n      : 'obj || (obj = {});\\n'\n    ) +\n    \"var __t, __p = ''\" +\n    (isEscaping\n       ? ', __e = _.escape'\n       : ''\n    ) +\n    (isEvaluating\n      ? ', __j = Array.prototype.join;\\n' +\n        \"function print() { __p += __j.call(arguments, '') }\\n\"\n      : ';\\n'\n    ) +\n    source +\n    'return __p\\n}';\n\n  var result = attempt(function() {\n    return Function(importsKeys, sourceURL + 'return ' + source)\n      .apply(undefined, importsValues);\n  });\n\n  // Provide the compiled function's source by its `toString` method or\n  // the `source` property as a convenience for inlining compiled templates.\n  result.source = source;\n  if (isError(result)) {\n    throw result;\n  }\n  return result;\n}\n\nmodule.exports = template;\n"],"file":"template.js"}