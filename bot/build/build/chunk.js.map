{"version":3,"sources":["../node_modules/lodash/chunk.js"],"names":["baseSlice","require","isIterateeCall","toInteger","nativeCeil","Math","nativeMax","guard","size","length","array","index","resIndex","result","Array","module"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAvB,cAAuB,CAAvB;AAAA,IACIC,cAAc,GAAGD,OAAO,CAD5B,mBAC4B,CAD5B;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAFvB,aAEuB,CAFvB;AAIA;;;AACA,IAAIG,UAAU,GAAGC,IAAI,CAArB,IAAA;AAAA,IACIC,SAAS,GAAGD,IAAI,CADpB,GAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAA,KAAA,CAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAmC;AACjC,MAAKE,KAAK,GAAGL,cAAc,CAAA,KAAA,EAAA,IAAA,EAAjB,KAAiB,CAAjB,GAAwCM,IAAI,KAAtD,SAAA,EAAuE;AACrEA,IAAAA,IAAI,GAAJA,CAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,IAAI,GAAGF,SAAS,CAACH,SAAS,CAAV,IAAU,CAAV,EAAhBK,CAAgB,CAAhBA;AACD;;AACD,MAAIC,MAAM,GAAGC,KAAK,IAALA,IAAAA,GAAAA,CAAAA,GAAoBA,KAAK,CAAtC,MAAA;;AACA,MAAI,CAAA,MAAA,IAAWF,IAAI,GAAnB,CAAA,EAAyB;AACvB,WAAA,EAAA;AACD;;AACD,MAAIG,KAAK,GAAT,CAAA;AAAA,MACIC,QAAQ,GADZ,CAAA;AAAA,MAEIC,MAAM,GAAGC,KAAK,CAACV,UAAU,CAACK,MAAM,GAFpC,IAE6B,CAAX,CAFlB;;AAIA,SAAOE,KAAK,GAAZ,MAAA,EAAuB;AACrBE,IAAAA,MAAM,CAACD,QAAPC,EAAM,CAANA,GAAqBb,SAAS,CAAA,KAAA,EAAA,KAAA,EAAgBW,KAAK,IAAnDE,IAA8B,CAA9BA;AACD;;AACD,SAAA,MAAA;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,KAAAA","sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"],"file":"chunk.js"}