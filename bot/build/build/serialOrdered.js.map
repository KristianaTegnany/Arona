{"version":3,"sources":["../node_modules/asynckit/serialOrdered.js"],"names":["iterate","require","initState","terminator","module","state","callback","a","ascending"],"mappings":";;AAAA,IAAIA,OAAO,GAAMC,OAAO,CAAxB,kBAAwB,CAAxB;AAAA,IACIC,SAAS,GAAID,OAAO,CADxB,gBACwB,CADxB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAFxB,qBAEwB,CAFxB,C,CAKA;;;AACAG,MAAM,CAANA,OAAAA,GAAAA,aAAAA,C,CACA;;AACAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,GAAAA,SAAAA;AACAA,MAAM,CAANA,OAAAA,CAAAA,UAAAA,GAAAA,UAAAA;AAEA;;;;;;;;;;AASA,SAAA,aAAA,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EACA;AACE,MAAIC,KAAK,GAAGH,SAAS,CAAA,IAAA,EAArB,UAAqB,CAArB;AAEAF,EAAAA,OAAO,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAAwB,SAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAC/B;AACE,QAAA,KAAA,EACA;AACEM,MAAAA,QAAQ,CAAA,KAAA,EAARA,MAAQ,CAARA;AACA;AACD;;AAEDD,IAAAA,KAAK,CAPP,KAOEA,GAPF,CASE;;AACA,QAAIA,KAAK,CAALA,KAAAA,GAAc,CAACA,KAAK,CAALA,WAAK,CAALA,IAAD,IAAA,EAAlB,MAAA,EACA;AACEL,MAAAA,OAAO,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAAPA,eAAO,CAAPA;AACA;AAbJ,KAAA,CAgBE;;;AACAM,IAAAA,QAAQ,CAAA,IAAA,EAAOD,KAAK,CAApBC,OAAQ,CAARA;AAlBFN,GAAO,CAAPA;AAqBA,SAAOG,UAAU,CAAVA,IAAAA,CAAAA,KAAAA,EAAP,QAAOA,CAAP;AACD;AAED;;;;AAIA;;;;;;;;;AAOA,SAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EACA;AACE,SAAOI,CAAC,GAADA,CAAAA,GAAQ,CAARA,CAAAA,GAAaA,CAAC,GAADA,CAAAA,GAAAA,CAAAA,GAApB,CAAA;AACD;AAED;;;;;;;;;AAOA,SAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EACA;AACE,SAAO,CAAA,CAAA,GAAKC,SAAS,CAAA,CAAA,EAArB,CAAqB,CAArB;AACD","sourcesContent":["var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n"],"file":"serialOrdered.js"}