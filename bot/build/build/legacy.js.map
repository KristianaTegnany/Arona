{"version":3,"sources":["../node_modules/ignore/legacy.js"],"names":["_createClass","i","props","descriptor","Object","defineProperties","Constructor","instance","Array","REGEX_BLANK_LINE","REGEX_LEADING_EXCAPED_EXCLAMATION","REGEX_LEADING_EXCAPED_HASH","SLASH","KEY_IGNORE","Symbol","define","value","REGEX_REGEXP_RANGE","sanitizeRange","to","DEFAULT_REPLACER_PREFIX","match","p2","DEFAULT_REPLACER_SUFFIX","str","prefix","p1","POSITIVE_REPLACERS","NEGATIVE_REPLACERS","cache","make_regex","r","replacers","negative","source","prev","current","ignorecase","checkPattern","pattern","createRule","origin","regex","IgnoreBase","_ref","arguments","_ref$ignorecase","_classCallCheck","key","make_array","rule","_this","_this2","path","slices","matched","process","filter","make_posix","module"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAG,YAAY;AAAE,WAAA,gBAAA,CAAA,MAAA,EAAA,KAAA,EAAyC;AAAE,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkCD,CAAlC,EAAA,EAAuC;AAAE,UAAIE,UAAU,GAAGD,KAAK,CAAtB,CAAsB,CAAtB;AAA2BC,MAAAA,UAAU,CAAVA,UAAAA,GAAwBA,UAAU,CAAVA,UAAAA,IAAxBA,KAAAA;AAAwDA,MAAAA,UAAU,CAAVA,YAAAA,GAAAA,IAAAA;AAAgC,UAAI,WAAJ,UAAA,EAA2BA,UAAU,CAAVA,QAAAA,GAAAA,IAAAA;AAA4BC,MAAAA,MAAM,CAANA,cAAAA,CAAAA,MAAAA,EAA8BD,UAAU,CAAxCC,GAAAA,EAAAA,UAAAA;AAA4D;AAAE;;AAAC,SAAO,UAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAgD;AAAE,QAAA,UAAA,EAAgBC,gBAAgB,CAACC,WAAW,CAAZ,SAAA,EAAhBD,UAAgB,CAAhBA;AAAqD,QAAA,WAAA,EAAiBA,gBAAgB,CAAA,WAAA,EAAhBA,WAAgB,CAAhBA;AAA4C,WAAA,WAAA;AAA3L,GAAA;AAA9V,CAAmB,EAAnB;;AAEA,SAAA,eAAA,CAAA,QAAA,EAAA,WAAA,EAAgD;AAAE,MAAI,EAAEE,QAAQ,YAAd,WAAI,CAAJ,EAAwC;AAAE,UAAM,IAAA,SAAA,CAAN,mCAAM,CAAN;AAA2D;EAEvJ;;;AACA,SAAA,UAAA,CAAA,OAAA,EAA6B;AAC3B,SAAOC,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAA1C,OAA0C,CAA1C;AACD;;AAED,IAAIC,gBAAgB,GAApB,OAAA;AACA,IAAIC,iCAAiC,GAArC,MAAA;AACA,IAAIC,0BAA0B,GAA9B,MAAA;AACA,IAAIC,KAAK,GAAT,GAAA;AACA,IAAIC,UAAU,GAAG,OAAA,MAAA,KAAA,WAAA,GAAgCC,MAAAA,OAAAA,CAAAA,aAAAA;AACjD;AADiB,EAAjB,aAAA;;AAIA,IAAIC,MAAM,GAAG,SAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAoC;AAC/C,SAAO,MAAM,CAAN,cAAA,CAAA,MAAA,EAAA,GAAA,EAAmC;AAAEC,IAAAA,KAAAA,EAAAA;AAAF,GAAnC,CAAP;AADF,CAAA;;AAIA,IAAIC,kBAAkB,GAAtB,kBAAA,C,CAEA;AACA;;AACA,IAAIC,aAAa,GAAG,SAAA,aAAA,CAAA,KAAA,EAA8B;AAChD,SAAO,KAAK,CAAL,OAAA,CAAA,kBAAA,EAAkC,UAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAA2B;AAClE,WAAO,IAAI,CAAJ,UAAA,CAAA,CAAA,KAAsBC,EAAE,CAAFA,UAAAA,CAAtB,CAAsBA,CAAtB,GAAA,KAAA,CACP;AACA;AAFO,MAAP,EAAA;AADF,GAAO,CAAP;AADF,CAAA,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,IAAIC,uBAAuB,GAAG,CAE9B;AACA,CACA;AACA;AACA;AAHA,SAAA,EAIW,UAAA,KAAA,EAAiB;AAC1B,SAAOC,KAAK,CAALA,OAAAA,CAAAA,IAAAA,MAAAA,CAAAA,GAAAA,GAAAA,GAAP,EAAA;AAR4B,CAG9B,CAH8B,EAW9B;AACA,CAAA,OAAA,EAAU,YAAY;AACpB,SAAA,GAAA;AAb4B,CAY9B,CAZ8B,EAgB9B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAA,gBAAA,EAAmB,UAAA,KAAA,EAAiB;AAClC,qBAAA,KAAA;AAlC4B,CAiC9B,CAjC8B,EAmC1B,CACJ;AACA;AAFI,oBAAA,EAGkB,UAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAyB;AAC7C,SAAOC,EAAE,KAAFA,GAAAA,cAAiBJ,aAAa,CAA9BI,EAA8B,CAA9BA,qBAAP,KAAOA,CAAP;AAvC4B,CAmC1B,CAnC0B,EAwC1B,CACJ;AADI,WAAA,EAES,YAAY;AACvB,SAAA,MAAA;AA3C4B,CAwC1B,CAxC0B,EA8C9B;AACA,CAEA;AACA;AACA;AAJA,KAAA,EAKO,YAAY;AACjB,SAAA,GAAA;AArD4B,CA+C9B,CA/C8B,EAwD9B;AACA,CAAA,KAAA,EAAQ,YAAY;AAClB,SAAA,KAAA;AA1D4B,CAyD9B,CAzD8B,EA2D1B,CACJ;AACA;AACA;AACA;AACA;AACA;AANI,kBAAA,EASJ;AACA,YAAY;AACV,SAAA,aAAA;AAtEF,CA2DI,CA3D0B,CAA9B;AAyEA,IAAIC,uBAAuB,GAAG,CAC9B;AACA,CACA;AACA;AACA;AAHA,WAAA,EAIa,SAAA,gBAAA,GAA4B;AACvC,SAAO,CAAC,UAAA,IAAA,CAAD,IAAC,CAAD,CACP;AACA;AACA;AACA;AAJO,IAAA,WAAA,CAOP;AACA;AARO,IAAP,GAAA;AAP4B,CAE9B,CAF8B,EAmB9B;AACA,CACA;AADA,yBAAA,EAIA;AACA;AAEA;AACA,UAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAA6B;AAC3B,SAAO,KAAK,GAAL,CAAA,GAAYC,GAAG,CAAf,MAAA,CAEP;AACA;AACA;AACA;AACA;AANO,IAAA,iBAAA,CASP;AACA;AAEA;AAZO,IAAP,OAAA;AA7B4B,CAoB9B,CApB8B,EA6C9B;AACA,CACA;AACA;AAEA;AACA;AALA,uBAAA,EAQA;AACA;AACA,UAAA,KAAA,EAAA,EAAA,EAAqB;AACnB,mBAAA,EAAA;AAzD4B,CA8C9B,CA9C8B,EA4D9B;AACA,CAAA,iBAAA,EAAoB,UAAA,KAAA,EAAA,EAAA,EAAqB;AACvC,MAAIC,MAAM,GAAGC,EAAE,CACf;AACA;AACA;AAEA;AACA;AANe,cAAA,EAAA,WASf;AACA;AAVe,IAAf,OAAA;AAaA,mBAAA,MAAA;AA3E4B,CA6D9B,CA7D8B,EA4E1B,CACJ;AADI,SAAA,EAEO,YAAY;AACrB,SAAA,IAAA;AA/EF,CA4EI,CA5E0B,CAA9B;AAkFA,IAAIC,kBAAkB,GAAG,GAAA,MAAA,CAAA,uBAAA,EAAmC,CAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,CACA;AACA;AAFA,YAAA,EAKA;AACA;AACA;AACA,UAAA,KAAA,EAAiB;AACf,mBAAA,KAAA;AAxBuB,CAezB,CAf4D,CAAnC,EAAzB,uBAAyB,CAAzB;AA2BA,IAAIC,kBAAkB,GAAG,GAAA,MAAA,CAAA,uBAAA,EAAmC,CAE5D;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,CAAA,WAAA,EAAc,UAAA,KAAA,EAAiB;AAC7B,mBAAA,KAAA;AAXuB,CAUzB,CAV4D,CAAnC,EAAzB,uBAAyB,CAAzB,C,CAcA;;AACA,IAAIC,KAAK,GAAGzB,MAAM,CAANA,MAAAA,CAAZ,IAAYA,CAAZ,C,CAEA;;AACA,IAAI0B,UAAU,GAAG,SAAA,UAAA,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAmD;AAClE,MAAIC,CAAC,GAAGF,KAAK,CAAb,OAAa,CAAb;;AACA,MAAA,CAAA,EAAO;AACL,WAAA,CAAA;AACD;;AAED,MAAIG,SAAS,GAAGC,QAAQ,GAAA,kBAAA,GAAxB,kBAAA;AAEA,MAAIC,MAAM,GAAG,SAAS,CAAT,MAAA,CAAiB,UAAA,IAAA,EAAA,OAAA,EAAyB;AACrD,WAAOC,IAAI,CAAJA,OAAAA,CAAaC,OAAO,CAApBD,CAAoB,CAApBA,EAAyBC,OAAO,CAAPA,CAAO,CAAPA,CAAAA,IAAAA,CAAhC,OAAgCA,CAAzBD,CAAP;AADW,GAAA,EAAb,OAAa,CAAb;AAIA,SAAON,KAAK,CAALA,OAAK,CAALA,GAAiBQ,UAAU,GAAG,IAAA,MAAA,CAAA,MAAA,EAAH,GAAG,CAAH,GAA6B,IAAA,MAAA,CAA/D,MAA+D,CAA/D;AAZF,CAAA,C,CAeA;;;AACA,IAAIC,YAAY,GAAG,SAAA,YAAA,CAAA,OAAA,EAA+B;AAChD,SAAO,OAAO,IAAI,OAAA,OAAA,KAAX,QAAA,IAA0C,CAAC7B,gBAAgB,CAAhBA,IAAAA,CAA3C,OAA2CA,CAA3C,CAEP;AAFO,KAGJ8B,OAAO,CAAPA,OAAAA,CAAAA,GAAAA,MAHH,CAAA;AADF,CAAA;;AAOA,IAAIC,UAAU,GAAG,SAAA,UAAA,CAAA,OAAA,EAAA,UAAA,EAAyC;AACxD,MAAIC,MAAM,GAAV,OAAA;AACA,MAAIR,QAAQ,GAF4C,KAExD,CAFwD,CAIxD;;AACA,MAAIM,OAAO,CAAPA,OAAAA,CAAAA,GAAAA,MAAJ,CAAA,EAAgC;AAC9BN,IAAAA,QAAQ,GAARA,IAAAA;AACAM,IAAAA,OAAO,GAAGA,OAAO,CAAPA,MAAAA,CAAVA,CAAUA,CAAVA;AACD;;AAEDA,EAAAA,OAAO,GAAG,OAAO,CACjB;AACA;AAFiB,GAAP,OAAA,CAAA,iCAAA,EAAA,GAAA,EAIV;AACA;AALU,GAAA,OAAA,CAAA,0BAAA,EAAVA,GAAU,CAAVA;AAQA,MAAIG,KAAK,GAAGZ,UAAU,CAAA,OAAA,EAAA,QAAA,EAAtB,UAAsB,CAAtB;AAEA,SAAO;AACLW,IAAAA,MADK,EACLA,MADK;AAELF,IAAAA,OAFK,EAELA,OAFK;AAGLN,IAAAA,QAHK,EAGLA,QAHK;AAILS,IAAAA,KAAAA,EAAAA;AAJK,GAAP;AApBF,CAAA;;AA4BA,IAAIC,UAAU,GAAG,YAAY;AAC3B,WAAA,UAAA,GAAsB;AACpB,QAAIC,IAAI,GAAGC,SAAS,CAATA,MAAAA,GAAAA,CAAAA,IAAwBA,SAAS,CAATA,CAAS,CAATA,KAAxBA,SAAAA,GAAqDA,SAAS,CAA9DA,CAA8D,CAA9DA,GAAX,EAAA;AAAA,QACIC,eAAe,GAAGF,IAAI,CAD1B,UAAA;AAAA,QAEIP,UAAU,GAAGS,eAAe,KAAfA,SAAAA,GAAAA,IAAAA,GAFjB,eAAA;;AAIAC,IAAAA,eAAe,CAAA,IAAA,EAAfA,UAAe,CAAfA;;AAEA,SAAA,MAAA,GAAA,EAAA;AACA,SAAA,WAAA,GAAA,UAAA;AACAhC,IAAAA,MAAM,CAAA,IAAA,EAAA,UAAA,EAANA,IAAM,CAANA;;AACA,SAAA,UAAA;AACD;;AAEDf,EAAAA,YAAY,CAAA,UAAA,EAAa,CAAC;AACxBgD,IAAAA,GAAG,EADqB,YAAA;AAExBhC,IAAAA,KAAK,EAAE,SAAA,UAAA,GAAsB;AAC3B,WAAA,MAAA,GAAcZ,MAAM,CAANA,MAAAA,CAAd,IAAcA,CAAd;AAHsB,KAAA,CAMxB;;AANwB,GAAD,EAQtB;AACD4C,IAAAA,GAAG,EADF,KAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,GAAA,CAAA,OAAA,EAAsB;AAC3B,WAAA,MAAA,GAAA,KAAA;;AAEA,UAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;AAC/BuB,QAAAA,OAAO,GAAGA,OAAO,CAAPA,KAAAA,CAAVA,QAAUA,CAAVA;AACD;;AAEDU,MAAAA,UAAU,CAAVA,OAAU,CAAVA,CAAAA,OAAAA,CAA4B,KAA5BA,WAAAA,EAP2B,IAO3BA,EAP2B,CAS3B;AACA;;AACA,UAAI,KAAJ,MAAA,EAAiB;AACf,aAAA,UAAA;AACD;;AAED,aAAA,IAAA;AAjBD,KAAA,CAoBD;;AApBC,GARsB,EA8BtB;AACDD,IAAAA,GAAG,EADF,YAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,UAAA,CAAA,OAAA,EAA6B;AAClC,aAAO,KAAA,GAAA,CAAP,OAAO,CAAP;AACD;AAJA,GA9BsB,EAmCtB;AACDgC,IAAAA,GAAG,EADF,aAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,WAAA,CAAA,OAAA,EAA8B;AACnC;AACA,UAAIuB,OAAO,IAAIA,OAAO,CAAtB,UAAsB,CAAtB,EAAoC;AAClC,aAAA,MAAA,GAAc,KAAA,MAAA,CAAA,MAAA,CAAmBA,OAAO,CAAxC,MAAc,CAAd;AACA,aAAA,MAAA,GAAA,IAAA;AACA;AACD;;AAED,UAAID,YAAY,CAAhB,OAAgB,CAAhB,EAA2B;AACzB,YAAIY,IAAI,GAAGV,UAAU,CAAA,OAAA,EAAU,KAA/B,WAAqB,CAArB;AACA,aAAA,MAAA,GAAA,IAAA;;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,IAAA;AACD;AACF;AAfA,GAnCsB,EAmDtB;AACDQ,IAAAA,GAAG,EADF,QAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,MAAA,CAAA,KAAA,EAAuB;AAC5B,UAAImC,KAAK,GAAT,IAAA;;AAEA,aAAO,UAAU,CAAV,KAAU,CAAV,CAAA,MAAA,CAAyB,UAAA,IAAA,EAAgB;AAC9C,eAAOA,KAAK,CAALA,OAAAA,CAAP,IAAOA,CAAP;AADF,OAAO,CAAP;AAGD;AARA,GAnDsB,EA4DtB;AACDH,IAAAA,GAAG,EADF,cAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,YAAA,GAAwB;AAC7B,UAAIoC,MAAM,GAAV,IAAA;;AAEA,aAAO,UAAA,IAAA,EAAgB;AACrB,eAAOA,MAAM,CAANA,OAAAA,CAAP,IAAOA,CAAP;AADF,OAAA;AAGD;AARA,GA5DsB,EAqEtB;AACDJ,IAAAA,GAAG,EADF,SAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,OAAA,CAAA,IAAA,EAAuB;AAC5B,aAAO,CAAC,KAAA,OAAA,CAAR,IAAQ,CAAR;AAHD,KAAA,CAMD;;AANC,GArEsB,EA6EtB;AACDgC,IAAAA,GAAG,EADF,SAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAA+B;AACpC,UAAI,CAAJ,IAAA,EAAW;AACT,eAAA,KAAA;AACD;;AAED,UAAIqC,IAAI,IAAI,KAAZ,MAAA,EAAyB;AACvB,eAAO,KAAA,MAAA,CAAP,IAAO,CAAP;AACD;;AAED,UAAI,CAAJ,MAAA,EAAa;AACX;AACA;AACAC,QAAAA,MAAM,GAAGD,IAAI,CAAJA,KAAAA,CAATC,KAASD,CAATC;AACD;;AAEDA,MAAAA,MAAM,CAANA,GAAAA;AAEA,aAAO,KAAA,MAAA,CAAA,IAAA,IAAoB,MAAM,CAAN,MAAA,CAC3B;AACA;AACA;AAH2B,QAIzB,KAAA,OAAA,CAAaA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,IAAb,KAAA,EAAA,MAAA,KAAoD,KAAA,KAAA,CAJ3B,IAI2B,CAJ3B,CAM3B;AAN2B,QAOzB,KAAA,KAAA,CAPF,IAOE,CAPF;AAnBD,KAAA,CA6BD;;AA7BC,GA7EsB,EA4GtB;AACDN,IAAAA,GAAG,EADF,OAAA;AAEDhC,IAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,IAAA,EAAqB;AAC1B;AACA,UAAIuC,OAAO,GAAX,CAAA;;AAEA,WAAA,MAAA,CAAA,OAAA,CAAoB,UAAA,IAAA,EAAgB;AAClC;AACA;AACA,YAAI,EAAEA,OAAO,GAAGL,IAAI,CAApB,QAAI,CAAJ,EAAgC;AAC9BK,UAAAA,OAAO,GAAGL,IAAI,CAAJA,QAAAA,GAAgBA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,CAA1BK,IAA0BL,CAA1BK;AACD;AALH,OAAA;;AAQA,aAAO,CAAP,OAAA;AACD;AAfA,GA5GsB,CAAb,CAAZvD;;AA8HA,SAAA,UAAA;AA5IF,CAAiB,EAAjB,C,CA+IA;AACA;;AACA;;;AAGA,KACA;AACA,OAAA,OAAA,KAAA,WAAA,KAAmCwD,OAAO,CAAPA,GAAAA,IAAeA,OAAO,CAAPA,GAAAA,CAAfA,iBAAAA,IAAgDA,OAAO,CAAPA,QAAAA,KAFnF,OAEA,CAFA,EAEkH;AAChH,MAAIC,MAAM,GAAGd,UAAU,CAAVA,SAAAA,CAAb,OAAA;AAEA;;AACA,MAAIe,UAAU,GAAG,SAAA,UAAA,CAAA,GAAA,EAAyB;AACxC,WAAQ,YAAA,IAAA,CAAA,GAAA,KAAyB,gBAAA,IAAA,CAAzB,GAAyB,CAAzB,GAAA,GAAA,GAA2DlC,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,EAAnE,GAAmEA,CAAnE;AADF,GAAA;;AAKAmB,EAAAA,UAAU,CAAVA,SAAAA,CAAAA,OAAAA,GAA+B,SAAA,WAAA,CAAA,IAAA,EAAA,MAAA,EAAmC;AAChEU,IAAAA,IAAI,GAAGK,UAAU,CAAjBL,IAAiB,CAAjBA;AACA,WAAOI,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAP,MAAOA,CAAP;AAFFd,GAAAA;AAID;;AAEDgB,MAAM,CAANA,OAAAA,GAAiB,UAAA,OAAA,EAAmB;AAClC,SAAO,IAAA,UAAA,CAAP,OAAO,CAAP;AADFA,CAAAA","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// A simple implementation of make-array\nfunction make_array(subject) {\n  return Array.isArray(subject) ? subject : [subject];\n}\n\nvar REGEX_BLANK_LINE = /^\\s+$/;\nvar REGEX_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/;\nvar REGEX_LEADING_EXCAPED_HASH = /^\\\\#/;\nvar SLASH = '/';\nvar KEY_IGNORE = typeof Symbol !== 'undefined' ? Symbol.for('node-ignore')\n/* istanbul ignore next */\n: 'node-ignore';\n\nvar define = function define(object, key, value) {\n  return Object.defineProperty(object, key, { value });\n};\n\nvar REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nvar sanitizeRange = function sanitizeRange(range) {\n  return range.replace(REGEX_REGEXP_RANGE, function (match, from, to) {\n    return from.charCodeAt(0) <= to.charCodeAt(0) ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : '';\n  });\n};\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nvar DEFAULT_REPLACER_PREFIX = [\n\n// > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n[\n// (a\\ ) -> (a )\n// (a  ) -> (a)\n// (a \\ ) -> (a  )\n/\\\\?\\s+$/, function (match) {\n  return match.indexOf('\\\\') === 0 ? ' ' : '';\n}],\n\n// replace (\\ ) with ' '\n[/\\\\\\s/g, function () {\n  return ' ';\n}],\n\n// Escape metacharacters\n// which is written down by users but means special for regular expressions.\n\n// > There are 12 characters with special meanings:\n// > - the backslash \\,\n// > - the caret ^,\n// > - the dollar sign $,\n// > - the period or dot .,\n// > - the vertical bar or pipe symbol |,\n// > - the question mark ?,\n// > - the asterisk or star *,\n// > - the plus sign +,\n// > - the opening parenthesis (,\n// > - the closing parenthesis ),\n// > - and the opening square bracket [,\n// > - the opening curly brace {,\n// > These special characters are often called \"metacharacters\".\n[/[\\\\^$.|*+(){]/g, function (match) {\n  return `\\\\${match}`;\n}], [\n// > [abc] matches any character inside the brackets\n// >    (in this case a, b, or c);\n/\\[([^\\]/]*)($|\\])/g, function (match, p1, p2) {\n  return p2 === ']' ? `[${sanitizeRange(p1)}]` : `\\\\${match}`;\n}], [\n// > a question mark (?) matches a single character\n/(?!\\\\)\\?/g, function () {\n  return '[^/]';\n}],\n\n// leading slash\n[\n\n// > A leading slash matches the beginning of the pathname.\n// > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n// A leading slash matches the beginning of the pathname\n/^\\//, function () {\n  return '^';\n}],\n\n// replace special metacharacter slash after the leading slash\n[/\\//g, function () {\n  return '\\\\/';\n}], [\n// > A leading \"**\" followed by a slash means match in all directories.\n// > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n// > the same as pattern \"foo\".\n// > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n// >   under directory \"foo\".\n// Notice that the '*'s have been replaced as '\\\\*'\n/^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n// '**/foo' <-> 'foo'\nfunction () {\n  return '^(?:.*\\\\/)?';\n}]];\n\nvar DEFAULT_REPLACER_SUFFIX = [\n// starting\n[\n// there will be no leading '/'\n//   (which has been replaced by section \"leading slash\")\n// If starts with '**', adding a '^' to the regular expression also works\n/^(?=[^^])/, function startingReplacer() {\n  return !/\\/(?!$)/.test(this)\n  // > If the pattern does not contain a slash /,\n  // >   Git treats it as a shell glob pattern\n  // Actually, if there is only a trailing slash,\n  //   git also treats it as a shell glob pattern\n  ? '(?:^|\\\\/)'\n\n  // > Otherwise, Git treats the pattern as a shell glob suitable for\n  // >   consumption by fnmatch(3)\n  : '^';\n}],\n\n// two globstars\n[\n// Use lookahead assertions so that we could match more than one `'/**'`\n/\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n// Zero, one or several directories\n// should not use '*', or it will be replaced by the next replacer\n\n// Check if it is not the last `'/**'`\nfunction (match, index, str) {\n  return index + 6 < str.length\n\n  // case: /**/\n  // > A slash followed by two consecutive asterisks then a slash matches\n  // >   zero or more directories.\n  // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n  // '/**/'\n  ? '(?:\\\\/[^\\\\/]+)*'\n\n  // case: /**\n  // > A trailing `\"/**\"` matches everything inside.\n\n  // #21: everything inside but it should not include the current folder\n  : '\\\\/.+';\n}],\n\n// intermediate wildcards\n[\n// Never replace escaped '*'\n// ignore rule '\\*' will match the path '*'\n\n// 'abc.*/' -> go\n// 'abc.*'  -> skip this rule\n/(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n// '*.js' matches '.js'\n// '*.js' doesn't match 'abc'\nfunction (match, p1) {\n  return `${p1}[^\\\\/]*`;\n}],\n\n// trailing wildcard\n[/(\\^|\\\\\\/)?\\\\\\*$/, function (match, p1) {\n  var prefix = p1\n  // '\\^':\n  // '/*' does not match ''\n  // '/*' does not match everything\n\n  // '\\\\\\/':\n  // 'abc/*' does not match 'abc/'\n  ? `${p1}[^/]+`\n\n  // 'a*' matches 'a'\n  // 'a*' matches 'aa'\n  : '[^/]*';\n\n  return `${prefix}(?=$|\\\\/$)`;\n}], [\n// unescape\n/\\\\\\\\\\\\/g, function () {\n  return '\\\\';\n}]];\n\nvar POSITIVE_REPLACERS = [].concat(DEFAULT_REPLACER_PREFIX, [\n\n// 'f'\n// matches\n// - /f(end)\n// - /f/\n// - (start)f(end)\n// - (start)f/\n// doesn't match\n// - oof\n// - foo\n// pseudo:\n// -> (^|/)f(/|$)\n\n// ending\n[\n// 'js' will not match 'js.'\n// 'ab' will not match 'abc'\n/(?:[^*/])$/,\n\n// 'js*' will not match 'a.js'\n// 'js/' will not match 'a.js'\n// 'js' will match 'a.js' and 'a.js/'\nfunction (match) {\n  return `${match}(?=$|\\\\/)`;\n}]], DEFAULT_REPLACER_SUFFIX);\n\nvar NEGATIVE_REPLACERS = [].concat(DEFAULT_REPLACER_PREFIX, [\n\n// #24, #38\n// The MISSING rule of [gitignore docs](https://git-scm.com/docs/gitignore)\n// A negative pattern without a trailing wildcard should not\n// re-include the things inside that directory.\n\n// eg:\n// ['node_modules/*', '!node_modules']\n// should ignore `node_modules/a.js`\n[/(?:[^*])$/, function (match) {\n  return `${match}(?=$|\\\\/$)`;\n}]], DEFAULT_REPLACER_SUFFIX);\n\n// A simple cache, because an ignore rule only has only one certain meaning\nvar cache = Object.create(null);\n\n// @param {pattern}\nvar make_regex = function make_regex(pattern, negative, ignorecase) {\n  var r = cache[pattern];\n  if (r) {\n    return r;\n  }\n\n  var replacers = negative ? NEGATIVE_REPLACERS : POSITIVE_REPLACERS;\n\n  var source = replacers.reduce(function (prev, current) {\n    return prev.replace(current[0], current[1].bind(pattern));\n  }, pattern);\n\n  return cache[pattern] = ignorecase ? new RegExp(source, 'i') : new RegExp(source);\n};\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nvar checkPattern = function checkPattern(pattern) {\n  return pattern && typeof pattern === 'string' && !REGEX_BLANK_LINE.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0;\n};\n\nvar createRule = function createRule(pattern, ignorecase) {\n  var origin = pattern;\n  var negative = false;\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true;\n    pattern = pattern.substr(1);\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_LEADING_EXCAPED_HASH, '#');\n\n  var regex = make_regex(pattern, negative, ignorecase);\n\n  return {\n    origin,\n    pattern,\n    negative,\n    regex\n  };\n};\n\nvar IgnoreBase = function () {\n  function IgnoreBase() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$ignorecase = _ref.ignorecase,\n        ignorecase = _ref$ignorecase === undefined ? true : _ref$ignorecase;\n\n    _classCallCheck(this, IgnoreBase);\n\n    this._rules = [];\n    this._ignorecase = ignorecase;\n    define(this, KEY_IGNORE, true);\n    this._initCache();\n  }\n\n  _createClass(IgnoreBase, [{\n    key: '_initCache',\n    value: function _initCache() {\n      this._cache = Object.create(null);\n    }\n\n    // @param {Array.<string>|string|Ignore} pattern\n\n  }, {\n    key: 'add',\n    value: function add(pattern) {\n      this._added = false;\n\n      if (typeof pattern === 'string') {\n        pattern = pattern.split(/\\r?\\n/g);\n      }\n\n      make_array(pattern).forEach(this._addPattern, this);\n\n      // Some rules have just added to the ignore,\n      // making the behavior changed.\n      if (this._added) {\n        this._initCache();\n      }\n\n      return this;\n    }\n\n    // legacy\n\n  }, {\n    key: 'addPattern',\n    value: function addPattern(pattern) {\n      return this.add(pattern);\n    }\n  }, {\n    key: '_addPattern',\n    value: function _addPattern(pattern) {\n      // #32\n      if (pattern && pattern[KEY_IGNORE]) {\n        this._rules = this._rules.concat(pattern._rules);\n        this._added = true;\n        return;\n      }\n\n      if (checkPattern(pattern)) {\n        var rule = createRule(pattern, this._ignorecase);\n        this._added = true;\n        this._rules.push(rule);\n      }\n    }\n  }, {\n    key: 'filter',\n    value: function filter(paths) {\n      var _this = this;\n\n      return make_array(paths).filter(function (path) {\n        return _this._filter(path);\n      });\n    }\n  }, {\n    key: 'createFilter',\n    value: function createFilter() {\n      var _this2 = this;\n\n      return function (path) {\n        return _this2._filter(path);\n      };\n    }\n  }, {\n    key: 'ignores',\n    value: function ignores(path) {\n      return !this._filter(path);\n    }\n\n    // @returns `Boolean` true if the `path` is NOT ignored\n\n  }, {\n    key: '_filter',\n    value: function _filter(path, slices) {\n      if (!path) {\n        return false;\n      }\n\n      if (path in this._cache) {\n        return this._cache[path];\n      }\n\n      if (!slices) {\n        // path/to/a.js\n        // ['path', 'to', 'a.js']\n        slices = path.split(SLASH);\n      }\n\n      slices.pop();\n\n      return this._cache[path] = slices.length\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      // If the path contains a parent directory, check the parent first\n      ? this._filter(slices.join(SLASH) + SLASH, slices) && this._test(path)\n\n      // Or only test the path\n      : this._test(path);\n    }\n\n    // @returns {Boolean} true if a file is NOT ignored\n\n  }, {\n    key: '_test',\n    value: function _test(path) {\n      // Explicitly define variable type by setting matched to `0`\n      var matched = 0;\n\n      this._rules.forEach(function (rule) {\n        // if matched = true, then we only test negative rules\n        // if matched = false, then we test non-negative rules\n        if (!(matched ^ rule.negative)) {\n          matched = rule.negative ^ rule.regex.test(path);\n        }\n      });\n\n      return !matched;\n    }\n  }]);\n\n  return IgnoreBase;\n}();\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\n\n\nif (\n// Detect `process` so that it can run in browsers.\ntypeof process !== 'undefined' && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === 'win32')) {\n  var filter = IgnoreBase.prototype._filter;\n\n  /* eslint no-control-regex: \"off\" */\n  var make_posix = function make_posix(str) {\n    return (/^\\\\\\\\\\?\\\\/.test(str) || /[^\\x00-\\x80]+/.test(str) ? str : str.replace(/\\\\/g, '/')\n    );\n  };\n\n  IgnoreBase.prototype._filter = function filterWin32(path, slices) {\n    path = make_posix(path);\n    return filter.call(this, path, slices);\n  };\n}\n\nmodule.exports = function (options) {\n  return new IgnoreBase(options);\n};\n"],"file":"legacy.js"}