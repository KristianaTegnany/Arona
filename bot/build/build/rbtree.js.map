{"version":3,"sources":["../node_modules/functional-red-black-tree/rbtree.js"],"names":["module","RED","BLACK","node","proto","RedBlackTree","Object","get","result","cmp","n","n_stack","d_stack","d","s","p","pp","y","repaint","recount","ppp","v","doVisitFull","visit","l","compare","doVisitHalf","h","doVisit","arguments","stack","idx","last_ptr","iter","iproto","RedBlackTreeIterator","enumerable","i","cloneNode","z","cstack","split","swapNode","parent","fixDoubleBlack","r","a"],"mappings":"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","sourcesContent":["\"use strict\"\n\nmodule.exports = createRBTree\n\nvar RED   = 0\nvar BLACK = 1\n\nfunction RBNode(color, key, value, left, right, count) {\n  this._color = color\n  this.key = key\n  this.value = value\n  this.left = left\n  this.right = right\n  this._count = count\n}\n\nfunction cloneNode(node) {\n  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction repaint(color, node) {\n  return new RBNode(color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction recount(node) {\n  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)\n}\n\nfunction RedBlackTree(compare, root) {\n  this._compare = compare\n  this.root = root\n}\n\nvar proto = RedBlackTree.prototype\n\nObject.defineProperty(proto, \"keys\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(k)\n    })\n    return result\n  }\n})\n\nObject.defineProperty(proto, \"values\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(v)\n    })\n    return result\n  }\n})\n\n//Returns the number of nodes in the tree\nObject.defineProperty(proto, \"length\", {\n  get: function() {\n    if(this.root) {\n      return this.root._count\n    }\n    return 0\n  }\n})\n\n//Insert a new item into the tree\nproto.insert = function(key, value) {\n  var cmp = this._compare\n  //Find point to insert new node at\n  var n = this.root\n  var n_stack = []\n  var d_stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  //Rebuild path to leaf node\n  n_stack.push(new RBNode(RED, key, value, null, null, 1))\n  for(var s=n_stack.length-2; s>=0; --s) {\n    var n = n_stack[s]\n    if(d_stack[s] <= 0) {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s+1], n.right, n._count+1)\n    } else {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s+1], n._count+1)\n    }\n  }\n  //Rebalance tree using rotations\n  //console.log(\"start insert\", key, d_stack)\n  for(var s=n_stack.length-1; s>1; --s) {\n    var p = n_stack[s-1]\n    var n = n_stack[s]\n    if(p._color === BLACK || n._color === BLACK) {\n      break\n    }\n    var pp = n_stack[s-2]\n    if(pp.left === p) {\n      if(p.left === n) {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LLr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LLb\")\n          pp._color = RED\n          pp.left = p.right\n          p._color = BLACK\n          p.right = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LRr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LRb\")\n          p.right = n.left\n          pp._color = RED\n          pp.left = n.right\n          n._color = BLACK\n          n.left = p\n          n.right = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = n\n            } else {\n              ppp.right = n\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if(p.right === n) {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RRr\", y.key)\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RRb\")\n          pp._color = RED\n          pp.right = p.left\n          p._color = BLACK\n          p.left = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RLr\")\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RLb\")\n          p.left = n.right\n          pp._color = RED\n          pp.right = n.left\n          n._color = BLACK\n          n.right = p\n          n.left = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = n\n            } else {\n              ppp.left = n\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  //Return new tree\n  n_stack[0]._color = BLACK\n  return new RedBlackTree(cmp, n_stack[0])\n}\n\n\n//Visit all nodes inorder\nfunction doVisitFull(visit, node) {\n  if(node.left) {\n    var v = doVisitFull(visit, node.left)\n    if(v) { return v }\n  }\n  var v = visit(node.key, node.value)\n  if(v) { return v }\n  if(node.right) {\n    return doVisitFull(visit, node.right)\n  }\n}\n\n//Visit half nodes in order\nfunction doVisitHalf(lo, compare, visit, node) {\n  var l = compare(lo, node.key)\n  if(l <= 0) {\n    if(node.left) {\n      var v = doVisitHalf(lo, compare, visit, node.left)\n      if(v) { return v }\n    }\n    var v = visit(node.key, node.value)\n    if(v) { return v }\n  }\n  if(node.right) {\n    return doVisitHalf(lo, compare, visit, node.right)\n  }\n}\n\n//Visit all nodes within a range\nfunction doVisit(lo, hi, compare, visit, node) {\n  var l = compare(lo, node.key)\n  var h = compare(hi, node.key)\n  var v\n  if(l <= 0) {\n    if(node.left) {\n      v = doVisit(lo, hi, compare, visit, node.left)\n      if(v) { return v }\n    }\n    if(h > 0) {\n      v = visit(node.key, node.value)\n      if(v) { return v }\n    }\n  }\n  if(h > 0 && node.right) {\n    return doVisit(lo, hi, compare, visit, node.right)\n  }\n}\n\n\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\n  if(!this.root) {\n    return\n  }\n  switch(arguments.length) {\n    case 1:\n      return doVisitFull(visit, this.root)\n    break\n\n    case 2:\n      return doVisitHalf(lo, this._compare, visit, this.root)\n    break\n\n    case 3:\n      if(this._compare(lo, hi) >= 0) {\n        return\n      }\n      return doVisit(lo, hi, this._compare, visit, this.root)\n    break\n  }\n}\n\n//First item in list\nObject.defineProperty(proto, \"begin\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Last item in list\nObject.defineProperty(proto, \"end\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Find the ith item in the tree\nproto.at = function(idx) {\n  if(idx < 0) {\n    return new RedBlackTreeIterator(this, [])\n  }\n  var n = this.root\n  var stack = []\n  while(true) {\n    stack.push(n)\n    if(n.left) {\n      if(idx < n.left._count) {\n        n = n.left\n        continue\n      }\n      idx -= n.left._count\n    }\n    if(!idx) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    idx -= 1\n    if(n.right) {\n      if(idx >= n.right._count) {\n        break\n      }\n      n = n.right\n    } else {\n      break\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\nproto.ge = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d <= 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.gt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d < 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.lt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d > 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.le = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d >= 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\n//Finds the item with key if it exists\nproto.find = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d === 0) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\n//Removes item with key from tree\nproto.remove = function(key) {\n  var iter = this.find(key)\n  if(iter) {\n    return iter.remove()\n  }\n  return this\n}\n\n//Returns the item at `key`\nproto.get = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  while(n) {\n    var d = cmp(key, n.key)\n    if(d === 0) {\n      return n.value\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return\n}\n\n//Iterator for red black tree\nfunction RedBlackTreeIterator(tree, stack) {\n  this.tree = tree\n  this._stack = stack\n}\n\nvar iproto = RedBlackTreeIterator.prototype\n\n//Test if iterator is valid\nObject.defineProperty(iproto, \"valid\", {\n  get: function() {\n    return this._stack.length > 0\n  }\n})\n\n//Node of the iterator\nObject.defineProperty(iproto, \"node\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1]\n    }\n    return null\n  },\n  enumerable: true\n})\n\n//Makes a copy of an iterator\niproto.clone = function() {\n  return new RedBlackTreeIterator(this.tree, this._stack.slice())\n}\n\n//Swaps two nodes\nfunction swapNode(n, v) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n._color = v._color\n  n._count = v._count\n}\n\n//Fix up a double black node in a tree\nfunction fixDoubleBlack(stack) {\n  var n, p, s, z\n  for(var i=stack.length-1; i>=0; --i) {\n    n = stack[i]\n    if(i === 0) {\n      n._color = BLACK\n      return\n    }\n    //console.log(\"visit node:\", n.key, i, stack[i].key, stack[i-1].key)\n    p = stack[i-1]\n    if(p.left === n) {\n      //console.log(\"left child\")\n      s = p.right\n      if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\", p.right.value)\n          p._color = BLACK\n          p.right = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\", p.right.value)\n          p.right = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.right = s.left\n        s.left = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    } else {\n      //console.log(\"right child\")\n      s = p.left\n      if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\", p.value, p._color)\n        s = p.left = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.left = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\")\n          p._color = BLACK\n          p.left = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\")\n          p.left = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.left = s.right\n        s.right = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    }\n  }\n}\n\n//Removes item at iterator from tree\niproto.remove = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return this.tree\n  }\n  //First copy path to node\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    var n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n\n  //Get node\n  n = cstack[cstack.length-1]\n  //console.log(\"start remove: \", n.value)\n\n  //If not leaf, then swap with previous node\n  if(n.left && n.right) {\n    //console.log(\"moving to leaf\")\n\n    //First walk to previous leaf\n    var split = cstack.length\n    n = n.left\n    while(n.right) {\n      cstack.push(n)\n      n = n.right\n    }\n    //Copy path to leaf\n    var v = cstack[split-1]\n    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))\n    cstack[split-1].key = n.key\n    cstack[split-1].value = n.value\n\n    //Fix up stack\n    for(var i=cstack.length-2; i>=split; --i) {\n      n = cstack[i]\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n    cstack[split-1].left = cstack[split]\n  }\n  //console.log(\"stack=\", cstack.map(function(v) { return v.value }))\n\n  //Remove leaf node\n  n = cstack[cstack.length-1]\n  if(n._color === RED) {\n    //Easy case: removing red leaf\n    //console.log(\"RED leaf\")\n    var p = cstack[cstack.length-2]\n    if(p.left === n) {\n      p.left = null\n    } else if(p.right === n) {\n      p.right = null\n    }\n    cstack.pop()\n    for(var i=0; i<cstack.length; ++i) {\n      cstack[i]._count--\n    }\n    return new RedBlackTree(this.tree._compare, cstack[0])\n  } else {\n    if(n.left || n.right) {\n      //Second easy case:  Single child black parent\n      //console.log(\"BLACK single child\")\n      if(n.left) {\n        swapNode(n, n.left)\n      } else if(n.right) {\n        swapNode(n, n.right)\n      }\n      //Child must be red, so repaint it black to balance color\n      n._color = BLACK\n      for(var i=0; i<cstack.length-1; ++i) {\n        cstack[i]._count--\n      }\n      return new RedBlackTree(this.tree._compare, cstack[0])\n    } else if(cstack.length === 1) {\n      //Third easy case: root\n      //console.log(\"ROOT\")\n      return new RedBlackTree(this.tree._compare, null)\n    } else {\n      //Hard case: Repaint n, and then do some nasty stuff\n      //console.log(\"BLACK leaf no children\")\n      for(var i=0; i<cstack.length; ++i) {\n        cstack[i]._count--\n      }\n      var parent = cstack[cstack.length-2]\n      fixDoubleBlack(cstack)\n      //Fix up links\n      if(parent.left === n) {\n        parent.left = null\n      } else {\n        parent.right = null\n      }\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Returns key\nObject.defineProperty(iproto, \"key\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].key\n    }\n    return\n  },\n  enumerable: true\n})\n\n//Returns value\nObject.defineProperty(iproto, \"value\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].value\n    }\n    return\n  },\n  enumerable: true\n})\n\n\n//Returns the position of this iterator in the sorted list\nObject.defineProperty(iproto, \"index\", {\n  get: function() {\n    var idx = 0\n    var stack = this._stack\n    if(stack.length === 0) {\n      var r = this.tree.root\n      if(r) {\n        return r._count\n      }\n      return 0\n    } else if(stack[stack.length-1].left) {\n      idx = stack[stack.length-1].left._count\n    }\n    for(var s=stack.length-2; s>=0; --s) {\n      if(stack[s+1] === stack[s].right) {\n        ++idx\n        if(stack[s].left) {\n          idx += stack[s].left._count\n        }\n      }\n    }\n    return idx\n  },\n  enumerable: true\n})\n\n//Advances iterator to next element in list\niproto.next = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.right) {\n    n = n.right\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].right === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at end of tree\nObject.defineProperty(iproto, \"hasNext\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].right) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Update value\niproto.update = function(value) {\n  var stack = this._stack\n  if(stack.length === 0) {\n    throw new Error(\"Can't update empty node!\")\n  }\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Moves iterator backward one element\niproto.prev = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.left) {\n    n = n.left\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].left === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at start of tree\nObject.defineProperty(iproto, \"hasPrev\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].left) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Default comparison function\nfunction defaultCompare(a, b) {\n  if(a < b) {\n    return -1\n  }\n  if(a > b) {\n    return 1\n  }\n  return 0\n}\n\n//Build a tree\nfunction createRBTree(compare) {\n  return new RedBlackTree(compare || defaultCompare, null)\n}"],"file":"rbtree.js"}