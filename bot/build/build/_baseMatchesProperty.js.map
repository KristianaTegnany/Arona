{"version":3,"sources":["../node_modules/lodash/_baseMatchesProperty.js"],"names":["baseIsEqual","require","get","hasIn","isKey","isStrictComparable","matchesStrictComparable","toKey","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","objValue","module"],"mappings":";;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAzB,gBAAyB,CAAzB;AAAA,IACIC,GAAG,GAAGD,OAAO,CADjB,OACiB,CADjB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAFnB,SAEmB,CAFnB;AAAA,IAGIG,KAAK,GAAGH,OAAO,CAHnB,UAGmB,CAHnB;AAAA,IAIII,kBAAkB,GAAGJ,OAAO,CAJhC,uBAIgC,CAJhC;AAAA,IAKIK,uBAAuB,GAAGL,OAAO,CALrC,4BAKqC,CALrC;AAAA,IAMIM,KAAK,GAAGN,OAAO,CANnB,UAMmB,CANnB;AAQA;;;AACA,IAAIO,oBAAoB,GAAxB,CAAA;AAAA,IACIC,sBAAsB,GAD1B,CAAA;AAGA;;;;;;;;;AAQA,SAAA,mBAAA,CAAA,IAAA,EAAA,QAAA,EAA6C;AAC3C,MAAIL,KAAK,CAALA,IAAK,CAALA,IAAeC,kBAAkB,CAArC,QAAqC,CAArC,EAAiD;AAC/C,WAAOC,uBAAuB,CAACC,KAAK,CAAN,IAAM,CAAN,EAA9B,QAA8B,CAA9B;AACD;;AACD,SAAO,UAAA,MAAA,EAAiB;AACtB,QAAIG,QAAQ,GAAGR,GAAG,CAAA,MAAA,EAAlB,IAAkB,CAAlB;AACA,WAAQQ,QAAQ,KAARA,SAAAA,IAA0BA,QAAQ,KAAnC,QAACA,GACJP,KAAK,CAAA,MAAA,EADF,IACE,CADDO,GAEJV,WAAW,CAAA,QAAA,EAAA,QAAA,EAAqBQ,oBAAoB,GAFxD,sBAEe,CAFf;AAFF,GAAA;AAMD;;AAEDG,MAAM,CAANA,OAAAA,GAAAA,mBAAAA","sourcesContent":["var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"],"file":"_baseMatchesProperty.js"}