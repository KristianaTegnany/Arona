{"version":3,"sources":["../node_modules/rimraf/rimraf.js"],"names":["module","rimraf","assert","require","path","fs","glob","_0666","parseInt","defaultGlobOpts","nosort","silent","timeout","isWindows","process","methods","options","m","Error","cb","defaults","busyTries","errState","n","afterGlob","results","rimraf_","er","time","setTimeout","next","fixWinEPERM","st","rmdir","er2","er3","stats","rmdirSync","originalEr","rmkids","files","i","p","fixWinEPERMSync","rmkidsSync","rimrafSync","retries","threw","ret"],"mappings":"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","sourcesContent":["module.exports = rimraf\nrimraf.sync = rimrafSync\n\nvar assert = require(\"assert\")\nvar path = require(\"path\")\nvar fs = require(\"fs\")\nvar glob = undefined\ntry {\n  glob = require(\"glob\")\n} catch (_err) {\n  // treat glob as optional.\n}\nvar _0666 = parseInt('666', 8)\n\nvar defaultGlobOpts = {\n  nosort: true,\n  silent: true\n}\n\n// for EMFILE handling\nvar timeout = 0\n\nvar isWindows = (process.platform === \"win32\")\n\nfunction defaults (options) {\n  var methods = [\n    'unlink',\n    'chmod',\n    'stat',\n    'lstat',\n    'rmdir',\n    'readdir'\n  ]\n  methods.forEach(function(m) {\n    options[m] = options[m] || fs[m]\n    m = m + 'Sync'\n    options[m] = options[m] || fs[m]\n  })\n\n  options.maxBusyTries = options.maxBusyTries || 3\n  options.emfileWait = options.emfileWait || 1000\n  if (options.glob === false) {\n    options.disableGlob = true\n  }\n  if (options.disableGlob !== true && glob === undefined) {\n    throw Error('glob dependency not found, set `options.disableGlob = true` if intentional')\n  }\n  options.disableGlob = options.disableGlob || false\n  options.glob = options.glob || defaultGlobOpts\n}\n\nfunction rimraf (p, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  assert(p, 'rimraf: missing path')\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string')\n  assert.equal(typeof cb, 'function', 'rimraf: callback function required')\n  assert(options, 'rimraf: invalid options argument provided')\n  assert.equal(typeof options, 'object', 'rimraf: options should be object')\n\n  defaults(options)\n\n  var busyTries = 0\n  var errState = null\n  var n = 0\n\n  if (options.disableGlob || !glob.hasMagic(p))\n    return afterGlob(null, [p])\n\n  options.lstat(p, function (er, stat) {\n    if (!er)\n      return afterGlob(null, [p])\n\n    glob(p, options.glob, afterGlob)\n  })\n\n  function next (er) {\n    errState = errState || er\n    if (--n === 0)\n      cb(errState)\n  }\n\n  function afterGlob (er, results) {\n    if (er)\n      return cb(er)\n\n    n = results.length\n    if (n === 0)\n      return cb()\n\n    results.forEach(function (p) {\n      rimraf_(p, options, function CB (er) {\n        if (er) {\n          if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") &&\n              busyTries < options.maxBusyTries) {\n            busyTries ++\n            var time = busyTries * 100\n            // try again, with the same exact callback as this one.\n            return setTimeout(function () {\n              rimraf_(p, options, CB)\n            }, time)\n          }\n\n          // this one won't happen if graceful-fs is used.\n          if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n            return setTimeout(function () {\n              rimraf_(p, options, CB)\n            }, timeout ++)\n          }\n\n          // already gone\n          if (er.code === \"ENOENT\") er = null\n        }\n\n        timeout = 0\n        next(er)\n      })\n    })\n  }\n}\n\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nfunction rimraf_ (p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n  options.lstat(p, function (er, st) {\n    if (er && er.code === \"ENOENT\")\n      return cb(null)\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er && er.code === \"EPERM\" && isWindows)\n      fixWinEPERM(p, options, er, cb)\n\n    if (st && st.isDirectory())\n      return rmdir(p, options, er, cb)\n\n    options.unlink(p, function (er) {\n      if (er) {\n        if (er.code === \"ENOENT\")\n          return cb(null)\n        if (er.code === \"EPERM\")\n          return (isWindows)\n            ? fixWinEPERM(p, options, er, cb)\n            : rmdir(p, options, er, cb)\n        if (er.code === \"EISDIR\")\n          return rmdir(p, options, er, cb)\n      }\n      return cb(er)\n    })\n  })\n}\n\nfunction fixWinEPERM (p, options, er, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n  if (er)\n    assert(er instanceof Error)\n\n  options.chmod(p, _0666, function (er2) {\n    if (er2)\n      cb(er2.code === \"ENOENT\" ? null : er)\n    else\n      options.stat(p, function(er3, stats) {\n        if (er3)\n          cb(er3.code === \"ENOENT\" ? null : er)\n        else if (stats.isDirectory())\n          rmdir(p, options, er, cb)\n        else\n          options.unlink(p, cb)\n      })\n  })\n}\n\nfunction fixWinEPERMSync (p, options, er) {\n  assert(p)\n  assert(options)\n  if (er)\n    assert(er instanceof Error)\n\n  try {\n    options.chmodSync(p, _0666)\n  } catch (er2) {\n    if (er2.code === \"ENOENT\")\n      return\n    else\n      throw er\n  }\n\n  try {\n    var stats = options.statSync(p)\n  } catch (er3) {\n    if (er3.code === \"ENOENT\")\n      return\n    else\n      throw er\n  }\n\n  if (stats.isDirectory())\n    rmdirSync(p, options, er)\n  else\n    options.unlinkSync(p)\n}\n\nfunction rmdir (p, options, originalEr, cb) {\n  assert(p)\n  assert(options)\n  if (originalEr)\n    assert(originalEr instanceof Error)\n  assert(typeof cb === 'function')\n\n  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n  options.rmdir(p, function (er) {\n    if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\"))\n      rmkids(p, options, cb)\n    else if (er && er.code === \"ENOTDIR\")\n      cb(originalEr)\n    else\n      cb(er)\n  })\n}\n\nfunction rmkids(p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.readdir(p, function (er, files) {\n    if (er)\n      return cb(er)\n    var n = files.length\n    if (n === 0)\n      return options.rmdir(p, cb)\n    var errState\n    files.forEach(function (f) {\n      rimraf(path.join(p, f), options, function (er) {\n        if (errState)\n          return\n        if (er)\n          return cb(errState = er)\n        if (--n === 0)\n          options.rmdir(p, cb)\n      })\n    })\n  })\n}\n\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nfunction rimrafSync (p, options) {\n  options = options || {}\n  defaults(options)\n\n  assert(p, 'rimraf: missing path')\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string')\n  assert(options, 'rimraf: missing options')\n  assert.equal(typeof options, 'object', 'rimraf: options should be object')\n\n  var results\n\n  if (options.disableGlob || !glob.hasMagic(p)) {\n    results = [p]\n  } else {\n    try {\n      options.lstatSync(p)\n      results = [p]\n    } catch (er) {\n      results = glob.sync(p, options.glob)\n    }\n  }\n\n  if (!results.length)\n    return\n\n  for (var i = 0; i < results.length; i++) {\n    var p = results[i]\n\n    try {\n      var st = options.lstatSync(p)\n    } catch (er) {\n      if (er.code === \"ENOENT\")\n        return\n\n      // Windows can EPERM on stat.  Life is suffering.\n      if (er.code === \"EPERM\" && isWindows)\n        fixWinEPERMSync(p, options, er)\n    }\n\n    try {\n      // sunos lets the root user unlink directories, which is... weird.\n      if (st && st.isDirectory())\n        rmdirSync(p, options, null)\n      else\n        options.unlinkSync(p)\n    } catch (er) {\n      if (er.code === \"ENOENT\")\n        return\n      if (er.code === \"EPERM\")\n        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)\n      if (er.code !== \"EISDIR\")\n        throw er\n\n      rmdirSync(p, options, er)\n    }\n  }\n}\n\nfunction rmdirSync (p, options, originalEr) {\n  assert(p)\n  assert(options)\n  if (originalEr)\n    assert(originalEr instanceof Error)\n\n  try {\n    options.rmdirSync(p)\n  } catch (er) {\n    if (er.code === \"ENOENT\")\n      return\n    if (er.code === \"ENOTDIR\")\n      throw originalEr\n    if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")\n      rmkidsSync(p, options)\n  }\n}\n\nfunction rmkidsSync (p, options) {\n  assert(p)\n  assert(options)\n  options.readdirSync(p).forEach(function (f) {\n    rimrafSync(path.join(p, f), options)\n  })\n\n  // We only end up here once we got ENOTEMPTY at least once, and\n  // at this point, we are guaranteed to have removed all the kids.\n  // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n  // try really hard to delete stuff on windows, because it has a\n  // PROFOUNDLY annoying habit of not closing handles promptly when\n  // files are deleted, resulting in spurious ENOTEMPTY errors.\n  var retries = isWindows ? 100 : 1\n  var i = 0\n  do {\n    var threw = true\n    try {\n      var ret = options.rmdirSync(p, options)\n      threw = false\n      return ret\n    } finally {\n      if (++i < retries && threw)\n        continue\n    }\n  } while (true)\n}\n"],"file":"rimraf.js"}