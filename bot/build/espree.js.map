{"version":3,"sources":["../node_modules/espree/espree.js"],"names":["acorn","require","jsx","astNodeTypes","espree","parsers","_regular","_jsx","regular","Parser","extend","get","options","useJsx","Boolean","ecmaFeatures","tokenize","code","tokens","Object","assign","parse","exports","version","Syntax","name","types","create","hasOwnProperty","freeze","VisitorKeys","KEYS"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\"use strict\";\n\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst astNodeTypes = require(\"./lib/ast-node-types\");\nconst espree = require(\"./lib/espree\");\n\n// To initialize lazily.\nconst parsers = {\n    _regular: null,\n    _jsx: null,\n\n    get regular() {\n        if (this._regular === null) {\n            this._regular = acorn.Parser.extend(espree());\n        }\n        return this._regular;\n    },\n\n    get jsx() {\n        if (this._jsx === null) {\n            this._jsx = acorn.Parser.extend(jsx(), espree());\n        }\n        return this._jsx;\n    },\n\n    get(options) {\n        const useJsx = Boolean(\n            options &&\n            options.ecmaFeatures &&\n            options.ecmaFeatures.jsx\n        );\n\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n    const Parser = parsers.get(options);\n\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) {\n        options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n    }\n\n    return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nfunction parse(code, options) {\n    const Parser = parsers.get(options);\n\n    return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\n\nexports.tokenize = tokenize;\n\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = (function() {\n    let name,\n        types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in astNodeTypes) {\n        if (astNodeTypes.hasOwnProperty(name)) {\n            types[name] = astNodeTypes[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\n/* istanbul ignore next */\nexports.VisitorKeys = (function() {\n    return require(\"eslint-visitor-keys\").KEYS;\n}());\n"],"file":"espree.js"}