{"version":3,"sources":["../node_modules/extract-domain/index.test.js"],"names":["assert","require","extractDomain","process","env","NODE_ENV","urls","expected","describe","it","equal","domains","map","domain","indexOf","e","name","message"],"mappings":"AAAA;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAIC,aAAJ;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,QAA7B,EAAuC;AACnCH,EAAAA,aAAa,GAAGD,OAAO,CAAC,2BAAD,CAAvB;AACH,CAFD,MAEO;AACHC,EAAAA,aAAa,GAAGD,OAAO,CAAC,SAAD,CAAvB;AACH;;AAED,MAAMK,IAAI,GAAG,CACT,8CADS,EAET,8FAFS,EAGT,0CAHS,EAIT,0FAJS,EAKT,kHALS,EAMT,wGANS,EAOT,gCAPS,EAQT,sBARS,EAST,iCATS,EAUT,+BAVS,EAWT,sBAXS,EAYT,oBAZS,CAAb;AAeA,MAAMC,QAAQ,GAAG,CACb,WADa,EAEb,aAFa,EAGb,WAHa,EAIb,aAJa,EAKb,WALa,EAMb,eANa,CAAjB;AASAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC7BC,EAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC7CT,IAAAA,MAAM,CAACU,KAAP,CAAaR,aAAa,CAACI,IAAI,CAAC,CAAD,CAAL,CAA1B,EAAqCC,QAAQ,CAAC,CAAD,CAA7C;AACAP,IAAAA,MAAM,CAACU,KAAP,CAAaR,aAAa,CAACI,IAAI,CAAC,CAAD,CAAL,CAA1B,EAAqCC,QAAQ,CAAC,CAAD,CAA7C;AACAP,IAAAA,MAAM,CAACU,KAAP,CAAaR,aAAa,CAACI,IAAI,CAAC,CAAD,CAAL,CAA1B,EAAqCC,QAAQ,CAAC,CAAD,CAA7C;AACAP,IAAAA,MAAM,CAACU,KAAP,CAAaR,aAAa,CAACI,IAAI,CAAC,CAAD,CAAL,CAA1B,EAAqCC,QAAQ,CAAC,CAAD,CAA7C;AACAP,IAAAA,MAAM,CAACU,KAAP,CAAaR,aAAa,CAACI,IAAI,CAAC,EAAD,CAAL,CAA1B,EAAsCC,QAAQ,CAAC,CAAD,CAA9C;AACH,GANC,CAAF;AAQAE,EAAAA,EAAE,CAAC,mDAAD,EAAsD,MAAM;AAC1D,UAAME,OAAO,GAAGT,aAAa,CAACI,IAAD,CAA7B;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAIb,MAAM,CAACO,QAAQ,CAACO,OAAT,CAAiBD,MAAjB,IAA2B,CAAC,CAA7B,CAA5B;AACH,GAJC,CAAF;AAMAJ,EAAAA,EAAE,CAAC,+CAAD,EAAkD,MAAM;AACtDT,IAAAA,MAAM,CAACU,KAAP,CAAaR,aAAa,CAAC,2BAAD,CAA1B,EAAyD,EAAzD;AACH,GAFC,CAAF;AAIAO,EAAAA,EAAE,CAAC,6EAAD,EAAgF,MAAM;AACpF,QAAI;AACAP,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,CAEE,OAAOa,CAAP,EAAU;AACRf,MAAAA,MAAM,CAACU,KAAP,CAAaK,CAAC,CAACC,IAAf,EAAqB,WAArB;AAEAhB,MAAAA,MAAM,CAACU,KAAP,CACIK,CAAC,CAACE,OADN,EAEI,iEAFJ;AAIH;AACJ,GAXC,CAAF;AAaAR,EAAAA,EAAE,CAAC,wEAAD,EAA2E,MAAM;AAC/E,QAAI;AACAP,MAAAA,aAAa,CAAC,CAAC,CAAC,KAAD,CAAD,CAAD,CAAb;AACH,KAFD,CAEE,OAAOa,CAAP,EAAU;AACRf,MAAAA,MAAM,CAACU,KAAP,CAAaK,CAAC,CAACC,IAAf,EAAqB,WAArB;AAEAhB,MAAAA,MAAM,CAACU,KAAP,CACIK,CAAC,CAACE,OADN,EAEI,iEAFJ;AAIH;AACJ,GAXC,CAAF;AAYH,CA5CO,CAAR","sourcesContent":["'use strict';\nconst assert = require('assert');\n\nlet extractDomain;\n\nif (process.env.NODE_ENV === 'travis') {\n    extractDomain = require('./dist/extract-domain.min');\n} else {\n    extractDomain = require('./index');\n}\n\nconst urls = [\n    'https://www.npmjs.com/package/extract-domain',\n    'http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'https://npmjs.com/package/extract-domain',\n    'http://example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'http://www.so.many.sub.domains.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'http://user:password@example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'ftp://example.org/resource.txt',\n    'http://www.npmjs.com',\n    'http://www.npmjs.com?query=test',\n    'http://www.npmjs.com#fragment',\n    'this.is.my@email.com',\n    'test@something.com',\n];\n\nconst expected = [\n    'npmjs.com',\n    'example.com',\n    'npmjs.com',\n    'example.org',\n    'email.com',\n    'something.com',\n];\n\ndescribe('extract domain', () => {\n    it('should extract given domain from url', () => {\n        assert.equal(extractDomain(urls[0]), expected[0]);\n        assert.equal(extractDomain(urls[1]), expected[1]);\n        assert.equal(extractDomain(urls[7]), expected[0]);\n        assert.equal(extractDomain(urls[8]), expected[0]);\n        assert.equal(extractDomain(urls[10]), expected[4]);\n    });\n\n    it('should extract given domain from an array of urls', () => {\n        const domains = extractDomain(urls);\n\n        domains.map(domain => assert(expected.indexOf(domain) > -1));\n    });\n\n    it('should return empty string if it is not a url', () => {\n        assert.equal(extractDomain('/i.am/just.astring//7test'), '');\n    });\n\n    it('should throw syntax error exception if the argument is not string nor array', () => {\n        try {\n            extractDomain({});\n        } catch (e) {\n            assert.equal(e.name, 'TypeError');\n\n            assert.equal(\n                e.message,\n                'The given URL is not a string. Please verify your string|array.'\n            );\n        }\n    });\n\n    it('should throw syntax error exception if the array value is not a string', () => {\n        try {\n            extractDomain([['wow']]);\n        } catch (e) {\n            assert.equal(e.name, 'TypeError');\n\n            assert.equal(\n                e.message,\n                'The given URL is not a string. Please verify your string|array.'\n            );\n        }\n    });\n});\n"],"file":"index.test.js"}