{"version":3,"sources":["../node_modules/lodash/_mergeData.js"],"names":["composeArgs","require","composeArgsRight","replaceHolders","PLACEHOLDER","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","nativeMin","Math","bitmask","data","srcBitmask","source","newBitmask","isCommon","isCombo","value","partials","module"],"mappings":"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","sourcesContent":["var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"],"file":"_mergeData.js"}