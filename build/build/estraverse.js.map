{"version":3,"sources":["../node_modules/estraverse/estraverse.js"],"names":["isArray","Array","Object","ret","obj","val","deepCopy","ignoreJSHintError","len","array","i","diff","current","func","objectCreate","F","objectKeys","keys","key","to","from","Syntax","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ComprehensionBlock","ComprehensionExpression","ConditionalExpression","ContinueStatement","DebuggerStatement","DirectiveStatement","DoWhileStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","GeneratorExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","ModuleSpecifier","NewExpression","ObjectExpression","ObjectPattern","Program","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchStatement","SwitchCase","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","VisitorKeys","BREAK","SKIP","REMOVE","VisitorOption","Break","Skip","Remove","Reference","Controller","j","jz","path","result","iz","element","addToPath","node","previous","callback","visitor","extend","nodeType","sentinel","worklist","leavelist","candidates","candidate","current2","isProperty","isNode","parent","nextElem","outer","root","target","removeElem","controller","upperBound","token","comment","tokens","comments","tree","providedComments","extendCommentRange","cursor","traverse","enter","leave","exports","require","clone"],"mappings":"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","sourcesContent":["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true*/\n(function clone(exports) {\n    'use strict';\n\n    var Syntax,\n        isArray,\n        VisitorOption,\n        VisitorKeys,\n        objectCreate,\n        objectKeys,\n        BREAK,\n        SKIP,\n        REMOVE;\n\n    function ignoreJSHintError() { }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    function shallowCopy(obj) {\n        var ret = {}, key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                ret[key] = obj[key];\n            }\n        }\n        return ret;\n    }\n    ignoreJSHintError(shallowCopy);\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    function lowerBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                i = current + 1;\n                len -= diff + 1;\n            } else {\n                len = diff;\n            }\n        }\n        return i;\n    }\n    ignoreJSHintError(lowerBound);\n\n    objectCreate = Object.create || (function () {\n        function F() { }\n\n        return function (o) {\n            F.prototype = o;\n            return new F();\n        };\n    })();\n\n    objectKeys = Object.keys || function (o) {\n        var keys = [], key;\n        for (key in o) {\n            keys.push(key);\n        }\n        return keys;\n    };\n\n    function extend(to, from) {\n        var keys = objectKeys(from), key, i, len;\n        for (i = 0, len = keys.length; i < len; i += 1) {\n            key = keys[i];\n            to[key] = from[key];\n        }\n        return to;\n    }\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        ModuleSpecifier: 'ModuleSpecifier',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        AssignmentPattern: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'body'],\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'superClass', 'body'],\n        ClassExpression: ['id', 'superClass', 'body'],\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExportAllDeclaration: ['source'],\n        ExportDefaultDeclaration: ['declaration'],\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n        ExportSpecifier: ['exported', 'local'],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        ImportDeclaration: ['specifiers', 'source'],\n        ImportDefaultSpecifier: ['local'],\n        ImportNamespaceSpecifier: ['local'],\n        ImportSpecifier: ['imported', 'local'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        MetaProperty: ['meta', 'property'],\n        MethodDefinition: ['key', 'value'],\n        ModuleSpecifier: [],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        RestElement: [ 'argument' ],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SpreadElement: ['argument'],\n        Super: [],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        TaggedTemplateExpression: ['tag', 'quasi'],\n        TemplateElement: [],\n        TemplateLiteral: ['quasis', 'expressions'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handler', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n\n    Reference.prototype.remove = function remove() {\n        if (isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n\n    function Controller() { }\n\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n\n        function addToPath(result, path) {\n            if (isArray(path)) {\n                for (j = 0, jz = path.length; j < jz; ++j) {\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n\n        // first node is sentinel, second node is root element\n        result = [];\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n\n    // API:\n    // return type of current node\n    Controller.prototype.type = function () {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n\n        // first node is sentinel\n        result = [];\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n            result.push(this.__leavelist[i].node);\n        }\n\n        return result;\n    };\n\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n\n        result = undefined;\n\n        previous  = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n\n        return result;\n    };\n\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function () {\n        this.notify(SKIP);\n    };\n\n    // API:\n    // break traversals\n    Controller.prototype['break'] = function () {\n        this.notify(BREAK);\n    };\n\n    // API:\n    // remove node\n    Controller.prototype.remove = function () {\n        this.notify(REMOVE);\n    };\n\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === 'iteration') {\n            this.__fallback = objectKeys;\n        } else if (typeof visitor.fallback === 'function') {\n            this.__fallback = visitor.fallback;\n        }\n\n        this.__keys = VisitorKeys;\n        if (visitor.keys) {\n            this.__keys = extend(objectCreate(this.__keys), visitor.keys);\n        }\n    };\n\n    function isNode(node) {\n        if (node == null) {\n            return false;\n        }\n        return typeof node === 'object' && typeof node.type === 'string';\n    }\n\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n    }\n\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist,\n            leavelist,\n            element,\n            node,\n            nodeType,\n            ret,\n            key,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                ret = this.__execute(visitor.leave, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n\n            if (element.node) {\n\n                ret = this.__execute(visitor.enter, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n\n                worklist.push(sentinel);\n                leavelist.push(element);\n\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) {\n                        candidates = this.__fallback(node);\n                    } else {\n                        throw new Error('Unknown node type ' + nodeType + '.');\n                    }\n                }\n\n                current = candidates.length;\n                while ((current -= 1) >= 0) {\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n\n                    if (isArray(candidate)) {\n                        current2 = candidate.length;\n                        while ((current2 -= 1) >= 0) {\n                            if (!candidate[current2]) {\n                                continue;\n                            }\n                            if (isProperty(nodeType, candidates[current])) {\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\n                            } else if (isNode(candidate[current2])) {\n                                element = new Element(candidate[current2], [key, current2], null, null);\n                            } else {\n                                continue;\n                            }\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) {\n                        worklist.push(new Element(candidate, key, null, null));\n                    }\n                }\n            }\n        }\n    };\n\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist,\n            leavelist,\n            node,\n            nodeType,\n            target,\n            element,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel,\n            outer,\n            key;\n\n        function removeElem(element) {\n            var i,\n                key,\n                nextElem,\n                parent;\n\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while (i--) {\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if  (nextElem.ref.key < key) {\n                            break;\n                        }\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, 'root'));\n        worklist.push(element);\n        leavelist.push(element);\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                target = this.__execute(visitor.leave, element);\n\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                    // replace\n                    element.ref.replace(target);\n                }\n\n                if (this.__state === REMOVE || target === REMOVE) {\n                    removeElem(element);\n                }\n\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n\n            target = this.__execute(visitor.enter, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error('Unknown node type ' + nodeType + '.');\n                }\n            }\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (isArray(candidate)) {\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                }\n            }\n        }\n\n        return outer.root;\n    };\n\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        cursor = 0;\n        traverse(tree, {\n            leave: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.version = require('./package.json').version;\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.attachComments = attachComments;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n    exports.Controller = Controller;\n    exports.cloneEnvironment = function () { return clone({}); };\n\n    return exports;\n}(exports));\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"file":"estraverse.js"}