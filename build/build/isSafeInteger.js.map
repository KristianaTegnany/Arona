{"version":3,"sources":["../node_modules/lodash/isSafeInteger.js"],"names":["isInteger","require","MAX_SAFE_INTEGER","value","module"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAvB,aAAuB,CAAvB;AAEA;;;AACA,IAAIC,gBAAgB,GAApB,gBAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,SAAOF,SAAS,CAATA,KAAS,CAATA,IAAoBG,KAAK,IAAI,CAA7BH,gBAAAA,IAAkDG,KAAK,IAA9D,gBAAA;AACD;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["var isInteger = require('./isInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n * double precision number which isn't the result of a rounded unsafe integer.\n *\n * **Note:** This method is based on\n * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n * @example\n *\n * _.isSafeInteger(3);\n * // => true\n *\n * _.isSafeInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isSafeInteger(Infinity);\n * // => false\n *\n * _.isSafeInteger('3');\n * // => false\n */\nfunction isSafeInteger(value) {\n  return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isSafeInteger;\n"],"file":"isSafeInteger.js"}