{"version":3,"sources":["../node_modules/array-flatten/array-flatten.js"],"names":["module","i","array","value","depth","Array","flattenWithDepth","result","flattenForever"],"mappings":"AAAA;AAEA;;;;AAGAA,MAAM,CAANA,OAAAA,GAAAA,YAAAA;AAEA;;;;;;;;;AAQA,SAAA,gBAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAiD;AAC/C,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkCD,CAAlC,EAAA,EAAuC;AACrC,QAAIE,KAAK,GAAGD,KAAK,CAAjB,CAAiB,CAAjB;;AAEA,QAAIE,KAAK,GAALA,CAAAA,IAAaC,KAAK,CAALA,OAAAA,CAAjB,KAAiBA,CAAjB,EAAuC;AACrCC,MAAAA,gBAAgB,CAAA,KAAA,EAAA,MAAA,EAAgBF,KAAK,GAArCE,CAAgB,CAAhBA;AADF,KAAA,MAEO;AACLC,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AACD;AACF;;AAED,SAAA,MAAA;AACD;AAED;;;;;;;;;AAOA,SAAA,cAAA,CAAA,KAAA,EAAA,MAAA,EAAwC;AACtC,OAAK,IAAIN,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkCD,CAAlC,EAAA,EAAuC;AACrC,QAAIE,KAAK,GAAGD,KAAK,CAAjB,CAAiB,CAAjB;;AAEA,QAAIG,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;AACxBG,MAAAA,cAAc,CAAA,KAAA,EAAdA,MAAc,CAAdA;AADF,KAAA,MAEO;AACLD,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AACD;AACF;;AAED,SAAA,MAAA;AACD;AAED;;;;;;;;;AAOA,SAAA,YAAA,CAAA,KAAA,EAAA,KAAA,EAAqC;AACnC,MAAIH,KAAK,IAAT,IAAA,EAAmB;AACjB,WAAOI,cAAc,CAAA,KAAA,EAArB,EAAqB,CAArB;AACD;;AAED,SAAOF,gBAAgB,CAAA,KAAA,EAAA,EAAA,EAAvB,KAAuB,CAAvB;AACD","sourcesContent":["'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = arrayFlatten\n\n/**\n * Recursive flatten function with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {Number} depth\n * @return {Array}\n */\nfunction flattenWithDepth (array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenWithDepth(value, result, depth - 1)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Recursive flatten function. Omitting depth is slightly faster.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenForever (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array, with the ability to define a depth.\n *\n * @param  {Array}  array\n * @param  {Number} depth\n * @return {Array}\n */\nfunction arrayFlatten (array, depth) {\n  if (depth == null) {\n    return flattenForever(array, [])\n  }\n\n  return flattenWithDepth(array, [], depth)\n}\n"],"file":"array-flatten.js"}