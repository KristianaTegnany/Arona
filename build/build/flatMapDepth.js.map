{"version":3,"sources":["../node_modules/lodash/flatMapDepth.js"],"names":["baseFlatten","require","map","toInteger","depth","module"],"mappings":";;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAzB,gBAAyB,CAAzB;AAAA,IACIC,GAAG,GAAGD,OAAO,CADjB,OACiB,CADjB;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAFvB,aAEuB,CAFvB;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAA,YAAA,CAAA,UAAA,EAAA,QAAA,EAAA,KAAA,EAAmD;AACjDG,EAAAA,KAAK,GAAGA,KAAK,KAALA,SAAAA,GAAAA,CAAAA,GAA0BD,SAAS,CAA3CC,KAA2C,CAA3CA;AACA,SAAOJ,WAAW,CAACE,GAAG,CAAA,UAAA,EAAJ,QAAI,CAAJ,EAAlB,KAAkB,CAAlB;AACD;;AAEDG,MAAM,CAANA,OAAAA,GAAAA,YAAAA","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    map = require('./map'),\n    toInteger = require('./toInteger');\n\n/**\n * This method is like `_.flatMap` except that it recursively flattens the\n * mapped results up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.7.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [[[n, n]]];\n * }\n *\n * _.flatMapDepth([1, 2], duplicate, 2);\n * // => [[1, 1], [2, 2]]\n */\nfunction flatMapDepth(collection, iteratee, depth) {\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(map(collection, iteratee), depth);\n}\n\nmodule.exports = flatMapDepth;\n"],"file":"flatMapDepth.js"}