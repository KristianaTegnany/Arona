{"version":3,"sources":["../node_modules/lodash/_unicodeWords.js"],"names":["rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsDingbatRange","rsLowerRange","rsMathOpRange","rsNonCharRange","rsPunctuationRange","rsSpaceRange","rsUpperRange","rsVarRange","rsBreakRange","rsApos","rsBreak","rsCombo","rsDigits","rsDingbat","rsLower","rsMisc","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsUpper","rsZWJ","rsMiscLower","rsMiscUpper","rsOptContrLower","rsOptContrUpper","reOptMod","rsOptVar","rsOptJoin","rsOrdLower","rsOrdUpper","rsSeq","rsEmoji","reUnicodeWord","RegExp","string","module"],"mappings":"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","sourcesContent":["/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n"],"file":"_unicodeWords.js"}