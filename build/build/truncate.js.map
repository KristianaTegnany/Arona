{"version":3,"sources":["../node_modules/lodash/truncate.js"],"names":["baseToString","require","castSlice","hasUnicode","isObject","isRegExp","stringSize","stringToArray","toInteger","toString","DEFAULT_TRUNC_LENGTH","DEFAULT_TRUNC_OMISSION","reFlags","length","omission","separator","options","string","strLength","strSymbols","end","result","substring","RegExp","match","newEnd","index","module"],"mappings":"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","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isObject = require('./isObject'),\n    isRegExp = require('./isRegExp'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/** Used as default options for `_.truncate`. */\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.truncate('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\nfunction truncate(string, options) {\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (isObject(options)) {\n    var separator = 'separator' in options ? options.separator : separator;\n    length = 'length' in options ? toInteger(options.length) : length;\n    omission = 'omission' in options ? baseToString(options.omission) : omission;\n  }\n  string = toString(string);\n\n  var strLength = string.length;\n  if (hasUnicode(string)) {\n    var strSymbols = stringToArray(string);\n    strLength = strSymbols.length;\n  }\n  if (length >= strLength) {\n    return string;\n  }\n  var end = length - stringSize(omission);\n  if (end < 1) {\n    return omission;\n  }\n  var result = strSymbols\n    ? castSlice(strSymbols, 0, end).join('')\n    : string.slice(0, end);\n\n  if (separator === undefined) {\n    return result + omission;\n  }\n  if (strSymbols) {\n    end += (result.length - end);\n  }\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          substring = result;\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n      }\n      separator.lastIndex = 0;\n      while ((match = separator.exec(substring))) {\n        var newEnd = match.index;\n      }\n      result = result.slice(0, newEnd === undefined ? end : newEnd);\n    }\n  } else if (string.indexOf(baseToString(separator), end) != end) {\n    var index = result.lastIndexOf(separator);\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n  return result + omission;\n}\n\nmodule.exports = truncate;\n"],"file":"truncate.js"}