{"version":3,"sources":["../node_modules/lodash/_baseFindIndex.js"],"names":["length","array","index","fromIndex","fromRight","predicate","module"],"mappings":";;AAAA;;;;;;;;;;;AAWA,SAAA,aAAA,CAAA,KAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAA+D;AAC7D,MAAIA,MAAM,GAAGC,KAAK,CAAlB,MAAA;AAAA,MACIC,KAAK,GAAGC,SAAS,IAAIC,SAAS,GAAA,CAAA,GAAO,CADzC,CACqB,CADrB;;AAGA,SAAQA,SAAS,GAAGF,KAAH,EAAA,GAAa,EAAA,KAAA,GAA9B,MAAA,EAAiD;AAC/C,QAAIG,SAAS,CAACJ,KAAK,CAAN,KAAM,CAAN,EAAA,KAAA,EAAb,KAAa,CAAb,EAA2C;AACzC,aAAA,KAAA;AACD;AACF;;AACD,SAAO,CAAP,CAAA;AACD;;AAEDK,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n"],"file":"_baseFindIndex.js"}