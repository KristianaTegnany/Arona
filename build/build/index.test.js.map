{"version":3,"sources":["../node_modules/extract-domain/index.test.js"],"names":["assert","require","process","extractDomain","urls","expected","describe","it","domains","domain","e"],"mappings":"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","sourcesContent":["'use strict';\nconst assert = require('assert');\n\nlet extractDomain;\n\nif (process.env.NODE_ENV === 'travis') {\n    extractDomain = require('./dist/extract-domain.min');\n} else {\n    extractDomain = require('./index');\n}\n\nconst urls = [\n    'https://www.npmjs.com/package/extract-domain',\n    'http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'https://npmjs.com/package/extract-domain',\n    'http://example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'http://www.so.many.sub.domains.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'http://user:password@example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument',\n    'ftp://example.org/resource.txt',\n    'http://www.npmjs.com',\n    'http://www.npmjs.com?query=test',\n    'http://www.npmjs.com#fragment',\n    'this.is.my@email.com',\n    'test@something.com',\n];\n\nconst expected = [\n    'npmjs.com',\n    'example.com',\n    'npmjs.com',\n    'example.org',\n    'email.com',\n    'something.com',\n];\n\ndescribe('extract domain', () => {\n    it('should extract given domain from url', () => {\n        assert.equal(extractDomain(urls[0]), expected[0]);\n        assert.equal(extractDomain(urls[1]), expected[1]);\n        assert.equal(extractDomain(urls[7]), expected[0]);\n        assert.equal(extractDomain(urls[8]), expected[0]);\n        assert.equal(extractDomain(urls[10]), expected[4]);\n    });\n\n    it('should extract given domain from an array of urls', () => {\n        const domains = extractDomain(urls);\n\n        domains.map(domain => assert(expected.indexOf(domain) > -1));\n    });\n\n    it('should return empty string if it is not a url', () => {\n        assert.equal(extractDomain('/i.am/just.astring//7test'), '');\n    });\n\n    it('should throw syntax error exception if the argument is not string nor array', () => {\n        try {\n            extractDomain({});\n        } catch (e) {\n            assert.equal(e.name, 'TypeError');\n\n            assert.equal(\n                e.message,\n                'The given URL is not a string. Please verify your string|array.'\n            );\n        }\n    });\n\n    it('should throw syntax error exception if the array value is not a string', () => {\n        try {\n            extractDomain([['wow']]);\n        } catch (e) {\n            assert.equal(e.name, 'TypeError');\n\n            assert.equal(\n                e.message,\n                'The given URL is not a string. Please verify your string|array.'\n            );\n        }\n    });\n});\n"],"file":"index.test.js"}