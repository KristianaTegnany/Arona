{"version":3,"sources":["../node_modules/sha.js/hash.js"],"names":["Buffer","require","Hash","enc","data","block","blockSize","length","accum","offset","assigned","remainder","Math","i","rem","bits","lowBits","highBits","hash","module"],"mappings":";;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAPA,aAAO,CAAPA,CAAb,MAAA,C,CAEA;;;AACA,SAAA,IAAA,CAAA,SAAA,EAAA,SAAA,EAAqC;AACnC,OAAA,MAAA,GAAcD,MAAM,CAANA,KAAAA,CAAd,SAAcA,CAAd;AACA,OAAA,UAAA,GAAA,SAAA;AACA,OAAA,UAAA,GAAA,SAAA;AACA,OAAA,IAAA,GAAA,CAAA;AACD;;AAEDE,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,GAAwB,UAAA,IAAA,EAAA,GAAA,EAAqB;AAC3C,MAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5BC,IAAAA,GAAG,GAAGA,GAAG,IAATA,MAAAA;AACAC,IAAAA,IAAI,GAAGJ,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAPI,GAAOJ,CAAPI;AACD;;AAED,MAAIC,KAAK,GAAG,KAAZ,MAAA;AACA,MAAIC,SAAS,GAAG,KAAhB,UAAA;AACA,MAAIC,MAAM,GAAGH,IAAI,CAAjB,MAAA;AACA,MAAII,KAAK,GAAG,KAAZ,IAAA;;AAEA,OAAK,IAAIC,MAAM,GAAf,CAAA,EAAqBA,MAAM,GAA3B,MAAA,GAAuC;AACrC,QAAIC,QAAQ,GAAGF,KAAK,GAApB,SAAA;AACA,QAAIG,SAAS,GAAGC,IAAI,CAAJA,GAAAA,CAASL,MAAM,GAAfK,MAAAA,EAA0BN,SAAS,GAAnD,QAAgBM,CAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,SAAA,EAA+BA,CAA/B,EAAA,EAAoC;AAClCR,MAAAA,KAAK,CAACK,QAAQ,GAAdL,CAAK,CAALA,GAAsBD,IAAI,CAACK,MAAM,GAAjCJ,CAA0B,CAA1BA;AACD;;AAEDG,IAAAA,KAAK,IAALA,SAAAA;AACAC,IAAAA,MAAM,IAANA,SAAAA;;AAEA,QAAKD,KAAK,GAAN,SAACA,KAAL,CAAA,EAA+B;AAC7B,WAAA,OAAA,CAAA,KAAA;AACD;AACF;;AAED,OAAA,IAAA,IAAA,MAAA;AACA,SAAA,IAAA;AA5BFN,CAAAA;;AA+BAA,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,GAAwB,UAAA,GAAA,EAAe;AACrC,MAAIY,GAAG,GAAG,KAAA,IAAA,GAAY,KAAtB,UAAA;AAEA,OAAA,MAAA,CAAA,GAAA,IAHqC,IAGrC,CAHqC,CAKrC;AACA;;AACA,OAAA,MAAA,CAAA,IAAA,CAAA,CAAA,EAAoBA,GAAG,GAAvB,CAAA;;AAEA,MAAIA,GAAG,IAAI,KAAX,UAAA,EAA4B;AAC1B,SAAA,OAAA,CAAa,KAAb,MAAA;;AACA,SAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACD;;AAED,MAAIC,IAAI,GAAG,KAAA,IAAA,GAd0B,CAcrC,CAdqC,CAgBrC;;AACA,MAAIA,IAAI,IAAR,UAAA,EAAwB;AACtB,SAAA,MAAA,CAAA,aAAA,CAAA,IAAA,EAAgC,KAAA,UAAA,GADV,CACtB,EADsB,CAGxB;;AAHA,GAAA,MAIO;AACL,QAAIC,OAAO,GAAG,CAACD,IAAI,GAAL,UAAA,MAAd,CAAA;AACA,QAAIE,QAAQ,GAAG,CAACF,IAAI,GAAL,OAAA,IAAf,WAAA;;AAEA,SAAA,MAAA,CAAA,aAAA,CAAA,QAAA,EAAoC,KAAA,UAAA,GAApC,CAAA;;AACA,SAAA,MAAA,CAAA,aAAA,CAAA,OAAA,EAAmC,KAAA,UAAA,GAAnC,CAAA;AACD;;AAED,OAAA,OAAA,CAAa,KAAb,MAAA;;AACA,MAAIG,IAAI,GAAG,KAAX,KAAW,EAAX;;AAEA,SAAOf,GAAG,GAAGe,IAAI,CAAJA,QAAAA,CAAH,GAAGA,CAAH,GAAV,IAAA;AAhCFhB,CAAAA;;AAmCAA,IAAI,CAAJA,SAAAA,CAAAA,OAAAA,GAAyB,YAAY;AACnC,QAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AADFA,CAAAA;;AAIAiB,MAAM,CAANA,OAAAA,GAAAA,IAAAA","sourcesContent":["var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n"],"file":"hash.js"}