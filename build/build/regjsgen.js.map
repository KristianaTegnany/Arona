{"version":3,"sources":["../node_modules/regjsgen/regjsgen.js"],"names":["objectTypes","root","freeExports","exports","hasFreeModule","module","freeGlobal","hasOwnProperty","Object","codePoint","Number","arguments","isFinite","Math","RangeError","String","highSurrogate","lowSurrogate","assertTypeRegexMap","expected","type","Error","RegExp","node","generators","assertType","terms","i","length","result","generateTerm","generate","classRanges","generateClassAtom","min","max","body","generateIdentifier","quantifier","generateAtom","kind","fromCodePoint","generateValue","regjsgen","define"],"mappings":"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","sourcesContent":["/*!\n * regjsgen 0.5.1\n * Copyright 2014-2019 Benjamin Tan <https://bnjmnt4n.now.sh/>\n * Available under MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE>\n */\n;(function() {\n  'use strict';\n\n  // Used to determine if values are of the language type `Object`.\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  // Used as a reference to the global object.\n  var root = (objectTypes[typeof window] && window) || this;\n\n  // Detect free variable `exports`.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Detect free variable `module`.\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType;\n\n  // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Used to check objects for own properties.\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n\n    if (\n      !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      Math.floor(codePoint) != codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = (codePoint % 0x400) + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Ensures that nodes have the correct types.\n  var assertTypeRegexMap = {};\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected)\n      ? assertTypeRegexMap[expected]\n      : (assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a regular expression string based on an AST.\n  function generate(node) {\n    var type = node.type;\n\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    var terms = node.body,\n        i = -1,\n        length = terms.length,\n        result = '';\n\n    while (++i < length) {\n      result += generateTerm(terms[i]);\n    }\n\n    return result;\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var classRanges = node.body,\n        i = -1,\n        length = classRanges.length,\n        result = '';\n\n    if (node.negative) {\n      result += '^';\n    }\n\n    while (++i < length) {\n      result += generateClassAtom(classRanges[i]);\n    }\n\n    return '[' + result + ']';\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        i = -1,\n        length = body.length,\n        result = '';\n\n    while (++i < length) {\n      if (i != 0) {\n        result += '|';\n      }\n      result += generate(body[i]);\n    }\n\n    return result;\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '';\n\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      case 'lookbehind':\n        result += '?<=';\n        break;\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    var body = node.body,\n        i = -1,\n        length = body.length;\n\n    while (++i < length) {\n      result += generate(body[i]);\n    }\n\n    return '(' + result + ')';\n  }\n\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n\n    return node.value;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n\n    throw new Error('Unknown reference type');\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value|dot');\n\n    return generate(node);\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + codePoint.toString(8);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x0009:\n            return '\\\\t';\n          case 0x000A:\n            return '\\\\n';\n          case 0x000B:\n            return '\\\\v';\n          case 0x000C:\n            return '\\\\f';\n          case 0x000D:\n            return '\\\\r';\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Used to generate strings for each node type.\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'value': generateValue\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export regjsgen.\n  var regjsgen = {\n    'generate': generate\n  };\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function() {\n      return regjsgen;\n    });\n\n    root.regjsgen = regjsgen;\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n    // Export for CommonJS support.\n    freeExports.generate = generate;\n  }\n  else {\n    // Export to the global object.\n    root.regjsgen = regjsgen;\n  }\n}.call(this));\n"],"file":"regjsgen.js"}