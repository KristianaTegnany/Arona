{"version":3,"sources":["../node_modules/pump/test-browser.js"],"names":["stream","require","pump","rs","ws","Buffer","setTimeout","cb","toHex","reverse","chunk","callback","wsClosed","rsClosed","callbackCalled","check","console","clearTimeout","res","timeout"],"mappings":";;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAApB,QAAoB,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAlB,SAAkB,CAAlB;;AAEA,IAAIE,EAAE,GAAG,IAAIH,MAAM,CAAnB,QAAS,EAAT;AACA,IAAII,EAAE,GAAG,IAAIJ,MAAM,CAAnB,QAAS,EAAT;;AAEAG,EAAE,CAAFA,KAAAA,GAAW,UAAA,IAAA,EAAgB;AACzB,OAAA,IAAA,CAAUE,MAAM,CAANA,IAAM,CAANA,CAAAA,IAAAA,CAAV,KAAUA,CAAV;AADFF,CAAAA;;AAIAC,EAAE,CAAFA,MAAAA,GAAY,UAAA,KAAA,EAAA,QAAA,EAAA,EAAA,EAA+B;AACzCE,EAAAA,UAAU,CAAC,YAAY;AACrBC,IAAAA,EAAE;AADM,GAAA,EAAVD,GAAU,CAAVA;AADFF,CAAAA;;AAMA,IAAII,KAAK,GAAG,SAARA,KAAQ,GAAY;AACtB,MAAIC,OAAO,GAAG,KAAKR,OAAO,CAAPA,QAAO,CAAPA,CAAnB,SAAc,GAAd;;AAEAQ,EAAAA,OAAO,CAAPA,UAAAA,GAAqB,UAAA,KAAA,EAAA,GAAA,EAAA,QAAA,EAAgC;AACnDA,IAAAA,OAAO,CAAPA,IAAAA,CAAaC,KAAK,CAALA,QAAAA,CAAbD,KAAaC,CAAbD;AACAE,IAAAA,QAAQ;AAFVF,GAAAA;;AAKA,SAAA,OAAA;AARF,CAAA;;AAWA,IAAIG,QAAQ,GAAZ,KAAA;AACA,IAAIC,QAAQ,GAAZ,KAAA;AACA,IAAIC,cAAc,GAAlB,KAAA;;AAEA,IAAIC,KAAK,GAAG,SAARA,KAAQ,GAAY;AACtB,MAAIH,QAAQ,IAARA,QAAAA,IAAJ,cAAA,EAA4C;AAC1CI,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,wBAAAA;AACAC,IAAAA,YAAY,CAAZA,OAAY,CAAZA;AACD;AAJH,CAAA;;AAOAb,EAAE,CAAFA,EAAAA,CAAAA,QAAAA,EAAgB,YAAY;AAC1BQ,EAAAA,QAAQ,GAARA,IAAAA;AACAG,EAAAA,KAAK;AAFPX,CAAAA;AAKAD,EAAE,CAAFA,EAAAA,CAAAA,KAAAA,EAAa,YAAY;AACvBU,EAAAA,QAAQ,GAARA,IAAAA;AACAE,EAAAA,KAAK;AAFPZ,CAAAA;AAKA,IAAIe,GAAG,GAAGhB,IAAI,CAAA,EAAA,EAAKM,KAAL,EAAA,EAAcA,KAAd,EAAA,EAAuBA,KAAvB,EAAA,EAAA,EAAA,EAAoC,YAAY;AAC5DM,EAAAA,cAAc,GAAdA,IAAAA;AACAC,EAAAA,KAAK;AAFP,CAAc,CAAd;;AAKA,IAAIG,GAAG,KAAP,EAAA,EAAgB;AACd,QAAM,IAAA,KAAA,CAAN,2BAAM,CAAN;AACD;;AAEDZ,UAAU,CAAC,YAAY;AACrBH,EAAAA,EAAE,CAAFA,IAAAA,CAAAA,IAAAA;AACAA,EAAAA,EAAE,CAAFA,IAAAA,CAAAA,OAAAA;AAFQ,CAAA,EAAVG,IAAU,CAAVA;AAKA,IAAIa,OAAO,GAAGb,UAAU,CAAC,YAAY;AACnCS,EAAAA,KAAK;AACL,QAAM,IAAA,KAAA,CAAN,SAAM,CAAN;AAFsB,CAAA,EAAxB,IAAwB,CAAxB","sourcesContent":["var stream = require('stream')\nvar pump = require('./index')\n\nvar rs = new stream.Readable()\nvar ws = new stream.Writable()\n\nrs._read = function (size) {\n  this.push(Buffer(size).fill('abc'))\n}\n\nws._write = function (chunk, encoding, cb) {\n  setTimeout(function () {\n    cb()\n  }, 100)\n}\n\nvar toHex = function () {\n  var reverse = new (require('stream').Transform)()\n\n  reverse._transform = function (chunk, enc, callback) {\n    reverse.push(chunk.toString('hex'))\n    callback()\n  }\n\n  return reverse\n}\n\nvar wsClosed = false\nvar rsClosed = false\nvar callbackCalled = false\n\nvar check = function () {\n  if (wsClosed && rsClosed && callbackCalled) {\n    console.log('test-browser.js passes')\n    clearTimeout(timeout)\n  }\n}\n\nws.on('finish', function () {\n  wsClosed = true\n  check()\n})\n\nrs.on('end', function () {\n  rsClosed = true\n  check()\n})\n\nvar res = pump(rs, toHex(), toHex(), toHex(), ws, function () {\n  callbackCalled = true\n  check()\n})\n\nif (res !== ws) {\n  throw new Error('should return last stream')\n}\n\nsetTimeout(function () {\n  rs.push(null)\n  rs.emit('close')\n}, 1000)\n\nvar timeout = setTimeout(function () {\n  check()\n  throw new Error('timeout')\n}, 5000)\n"],"file":"test-browser.js"}