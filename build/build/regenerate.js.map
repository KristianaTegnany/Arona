{"version":3,"sources":["../node_modules/regenerate/regenerate.js"],"names":["freeExports","freeModule","module","freeGlobal","root","ERRORS","HIGH_SURROGATE_MIN","HIGH_SURROGATE_MAX","LOW_SURROGATE_MIN","LOW_SURROGATE_MAX","regexNull","object","hasOwnProperty","extend","destination","source","forEach","index","length","array","callback","toString","isArray","isNumber","zeroes","pad","string","String","hex","Number","slice","dataFromCodePoints","codePoints","max","result","isStart","previous","tmp","dataRemove","data","start","end","codePoint","dataRemoveRange","rangeEnd","Error","rangeStart","dataAdd","lastIndex","RangeError","dataAddData","dataA","dataB","dataAddRange","dataRemoveData","added","dataContains","dataIntersection","dataIsEmpty","dataIsSingleton","dataToArray","floor","Math","highSurrogate","parseInt","lowSurrogate","stringFromCharCode","codePointToString","codePointToStringUnicode","symbolToCodePoint","symbol","first","second","createBMPCharacterClasses","createUnicodeCharacterClasses","splitAtBMP","loneHighSurrogates","loneLowSurrogates","bmp","astral","optimizeSurrogateMappings","tmpLow","addLow","surrogateMappings","mapping","nextMapping","highSurrogates","lowSurrogates","nextHighSurrogates","nextLowSurrogates","optimizeByLowSurrogates","innerIndex","lowSurrogateStart","lowSurrogateEnd","otherMapping","otherLowSurrogates","otherLowSurrogateStart","otherLowSurrogateEnd","surrogateSet","startHigh","startLow","endHigh","endLow","startsWithLowestLowSurrogate","endsWithHighestLowSurrogate","complete","createSurrogateCharacterClasses","surrogateMapping","createCharacterClassesFromData","parts","hasLoneHighSurrogates","hasLoneLowSurrogates","regenerate","arguments","value","proto","$this","startCodePoint","endCodePoint","argument","set","options","pattern","flags","RegExp","define"],"mappings":"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","sourcesContent":["/*! https://mths.be/regenerate v1.3.3 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js/io.js or Browserified code,\n\t// and use it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar ERRORS = {\n\t\t'rangeOrder': 'A range\\u2019s `stop` value must be greater than or equal ' +\n\t\t\t'to the `start` value.',\n\t\t'codePointRange': 'Invalid code point value. Code points range from ' +\n\t\t\t'U+000000 to U+10FFFF.'\n\t};\n\n\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs\n\tvar HIGH_SURROGATE_MIN = 0xD800;\n\tvar HIGH_SURROGATE_MAX = 0xDBFF;\n\tvar LOW_SURROGATE_MIN = 0xDC00;\n\tvar LOW_SURROGATE_MAX = 0xDFFF;\n\n\t// In Regenerate output, `\\0` is never preceded by `\\` because we sort by\n\t// code point value, so let’s keep this regular expression simple.\n\tvar regexNull = /\\\\x00([^0123456789]|$)/g;\n\n\tvar object = {};\n\tvar hasOwnProperty = object.hasOwnProperty;\n\tvar extend = function(destination, source) {\n\t\tvar key;\n\t\tfor (key in source) {\n\t\t\tif (hasOwnProperty.call(source, key)) {\n\t\t\t\tdestination[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn destination;\n\t};\n\n\tvar forEach = function(array, callback) {\n\t\tvar index = -1;\n\t\tvar length = array.length;\n\t\twhile (++index < length) {\n\t\t\tcallback(array[index], index);\n\t\t}\n\t};\n\n\tvar toString = object.toString;\n\tvar isArray = function(value) {\n\t\treturn toString.call(value) == '[object Array]';\n\t};\n\tvar isNumber = function(value) {\n\t\treturn typeof value == 'number' ||\n\t\t\ttoString.call(value) == '[object Number]';\n\t};\n\n\t// This assumes that `number` is a positive integer that `toString()`s nicely\n\t// (which is the case for all code point values).\n\tvar zeroes = '0000';\n\tvar pad = function(number, totalCharacters) {\n\t\tvar string = String(number);\n\t\treturn string.length < totalCharacters\n\t\t\t? (zeroes + string).slice(-totalCharacters)\n\t\t\t: string;\n\t};\n\n\tvar hex = function(number) {\n\t\treturn Number(number).toString(16).toUpperCase();\n\t};\n\n\tvar slice = [].slice;\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar dataFromCodePoints = function(codePoints) {\n\t\tvar index = -1;\n\t\tvar length = codePoints.length;\n\t\tvar max = length - 1;\n\t\tvar result = [];\n\t\tvar isStart = true;\n\t\tvar tmp;\n\t\tvar previous = 0;\n\t\twhile (++index < length) {\n\t\t\ttmp = codePoints[index];\n\t\t\tif (isStart) {\n\t\t\t\tresult.push(tmp);\n\t\t\t\tprevious = tmp;\n\t\t\t\tisStart = false;\n\t\t\t} else {\n\t\t\t\tif (tmp == previous + 1) {\n\t\t\t\t\tif (index != max) {\n\t\t\t\t\t\tprevious = tmp;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisStart = true;\n\t\t\t\t\t\tresult.push(tmp + 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// End the previous range and start a new one.\n\t\t\t\t\tresult.push(previous + 1, tmp);\n\t\t\t\t\tprevious = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isStart) {\n\t\t\tresult.push(tmp + 1);\n\t\t}\n\t\treturn result;\n\t};\n\n\tvar dataRemove = function(data, codePoint) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\t// Modify this pair.\n\t\t\t\tif (codePoint == start) {\n\t\t\t\t\tif (end == start + 1) {\n\t\t\t\t\t\t// Just remove `start` and `end`.\n\t\t\t\t\t\tdata.splice(index, 2);\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Just replace `start` with a new value.\n\t\t\t\t\t\tdata[index] = codePoint + 1;\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t} else if (codePoint == end - 1) {\n\t\t\t\t\t// Just replace `end` with a new value.\n\t\t\t\t\tdata[index + 1] = codePoint;\n\t\t\t\t\treturn data;\n\t\t\t\t} else {\n\t\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n\t\t\t\t\tdata.splice(index, 2, start, codePoint, codePoint + 1, end);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataRemoveRange = function(data, rangeStart, rangeEnd) {\n\t\tif (rangeEnd < rangeStart) {\n\t\t\tthrow Error(ERRORS.rangeOrder);\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\twhile (index < data.length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n\t\t\t// Exit as soon as no more matching pairs can be found.\n\t\t\tif (start > rangeEnd) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if this range pair is equal to, or forms a subset of, the range\n\t\t\t// to be removed.\n\t\t\t// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.\n\t\t\t// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.\n\t\t\tif (rangeStart <= start && rangeEnd >= end) {\n\t\t\t\t// Remove this pair.\n\t\t\t\tdata.splice(index, 2);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if both `rangeStart` and `rangeEnd` are within the bounds of\n\t\t\t// this pair.\n\t\t\t// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.\n\t\t\tif (rangeStart >= start && rangeEnd < end) {\n\t\t\t\tif (rangeStart == start) {\n\t\t\t\t\t// Replace `[start, end]` with `[startB, endB]`.\n\t\t\t\t\tdata[index] = rangeEnd + 1;\n\t\t\t\t\tdata[index + 1] = end + 1;\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n\t\t\t\tdata.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if only `rangeStart` is within the bounds of this pair.\n\t\t\t// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.\n\t\t\tif (rangeStart >= start && rangeStart <= end) {\n\t\t\t\t// Replace `end` with `rangeStart`.\n\t\t\t\tdata[index + 1] = rangeStart;\n\t\t\t\t// Note: we cannot `return` just yet, in case any following pairs still\n\t\t\t\t// contain matching code points.\n\t\t\t\t// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20\n\t\t\t\t// → `[0, 4, 21, 31]`.\n\t\t\t}\n\n\t\t\t// Check if only `rangeEnd` is within the bounds of this pair.\n\t\t\t// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.\n\t\t\telse if (rangeEnd >= start && rangeEnd <= end) {\n\t\t\t\t// Just replace `start`.\n\t\t\t\tdata[index] = rangeEnd + 1;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\t var dataAdd = function(data, codePoint) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar lastIndex = null;\n\t\tvar length = data.length;\n\t\tif (codePoint < 0x0 || codePoint > 0x10FFFF) {\n\t\t\tthrow RangeError(ERRORS.codePointRange);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\n\t\t\t// Check if the code point is already in the set.\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (codePoint == start - 1) {\n\t\t\t\t// Just replace `start` with a new value.\n\t\t\t\tdata[index] = codePoint;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// At this point, if `start` is `greater` than `codePoint`, insert a new\n\t\t\t// `[start, end]` pair before the current pair, or after the current pair\n\t\t\t// if there is a known `lastIndex`.\n\t\t\tif (start > codePoint) {\n\t\t\t\tdata.splice(\n\t\t\t\t\tlastIndex != null ? lastIndex + 2 : 0,\n\t\t\t\t\t0,\n\t\t\t\t\tcodePoint,\n\t\t\t\t\tcodePoint + 1\n\t\t\t\t);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (codePoint == end) {\n\t\t\t\t// Check if adding this code point causes two separate ranges to become\n\t\t\t\t// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.\n\t\t\t\tif (codePoint + 1 == data[index + 2]) {\n\t\t\t\t\tdata.splice(index, 4, start, data[index + 3]);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\t// Else, just replace `end` with a new value.\n\t\t\t\tdata[index + 1] = codePoint + 1;\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\tlastIndex = index;\n\t\t\tindex += 2;\n\t\t}\n\t\t// The loop has finished; add the new pair to the end of the data set.\n\t\tdata.push(codePoint, codePoint + 1);\n\t\treturn data;\n\t};\n\n\tvar dataAddData = function(dataA, dataB) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar data = dataA.slice();\n\t\tvar length = dataB.length;\n\t\twhile (index < length) {\n\t\t\tstart = dataB[index];\n\t\t\tend = dataB[index + 1] - 1;\n\t\t\tif (start == end) {\n\t\t\t\tdata = dataAdd(data, start);\n\t\t\t} else {\n\t\t\t\tdata = dataAddRange(data, start, end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataRemoveData = function(dataA, dataB) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar data = dataA.slice();\n\t\tvar length = dataB.length;\n\t\twhile (index < length) {\n\t\t\tstart = dataB[index];\n\t\t\tend = dataB[index + 1] - 1;\n\t\t\tif (start == end) {\n\t\t\t\tdata = dataRemove(data, start);\n\t\t\t} else {\n\t\t\t\tdata = dataRemoveRange(data, start, end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataAddRange = function(data, rangeStart, rangeEnd) {\n\t\tif (rangeEnd < rangeStart) {\n\t\t\tthrow Error(ERRORS.rangeOrder);\n\t\t}\n\t\tif (\n\t\t\trangeStart < 0x0 || rangeStart > 0x10FFFF ||\n\t\t\trangeEnd < 0x0 || rangeEnd > 0x10FFFF\n\t\t) {\n\t\t\tthrow RangeError(ERRORS.codePointRange);\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar added = false;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\n\t\t\tif (added) {\n\t\t\t\t// The range has already been added to the set; at this point, we just\n\t\t\t\t// need to get rid of the following ranges in case they overlap.\n\n\t\t\t\t// Check if this range can be combined with the previous range.\n\t\t\t\tif (start == rangeEnd + 1) {\n\t\t\t\t\tdata.splice(index - 1, 2);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Exit as soon as no more possibly overlapping pairs can be found.\n\t\t\t\tif (start > rangeEnd) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have\n\t\t\t\t// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the\n\t\t\t\t// `0,16` range that was previously added.\n\t\t\t\tif (start >= rangeStart && start <= rangeEnd) {\n\t\t\t\t\t// `start` lies within the range that was previously added.\n\n\t\t\t\t\tif (end > rangeStart && end - 1 <= rangeEnd) {\n\t\t\t\t\t\t// `end` lies within the range that was previously added as well,\n\t\t\t\t\t\t// so remove this pair.\n\t\t\t\t\t\tdata.splice(index, 2);\n\t\t\t\t\t\tindex -= 2;\n\t\t\t\t\t\t// Note: we cannot `return` just yet, as there may still be other\n\t\t\t\t\t\t// overlapping pairs.\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// `start` lies within the range that was previously added, but\n\t\t\t\t\t\t// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so\n\t\t\t\t\t\t// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.\n\t\t\t\t\t\t// Remove the previously added `end` and the current `start`.\n\t\t\t\t\t\tdata.splice(index - 1, 2);\n\t\t\t\t\t\tindex -= 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: we cannot return yet.\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\telse if (start == rangeEnd + 1) {\n\t\t\t\tdata[index] = rangeStart;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if a new pair must be inserted *before* the current one.\n\t\t\telse if (start > rangeEnd) {\n\t\t\t\tdata.splice(index, 0, rangeStart, rangeEnd + 1);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\telse if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {\n\t\t\t\t// The new range lies entirely within an existing range pair. No action\n\t\t\t\t// needed.\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\telse if (\n\t\t\t\t// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.\n\t\t\t\t(rangeStart >= start && rangeStart < end) ||\n\t\t\t\t// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.\n\t\t\t\tend == rangeStart\n\t\t\t) {\n\t\t\t\t// Replace `end` with the new value.\n\t\t\t\tdata[index + 1] = rangeEnd + 1;\n\t\t\t\t// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`\n\t\t\t\t// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.\n\t\t\t\tadded = true;\n\t\t\t\t// Note: we cannot `return` just yet.\n\t\t\t}\n\n\t\t\telse if (rangeStart <= start && rangeEnd + 1 >= end) {\n\t\t\t\t// The new range is a superset of the old range.\n\t\t\t\tdata[index] = rangeStart;\n\t\t\t\tdata[index + 1] = rangeEnd + 1;\n\t\t\t\tadded = true;\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\t// The loop has finished without doing anything; add the new pair to the end\n\t\t// of the data set.\n\t\tif (!added) {\n\t\t\tdata.push(rangeStart, rangeEnd + 1);\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataContains = function(data, codePoint) {\n\t\tvar index = 0;\n\t\tvar length = data.length;\n\t\t// Exit early if `codePoint` is not within `data`’s overall range.\n\t\tvar start = data[index];\n\t\tvar end = data[length - 1];\n\t\tif (length >= 2) {\n\t\t\tif (codePoint < start || codePoint > end) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar dataIntersection = function(data, codePoints) {\n\t\tvar index = 0;\n\t\tvar length = codePoints.length;\n\t\tvar codePoint;\n\t\tvar result = [];\n\t\twhile (index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tif (dataContains(data, codePoint)) {\n\t\t\t\tresult.push(codePoint);\n\t\t\t}\n\t\t\t++index;\n\t\t}\n\t\treturn dataFromCodePoints(result);\n\t};\n\n\tvar dataIsEmpty = function(data) {\n\t\treturn !data.length;\n\t};\n\n\tvar dataIsSingleton = function(data) {\n\t\t// Check if the set only represents a single code point.\n\t\treturn data.length == 2 && data[0] + 1 == data[1];\n\t};\n\n\tvar dataToArray = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar result = [];\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\twhile (start < end) {\n\t\t\t\tresult.push(start);\n\t\t\t\t++start;\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn result;\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\tvar floor = Math.floor;\n\tvar highSurrogate = function(codePoint) {\n\t\treturn parseInt(\n\t\t\tfloor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,\n\t\t\t10\n\t\t);\n\t};\n\n\tvar lowSurrogate = function(codePoint) {\n\t\treturn parseInt(\n\t\t\t(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,\n\t\t\t10\n\t\t);\n\t};\n\n\tvar stringFromCharCode = String.fromCharCode;\n\tvar codePointToString = function(codePoint) {\n\t\tvar string;\n\t\t// https://mathiasbynens.be/notes/javascript-escapes#single\n\t\t// Note: the `\\b` escape sequence for U+0008 BACKSPACE in strings has a\n\t\t// different meaning in regular expressions (word boundary), so it cannot\n\t\t// be used here.\n\t\tif (codePoint == 0x09) {\n\t\t\tstring = '\\\\t';\n\t\t}\n\t\t// Note: IE < 9 treats `'\\v'` as `'v'`, so avoid using it.\n\t\t// else if (codePoint == 0x0B) {\n\t\t// \tstring = '\\\\v';\n\t\t// }\n\t\telse if (codePoint == 0x0A) {\n\t\t\tstring = '\\\\n';\n\t\t}\n\t\telse if (codePoint == 0x0C) {\n\t\t\tstring = '\\\\f';\n\t\t}\n\t\telse if (codePoint == 0x0D) {\n\t\t\tstring = '\\\\r';\n\t\t}\n\t\telse if (codePoint == 0x2D) {\n\t\t\t// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal\n\t\t\t// Note: `-` (U+002D HYPHEN-MINUS) is escaped in this way rather\n\t\t\t// than by backslash-escaping, in case the output is used outside\n\t\t\t// of a character class in a `u` RegExp. /\\-/u throws, but\n\t\t\t// /\\x2D/u is fine.\n\t\t\tstring = '\\\\x2D';\n\t\t}\n\t\telse if (codePoint == 0x5C) {\n\t\t\tstring = '\\\\\\\\';\n\t\t}\n\t\telse if (\n\t\t\tcodePoint == 0x24 ||\n\t\t\t(codePoint >= 0x28 && codePoint <= 0x2B) ||\n\t\t\tcodePoint == 0x2E || codePoint == 0x2F ||\n\t\t\tcodePoint == 0x3F ||\n\t\t\t(codePoint >= 0x5B && codePoint <= 0x5E) ||\n\t\t\t(codePoint >= 0x7B && codePoint <= 0x7D)\n\t\t) {\n\t\t\t// The code point maps to an unsafe printable ASCII character;\n\t\t\t// backslash-escape it. Here’s the list of those symbols:\n\t\t\t//\n\t\t\t//     $()*+./?[\\]^{|}\n\t\t\t//\n\t\t\t// This matches SyntaxCharacters as well as `/` (U+002F SOLIDUS).\n\t\t\t// https://tc39.github.io/ecma262/#prod-SyntaxCharacter\n\t\t\tstring = '\\\\' + stringFromCharCode(codePoint);\n\t\t}\n\t\telse if (codePoint >= 0x20 && codePoint <= 0x7E) {\n\t\t\t// The code point maps to one of these printable ASCII symbols\n\t\t\t// (including the space character):\n\t\t\t//\n\t\t\t//      !\"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO\n\t\t\t//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~\n\t\t\t//\n\t\t\t// These can safely be used directly.\n\t\t\tstring = stringFromCharCode(codePoint);\n\t\t}\n\t\telse if (codePoint <= 0xFF) {\n\t\t\tstring = '\\\\x' + pad(hex(codePoint), 2);\n\t\t}\n\t\telse { // `codePoint <= 0xFFFF` holds true.\n\t\t\t// https://mathiasbynens.be/notes/javascript-escapes#unicode\n\t\t\tstring = '\\\\u' + pad(hex(codePoint), 4);\n\t\t}\n\n\t\t// There’s no need to account for astral symbols / surrogate pairs here,\n\t\t// since `codePointToString` is private and only used for BMP code points.\n\t\t// But if that’s what you need, just add an `else` block with this code:\n\t\t//\n\t\t//     string = '\\\\u' + pad(hex(highSurrogate(codePoint)), 4)\n\t\t//     \t+ '\\\\u' + pad(hex(lowSurrogate(codePoint)), 4);\n\n\t\treturn string;\n\t};\n\n\tvar codePointToStringUnicode = function(codePoint) {\n\t\tif (codePoint <= 0xFFFF) {\n\t\t\treturn codePointToString(codePoint);\n\t\t}\n\t\treturn '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n\t};\n\n\tvar symbolToCodePoint = function(symbol) {\n\t\tvar length = symbol.length;\n\t\tvar first = symbol.charCodeAt(0);\n\t\tvar second;\n\t\tif (\n\t\t\tfirst >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&\n\t\t\tlength > 1 // There is a next code unit.\n\t\t) {\n\t\t\t// `first` is a high surrogate, and there is a next character. Assume\n\t\t\t// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).\n\t\t\tsecond = symbol.charCodeAt(1);\n\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\treturn (first - HIGH_SURROGATE_MIN) * 0x400 +\n\t\t\t\tsecond - LOW_SURROGATE_MIN + 0x10000;\n\t\t}\n\t\treturn first;\n\t};\n\n\tvar createBMPCharacterClasses = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar result = '';\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\tif (dataIsSingleton(data)) {\n\t\t\treturn codePointToString(data[0]);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\t\t\tif (start == end) {\n\t\t\t\tresult += codePointToString(start);\n\t\t\t} else if (start + 1 == end) {\n\t\t\t\tresult += codePointToString(start) + codePointToString(end);\n\t\t\t} else {\n\t\t\t\tresult += codePointToString(start) + '-' + codePointToString(end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn '[' + result + ']';\n\t};\n\n\tvar createUnicodeCharacterClasses = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar result = '';\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\tif (dataIsSingleton(data)) {\n\t\t\treturn codePointToStringUnicode(data[0]);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\t\t\tif (start == end) {\n\t\t\t\tresult += codePointToStringUnicode(start);\n\t\t\t} else if (start + 1 == end) {\n\t\t\t\tresult += codePointToStringUnicode(start) + codePointToStringUnicode(end);\n\t\t\t} else {\n\t\t\t\tresult += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn '[' + result + ']';\n\t};\n\n\tvar splitAtBMP = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar loneHighSurrogates = [];\n\t\tvar loneLowSurrogates = [];\n\t\tvar bmp = [];\n\t\tvar astral = [];\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n\t\t\tif (start < HIGH_SURROGATE_MIN) {\n\n\t\t\t\t// The range starts and ends before the high surrogate range.\n\t\t\t\t// E.g. (0, 0x10).\n\t\t\t\tif (end < HIGH_SURROGATE_MIN) {\n\t\t\t\t\tbmp.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends within it.\n\t\t\t\t// E.g. (0, 0xD855).\n\t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends in the low\n\t\t\t\t// surrogate range. E.g. (0, 0xDCFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends after the\n\t\t\t\t// low surrogate range. E.g. (0, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {\n\n\t\t\t\t// The range starts and ends in the high surrogate range.\n\t\t\t\t// E.g. (0xD855, 0xD866).\n\t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the high surrogate range and ends in the low\n\t\t\t\t// surrogate range. E.g. (0xD855, 0xDCFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the high surrogate range and ends after the low\n\t\t\t\t// surrogate range. E.g. (0xD855, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {\n\n\t\t\t\t// The range starts and ends in the low surrogate range.\n\t\t\t\t// E.g. (0xDCFF, 0xDDFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneLowSurrogates.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the low surrogate range and ends after the low\n\t\t\t\t// surrogate range. E.g. (0xDCFF, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {\n\n\t\t\t\t// The range starts and ends after the low surrogate range.\n\t\t\t\t// E.g. (0xFFAA, 0x10FFFF).\n\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\tbmp.push(start, end + 1);\n\t\t\t\t} else {\n\t\t\t\t\tbmp.push(start, 0xFFFF + 1);\n\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// The range starts and ends in the astral range.\n\t\t\t\tastral.push(start, end + 1);\n\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\treturn {\n\t\t\t'loneHighSurrogates': loneHighSurrogates,\n\t\t\t'loneLowSurrogates': loneLowSurrogates,\n\t\t\t'bmp': bmp,\n\t\t\t'astral': astral\n\t\t};\n\t};\n\n\tvar optimizeSurrogateMappings = function(surrogateMappings) {\n\t\tvar result = [];\n\t\tvar tmpLow = [];\n\t\tvar addLow = false;\n\t\tvar mapping;\n\t\tvar nextMapping;\n\t\tvar highSurrogates;\n\t\tvar lowSurrogates;\n\t\tvar nextHighSurrogates;\n\t\tvar nextLowSurrogates;\n\t\tvar index = -1;\n\t\tvar length = surrogateMappings.length;\n\t\twhile (++index < length) {\n\t\t\tmapping = surrogateMappings[index];\n\t\t\tnextMapping = surrogateMappings[index + 1];\n\t\t\tif (!nextMapping) {\n\t\t\t\tresult.push(mapping);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\thighSurrogates = mapping[0];\n\t\t\tlowSurrogates = mapping[1];\n\t\t\tnextHighSurrogates = nextMapping[0];\n\t\t\tnextLowSurrogates = nextMapping[1];\n\n\t\t\t// Check for identical high surrogate ranges.\n\t\t\ttmpLow = lowSurrogates;\n\t\t\twhile (\n\t\t\t\tnextHighSurrogates &&\n\t\t\t\thighSurrogates[0] == nextHighSurrogates[0] &&\n\t\t\t\thighSurrogates[1] == nextHighSurrogates[1]\n\t\t\t) {\n\t\t\t\t// Merge with the next item.\n\t\t\t\tif (dataIsSingleton(nextLowSurrogates)) {\n\t\t\t\t\ttmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);\n\t\t\t\t} else {\n\t\t\t\t\ttmpLow = dataAddRange(\n\t\t\t\t\t\ttmpLow,\n\t\t\t\t\t\tnextLowSurrogates[0],\n\t\t\t\t\t\tnextLowSurrogates[1] - 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t++index;\n\t\t\t\tmapping = surrogateMappings[index];\n\t\t\t\thighSurrogates = mapping[0];\n\t\t\t\tlowSurrogates = mapping[1];\n\t\t\t\tnextMapping = surrogateMappings[index + 1];\n\t\t\t\tnextHighSurrogates = nextMapping && nextMapping[0];\n\t\t\t\tnextLowSurrogates = nextMapping && nextMapping[1];\n\t\t\t\taddLow = true;\n\t\t\t}\n\t\t\tresult.push([\n\t\t\t\thighSurrogates,\n\t\t\t\taddLow ? tmpLow : lowSurrogates\n\t\t\t]);\n\t\t\taddLow = false;\n\t\t}\n\t\treturn optimizeByLowSurrogates(result);\n\t};\n\n\tvar optimizeByLowSurrogates = function(surrogateMappings) {\n\t\tif (surrogateMappings.length == 1) {\n\t\t\treturn surrogateMappings;\n\t\t}\n\t\tvar index = -1;\n\t\tvar innerIndex = -1;\n\t\twhile (++index < surrogateMappings.length) {\n\t\t\tvar mapping = surrogateMappings[index];\n\t\t\tvar lowSurrogates = mapping[1];\n\t\t\tvar lowSurrogateStart = lowSurrogates[0];\n\t\t\tvar lowSurrogateEnd = lowSurrogates[1];\n\t\t\tinnerIndex = index; // Note: the loop starts at the next index.\n\t\t\twhile (++innerIndex < surrogateMappings.length) {\n\t\t\t\tvar otherMapping = surrogateMappings[innerIndex];\n\t\t\t\tvar otherLowSurrogates = otherMapping[1];\n\t\t\t\tvar otherLowSurrogateStart = otherLowSurrogates[0];\n\t\t\t\tvar otherLowSurrogateEnd = otherLowSurrogates[1];\n\t\t\t\tif (\n\t\t\t\t\tlowSurrogateStart == otherLowSurrogateStart &&\n\t\t\t\t\tlowSurrogateEnd == otherLowSurrogateEnd\n\t\t\t\t) {\n\t\t\t\t\t// Add the code points in the other item to this one.\n\t\t\t\t\tif (dataIsSingleton(otherMapping[0])) {\n\t\t\t\t\t\tmapping[0] = dataAdd(mapping[0], otherMapping[0][0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmapping[0] = dataAddRange(\n\t\t\t\t\t\t\tmapping[0],\n\t\t\t\t\t\t\totherMapping[0][0],\n\t\t\t\t\t\t\totherMapping[0][1] - 1\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Remove the other, now redundant, item.\n\t\t\t\t\tsurrogateMappings.splice(innerIndex, 1);\n\t\t\t\t\t--innerIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn surrogateMappings;\n\t};\n\n\tvar surrogateSet = function(data) {\n\t\t// Exit early if `data` is an empty set.\n\t\tif (!data.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar startHigh;\n\t\tvar startLow;\n\t\tvar endHigh;\n\t\tvar endLow;\n\t\tvar surrogateMappings = [];\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1;\n\n\t\t\tstartHigh = highSurrogate(start);\n\t\t\tstartLow = lowSurrogate(start);\n\t\t\tendHigh = highSurrogate(end);\n\t\t\tendLow = lowSurrogate(end);\n\n\t\t\tvar startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;\n\t\t\tvar endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;\n\t\t\tvar complete = false;\n\n\t\t\t// Append the previous high-surrogate-to-low-surrogate mappings.\n\t\t\t// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.\n\t\t\tif (\n\t\t\t\tstartHigh == endHigh ||\n\t\t\t\tstartsWithLowestLowSurrogate && endsWithHighestLowSurrogate\n\t\t\t) {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[startHigh, endHigh + 1],\n\t\t\t\t\t[startLow, endLow + 1]\n\t\t\t\t]);\n\t\t\t\tcomplete = true;\n\t\t\t} else {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[startHigh, startHigh + 1],\n\t\t\t\t\t[startLow, LOW_SURROGATE_MAX + 1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to\n\t\t\t// `(endHigh - 1, LOW_SURROGATE_MAX)`.\n\t\t\tif (!complete && startHigh + 1 < endHigh) {\n\t\t\t\tif (endsWithHighestLowSurrogate) {\n\t\t\t\t\t// Combine step 2 and step 3.\n\t\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t\t[startHigh + 1, endHigh + 1],\n\t\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n\t\t\t\t\t]);\n\t\t\t\t\tcomplete = true;\n\t\t\t\t} else {\n\t\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t\t[startHigh + 1, endHigh],\n\t\t\t\t\t\t[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.\n\t\t\tif (!complete) {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[endHigh, endHigh + 1],\n\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\n\t\t// The format of `surrogateMappings` is as follows:\n\t\t//\n\t\t//     [ surrogateMapping1, surrogateMapping2 ]\n\t\t//\n\t\t// i.e.:\n\t\t//\n\t\t//     [\n\t\t//       [ highSurrogates1, lowSurrogates1 ],\n\t\t//       [ highSurrogates2, lowSurrogates2 ]\n\t\t//     ]\n\t\treturn optimizeSurrogateMappings(surrogateMappings);\n\t};\n\n\tvar createSurrogateCharacterClasses = function(surrogateMappings) {\n\t\tvar result = [];\n\t\tforEach(surrogateMappings, function(surrogateMapping) {\n\t\t\tvar highSurrogates = surrogateMapping[0];\n\t\t\tvar lowSurrogates = surrogateMapping[1];\n\t\t\tresult.push(\n\t\t\t\tcreateBMPCharacterClasses(highSurrogates) +\n\t\t\t\tcreateBMPCharacterClasses(lowSurrogates)\n\t\t\t);\n\t\t});\n\t\treturn result.join('|');\n\t};\n\n\tvar createCharacterClassesFromData = function(data, bmpOnly, hasUnicodeFlag) {\n\t\tif (hasUnicodeFlag) {\n\t\t\treturn createUnicodeCharacterClasses(data);\n\t\t}\n\t\tvar result = [];\n\n\t\tvar parts = splitAtBMP(data);\n\t\tvar loneHighSurrogates = parts.loneHighSurrogates;\n\t\tvar loneLowSurrogates = parts.loneLowSurrogates;\n\t\tvar bmp = parts.bmp;\n\t\tvar astral = parts.astral;\n\t\tvar hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);\n\t\tvar hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);\n\n\t\tvar surrogateMappings = surrogateSet(astral);\n\n\t\tif (bmpOnly) {\n\t\t\tbmp = dataAddData(bmp, loneHighSurrogates);\n\t\t\thasLoneHighSurrogates = false;\n\t\t\tbmp = dataAddData(bmp, loneLowSurrogates);\n\t\t\thasLoneLowSurrogates = false;\n\t\t}\n\n\t\tif (!dataIsEmpty(bmp)) {\n\t\t\t// The data set contains BMP code points that are not high surrogates\n\t\t\t// needed for astral code points in the set.\n\t\t\tresult.push(createBMPCharacterClasses(bmp));\n\t\t}\n\t\tif (surrogateMappings.length) {\n\t\t\t// The data set contains astral code points; append character classes\n\t\t\t// based on their surrogate pairs.\n\t\t\tresult.push(createSurrogateCharacterClasses(surrogateMappings));\n\t\t}\n\t\t// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860\n\t\tif (hasLoneHighSurrogates) {\n\t\t\tresult.push(\n\t\t\t\tcreateBMPCharacterClasses(loneHighSurrogates) +\n\t\t\t\t// Make sure the high surrogates aren’t part of a surrogate pair.\n\t\t\t\t'(?![\\\\uDC00-\\\\uDFFF])'\n\t\t\t);\n\t\t}\n\t\tif (hasLoneLowSurrogates) {\n\t\t\tresult.push(\n\t\t\t\t// It is not possible to accurately assert the low surrogates aren’t\n\t\t\t\t// part of a surrogate pair, since JavaScript regular expressions do\n\t\t\t\t// not support lookbehind.\n\t\t\t\t'(?:[^\\\\uD800-\\\\uDBFF]|^)' +\n\t\t\t\tcreateBMPCharacterClasses(loneLowSurrogates)\n\t\t\t);\n\t\t}\n\t\treturn result.join('|');\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// `regenerate` can be used as a constructor (and new methods can be added to\n\t// its prototype) but also as a regular function, the latter of which is the\n\t// documented and most common usage. For that reason, it’s not capitalized.\n\tvar regenerate = function(value) {\n\t\tif (arguments.length > 1) {\n\t\t\tvalue = slice.call(arguments);\n\t\t}\n\t\tif (this instanceof regenerate) {\n\t\t\tthis.data = [];\n\t\t\treturn value ? this.add(value) : this;\n\t\t}\n\t\treturn (new regenerate).add(value);\n\t};\n\n\tregenerate.version = '1.3.3';\n\n\tvar proto = regenerate.prototype;\n\textend(proto, {\n\t\t'add': function(value) {\n\t\t\tvar $this = this;\n\t\t\tif (value == null) {\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (value instanceof regenerate) {\n\t\t\t\t// Allow passing other Regenerate instances.\n\t\t\t\t$this.data = dataAddData($this.data, value.data);\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tvalue = slice.call(arguments);\n\t\t\t}\n\t\t\tif (isArray(value)) {\n\t\t\t\tforEach(value, function(item) {\n\t\t\t\t\t$this.add(item);\n\t\t\t\t});\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\t$this.data = dataAdd(\n\t\t\t\t$this.data,\n\t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'remove': function(value) {\n\t\t\tvar $this = this;\n\t\t\tif (value == null) {\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (value instanceof regenerate) {\n\t\t\t\t// Allow passing other Regenerate instances.\n\t\t\t\t$this.data = dataRemoveData($this.data, value.data);\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tvalue = slice.call(arguments);\n\t\t\t}\n\t\t\tif (isArray(value)) {\n\t\t\t\tforEach(value, function(item) {\n\t\t\t\t\t$this.remove(item);\n\t\t\t\t});\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\t$this.data = dataRemove(\n\t\t\t\t$this.data,\n\t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'addRange': function(start, end) {\n\t\t\tvar $this = this;\n\t\t\t$this.data = dataAddRange($this.data,\n\t\t\t\tisNumber(start) ? start : symbolToCodePoint(start),\n\t\t\t\tisNumber(end) ? end : symbolToCodePoint(end)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'removeRange': function(start, end) {\n\t\t\tvar $this = this;\n\t\t\tvar startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);\n\t\t\tvar endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);\n\t\t\t$this.data = dataRemoveRange(\n\t\t\t\t$this.data,\n\t\t\t\tstartCodePoint,\n\t\t\t\tendCodePoint\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'intersection': function(argument) {\n\t\t\tvar $this = this;\n\t\t\t// Allow passing other Regenerate instances.\n\t\t\t// TODO: Optimize this by writing and using `dataIntersectionData()`.\n\t\t\tvar array = argument instanceof regenerate ?\n\t\t\t\tdataToArray(argument.data) :\n\t\t\t\targument;\n\t\t\t$this.data = dataIntersection($this.data, array);\n\t\t\treturn $this;\n\t\t},\n\t\t'contains': function(codePoint) {\n\t\t\treturn dataContains(\n\t\t\t\tthis.data,\n\t\t\t\tisNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)\n\t\t\t);\n\t\t},\n\t\t'clone': function() {\n\t\t\tvar set = new regenerate;\n\t\t\tset.data = this.data.slice(0);\n\t\t\treturn set;\n\t\t},\n\t\t'toString': function(options) {\n\t\t\tvar result = createCharacterClassesFromData(\n\t\t\t\tthis.data,\n\t\t\t\toptions ? options.bmpOnly : false,\n\t\t\t\toptions ? options.hasUnicodeFlag : false\n\t\t\t);\n\t\t\tif (!result) {\n\t\t\t\t// For an empty set, return something that can be inserted `/here/` to\n\t\t\t\t// form a valid regular expression. Avoid `(?:)` since that matches the\n\t\t\t\t// empty string.\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\t// Use `\\0` instead of `\\x00` where possible.\n\t\t\treturn result.replace(regexNull, '\\\\0$1');\n\t\t},\n\t\t'toRegExp': function(flags) {\n\t\t\tvar pattern = this.toString(\n\t\t\t\tflags && flags.indexOf('u') != -1 ?\n\t\t\t\t\t{ 'hasUnicodeFlag': true } :\n\t\t\t\t\tnull\n\t\t\t);\n\t\t\treturn RegExp(pattern, flags || '');\n\t\t},\n\t\t'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.\n\t\t\treturn dataToArray(this.data);\n\t\t}\n\t});\n\n\tproto.toArray = proto.valueOf;\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn regenerate;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = regenerate;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfreeExports.regenerate = regenerate;\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.regenerate = regenerate;\n\t}\n\n}(this));\n"],"file":"regenerate.js"}