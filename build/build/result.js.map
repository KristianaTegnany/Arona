{"version":3,"sources":["../node_modules/lodash/result.js"],"names":["castPath","require","isFunction","toKey","path","index","length","object","value","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,UAAU,GAAGD,OAAO,CADxB,cACwB,CADxB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAFnB,UAEmB,CAFnB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAA,MAAA,CAAA,MAAA,EAAA,IAAA,EAAA,YAAA,EAA4C;AAC1CG,EAAAA,IAAI,GAAGJ,QAAQ,CAAA,IAAA,EAAfI,MAAe,CAAfA;AAEA,MAAIC,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,MAAM,GAAGF,IAAI,CAJyB,MAG1C,CAH0C,CAM1C;;AACA,MAAI,CAAJ,MAAA,EAAa;AACXE,IAAAA,MAAM,GAANA,CAAAA;AACAC,IAAAA,MAAM,GAANA,SAAAA;AACD;;AACD,SAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,QAAIC,KAAK,GAAGD,MAAM,IAANA,IAAAA,GAAAA,SAAAA,GAA6BA,MAAM,CAACJ,KAAK,CAACC,IAAI,CAA1D,KAA0D,CAAL,CAAN,CAA/C;;AACA,QAAII,KAAK,KAAT,SAAA,EAAyB;AACvBH,MAAAA,KAAK,GAALA,MAAAA;AACAG,MAAAA,KAAK,GAALA,YAAAA;AACD;;AACDD,IAAAA,MAAM,GAAGL,UAAU,CAAVA,KAAU,CAAVA,GAAoBM,KAAK,CAALA,IAAAA,CAApBN,MAAoBM,CAApBN,GAATK,KAAAA;AACD;;AACD,SAAA,MAAA;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,MAAAA","sourcesContent":["var castPath = require('./_castPath'),\n    isFunction = require('./isFunction'),\n    toKey = require('./_toKey');\n\n/**\n * This method is like `_.get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n *\n * _.result(object, 'a[0].b.c1');\n * // => 3\n *\n * _.result(object, 'a[0].b.c2');\n * // => 4\n *\n * _.result(object, 'a[0].b.c3', 'default');\n * // => 'default'\n *\n * _.result(object, 'a[0].b.c3', _.constant('default'));\n * // => 'default'\n */\nfunction result(object, path, defaultValue) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length;\n\n  // Ensure the loop is entered when path is empty.\n  if (!length) {\n    length = 1;\n    object = undefined;\n  }\n  while (++index < length) {\n    var value = object == null ? undefined : object[toKey(path[index])];\n    if (value === undefined) {\n      index = length;\n      value = defaultValue;\n    }\n    object = isFunction(value) ? value.call(object) : value;\n  }\n  return object;\n}\n\nmodule.exports = result;\n"],"file":"result.js"}