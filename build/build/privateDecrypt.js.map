{"version":3,"sources":["../node_modules/public-encrypt/privateDecrypt.js"],"names":["parseKeys","require","mgf","xor","BN","crt","createHash","withPublic","Buffer","module","privateKey","padding","key","k","enc","msg","zBuffer","oaep","pkcs1","iHash","hLen","maskedSeed","maskedDb","seed","db","compare","i","p1","status","ps","a","b","dif","len","Math"],"mappings":"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","sourcesContent":["var parseKeys = require('parse-asn1')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar crt = require('browserify-rsa')\nvar createHash = require('create-hash')\nvar withPublic = require('./withPublic')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function privateDecrypt (privateKey, enc, reverse) {\n  var padding\n  if (privateKey.padding) {\n    padding = privateKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n\n  var key = parseKeys(privateKey)\n  var k = key.modulus.byteLength()\n  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\n    throw new Error('decryption error')\n  }\n  var msg\n  if (reverse) {\n    msg = withPublic(new BN(enc), key)\n  } else {\n    msg = crt(enc, key)\n  }\n  var zBuffer = Buffer.alloc(k - msg.length)\n  msg = Buffer.concat([zBuffer, msg], k)\n  if (padding === 4) {\n    return oaep(key, msg)\n  } else if (padding === 1) {\n    return pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    return msg\n  } else {\n    throw new Error('unknown padding')\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  if (msg[0] !== 0) {\n    throw new Error('decryption error')\n  }\n  var maskedSeed = msg.slice(1, hLen + 1)\n  var maskedDb = msg.slice(hLen + 1)\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen))\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1))\n  if (compare(iHash, db.slice(0, hLen))) {\n    throw new Error('decryption error')\n  }\n  var i = hLen\n  while (db[i] === 0) {\n    i++\n  }\n  if (db[i++] !== 1) {\n    throw new Error('decryption error')\n  }\n  return db.slice(i)\n}\n\nfunction pkcs1 (key, msg, reverse) {\n  var p1 = msg.slice(0, 2)\n  var i = 2\n  var status = 0\n  while (msg[i++] !== 0) {\n    if (i >= msg.length) {\n      status++\n      break\n    }\n  }\n  var ps = msg.slice(2, i - 1)\n\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {\n    status++\n  }\n  if (ps.length < 8) {\n    status++\n  }\n  if (status) {\n    throw new Error('decryption error')\n  }\n  return msg.slice(i)\n}\nfunction compare (a, b) {\n  a = Buffer.from(a)\n  b = Buffer.from(b)\n  var dif = 0\n  var len = a.length\n  if (a.length !== b.length) {\n    dif++\n    len = Math.min(a.length, b.length)\n  }\n  var i = -1\n  while (++i < len) {\n    dif += (a[i] ^ b[i])\n  }\n  return dif\n}\n"],"file":"privateDecrypt.js"}