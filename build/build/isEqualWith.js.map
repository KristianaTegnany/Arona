{"version":3,"sources":["../node_modules/lodash/isEqualWith.js"],"names":["baseIsEqual","require","customizer","result","module"],"mappings":";;AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAzB,gBAAyB,CAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAA,WAAA,CAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAA+C;AAC7CC,EAAAA,UAAU,GAAG,OAAA,UAAA,IAAA,UAAA,GAAA,UAAA,GAAbA,SAAAA;AACA,MAAIC,MAAM,GAAGD,UAAU,GAAGA,UAAU,CAAA,KAAA,EAAb,KAAa,CAAb,GAAvB,SAAA;AACA,SAAOC,MAAM,KAANA,SAAAA,GAAuBH,WAAW,CAAA,KAAA,EAAA,KAAA,EAAA,SAAA,EAAlCG,UAAkC,CAAlCA,GAA0E,CAAC,CAAlF,MAAA;AACD;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nmodule.exports = isEqualWith;\n"],"file":"isEqualWith.js"}