{"version":3,"sources":["../node_modules/lodash/_createRound.js"],"names":["root","require","toInteger","toNumber","toString","nativeIsFinite","nativeMin","Math","func","number","precision","pair","value","module"],"mappings":";;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAlB,SAAkB,CAAlB;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,aACuB,CADvB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAFtB,YAEsB,CAFtB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAHtB,YAGsB,CAHtB;AAKA;;;AACA,IAAII,cAAc,GAAGL,IAAI,CAAzB,QAAA;AAAA,IACIM,SAAS,GAAGC,IAAI,CADpB,GAAA;AAGA;;;;;;;;AAOA,SAAA,WAAA,CAAA,UAAA,EAAiC;AAC/B,MAAIC,IAAI,GAAGD,IAAI,CAAf,UAAe,CAAf;AACA,SAAO,UAAA,MAAA,EAAA,SAAA,EAA4B;AACjCE,IAAAA,MAAM,GAAGN,QAAQ,CAAjBM,MAAiB,CAAjBA;AACAC,IAAAA,SAAS,GAAGA,SAAS,IAATA,IAAAA,GAAAA,CAAAA,GAAwBJ,SAAS,CAACJ,SAAS,CAAV,SAAU,CAAV,EAA7CQ,GAA6C,CAA7CA;;AACA,QAAIA,SAAS,IAAIL,cAAc,CAA/B,MAA+B,CAA/B,EAAyC;AACvC;AACA;AACA,UAAIM,IAAI,GAAG,CAACP,QAAQ,CAARA,MAAQ,CAARA,GAAD,GAAA,EAAA,KAAA,CAAX,GAAW,CAAX;AAAA,UACIQ,KAAK,GAAGJ,IAAI,CAACG,IAAI,CAAJA,CAAI,CAAJA,GAAAA,GAAAA,IAAiB,CAACA,IAAI,CAAL,CAAK,CAAL,GADlC,SACiBA,CAAD,CADhB;AAGAA,MAAAA,IAAI,GAAG,CAACP,QAAQ,CAARA,KAAQ,CAARA,GAAD,GAAA,EAAA,KAAA,CAAPO,GAAO,CAAPA;AACA,aAAO,EAAEA,IAAI,CAAJA,CAAI,CAAJA,GAAAA,GAAAA,IAAiB,CAACA,IAAI,CAAL,CAAK,CAAL,GAA1B,SAASA,CAAF,CAAP;AACD;;AACD,WAAOH,IAAI,CAAX,MAAW,CAAX;AAZF,GAAA;AAcD;;AAEDK,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["var root = require('./_root'),\n    toInteger = require('./toInteger'),\n    toNumber = require('./toNumber'),\n    toString = require('./toString');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nmodule.exports = createRound;\n"],"file":"_createRound.js"}