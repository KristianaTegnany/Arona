{"version":3,"sources":["../node_modules/split-file/split-file-cli.js"],"names":["split","require","Cli","console","file","process","parts","parseInt","isNaN","max_size","files","output_file","i","cli"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nvar split = require('./split-file.js');\n\nvar Cli = function () {};\n\n/**\n * Parse cli option.\n */\nCli.prototype.parse = function (option) {\n  this.option = option;\n\n  switch (option) {\n    case '-m':\n      this.method = this.merge;\n      break;\n    case '-s':\n      this.method = this.split;\n      break;\n    case '-x':\n      this.method = this.splitFileBySize\n    default:\n      this.method = this.help;\n  }\n\n  return this;\n}\n\n/**\n * Print the legend.\n */\nCli.prototype.help = function () {\n  console.log(\"Usage: split-file -s input.bin 5\");\n  console.log(\"       split-file -x input.bin 457000\"); \n  console.log(\"       split-file -m output.bin part1 part2 ...\");\n  console.log(\"\");\n  console.log(\" -s <input> <num_parts>\");\n  console.log(\"    Split the input file in the number of parts given.\");\n  console.log(\"\");\n  console.log(\" -x <input> <max_size>\"); \n  console.log(\"    Split the input file into multiple parts with file size maximum of max_size bytes\");\n  console.log(\"\");\n  console.log(\" -m <output> <part> <part> ...\");\n  console.log(\"    Merge the given parts into the output file.\");\n  console.log(\"\");\n  console.log(\"\");\n  console.log(\"NPM Module 'split-file' by Tom Valk.\");\n  console.log(\"Visit https://github.com/tomvlk/node-split-file for info and help.\");\n}\n\n/**\n * Split command.\n */\nCli.prototype.split = function () {\n  var file = process.argv[3];\n  var parts = parseInt(process.argv[4]);\n  \n  if (isNaN(parts)) {\n    return this.help();\n  }\n\n  split.splitFile(file, parts).then(function (names) {\n    console.log('Successfully splitted into: ' + names);\n  }).catch(function (err) {\n    console.log('An error occured:');\n    console.log(err);\n  });\n}\n\nCli.prototype.splitFileBySize = function() {\n  var file = process.argv[3];\n  var max_size = parseInt(process.argv[4]);\n  if (isNaN(max_size)) {\n    return this.help();\n  }\n  split.splitFileBySize(file, max_size).then(function (names) {\n    console.log('Successfully splitted into: ' + names);\n  }).catch(function (err) {\n    console.log('An error occured:');\n    console.log(err);\n  });\n}\n/**\n * Merge command.\n */\nCli.prototype.merge = function () {\n  var files = [];\n  var output_file = process.argv[3];\n\n  for (var i = 4; i < process.argv.length; i++) {\n    files.push(process.argv[i]);\n  }\n\n  split.mergeFiles(files, output_file).then(function() {\n    console.log('Succesfully merged the parts into ' + output_file);\n  }).catch(function (err) {\n    console.log('An error occured:');\n    console.log(err);\n  });\n}\n\nCli.prototype.run = function () {\n  return this.method();\n}\n\nif (require.main === module) {\n  var cli = new Cli();\n  cli\n    .parse(process.argv[2])\n    .run();\n}\n"],"file":"split-file-cli.js"}