{"version":3,"sources":["../node_modules/lodash/_basePullAll.js"],"names":["arrayMap","require","baseIndexOf","baseIndexOfWith","baseUnary","copyArray","arrayProto","Array","splice","indexOf","comparator","index","length","values","seen","array","fromIndex","value","computed","iteratee","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,WAAW,GAAGD,OAAO,CADzB,gBACyB,CADzB;AAAA,IAEIE,eAAe,GAAGF,OAAO,CAF7B,oBAE6B,CAF7B;AAAA,IAGIG,SAAS,GAAGH,OAAO,CAHvB,cAGuB,CAHvB;AAAA,IAIII,SAAS,GAAGJ,OAAO,CAJvB,cAIuB,CAJvB;AAMA;;;AACA,IAAIK,UAAU,GAAGC,KAAK,CAAtB,SAAA;AAEA;;AACA,IAAIC,MAAM,GAAGF,UAAU,CAAvB,MAAA;AAEA;;;;;;;;;;;;AAWA,SAAA,WAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAA,UAAA,EAA0D;AACxD,MAAIG,OAAO,GAAGC,UAAU,GAAA,eAAA,GAAxB,WAAA;AAAA,MACIC,KAAK,GAAG,CADZ,CAAA;AAAA,MAEIC,MAAM,GAAGC,MAAM,CAFnB,MAAA;AAAA,MAGIC,IAAI,GAHR,KAAA;;AAKA,MAAIC,KAAK,KAAT,MAAA,EAAsB;AACpBF,IAAAA,MAAM,GAAGR,SAAS,CAAlBQ,MAAkB,CAAlBA;AACD;;AACD,MAAA,QAAA,EAAc;AACZC,IAAAA,IAAI,GAAGd,QAAQ,CAAA,KAAA,EAAQI,SAAS,CAAhCU,QAAgC,CAAjB,CAAfA;AACD;;AACD,SAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,QAAIE,SAAS,GAAb,CAAA;AAAA,QACIC,KAAK,GAAGJ,MAAM,CADlB,KACkB,CADlB;AAAA,QAEIK,QAAQ,GAAGC,QAAQ,GAAGA,QAAQ,CAAX,KAAW,CAAX,GAFvB,KAAA;;AAIA,WAAO,CAACH,SAAS,GAAGP,OAAO,CAAA,IAAA,EAAA,QAAA,EAAA,SAAA,EAApB,UAAoB,CAApB,IAA+D,CAAtE,CAAA,EAA0E;AACxE,UAAIK,IAAI,KAAR,KAAA,EAAoB;AAClBN,QAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAAA,CAAAA;AACD;;AACDA,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAAA,SAAAA,EAAAA,CAAAA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAEDY,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIndexOf = require('./_baseIndexOf'),\n    baseIndexOfWith = require('./_baseIndexOfWith'),\n    baseUnary = require('./_baseUnary'),\n    copyArray = require('./_copyArray');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nmodule.exports = basePullAll;\n"],"file":"_basePullAll.js"}