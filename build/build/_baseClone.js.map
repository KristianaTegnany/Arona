{"version":3,"sources":["../node_modules/lodash/_baseClone.js"],"names":["Stack","require","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isArray","isBuffer","isMap","isObject","isSet","keys","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","isDeep","bitmask","isFlat","isFull","result","object","customizer","isArr","tag","isFunc","stack","stacked","value","baseClone","keysFunc","props","key","subValue","module"],"mappings":"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","sourcesContent":["var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"],"file":"_baseClone.js"}