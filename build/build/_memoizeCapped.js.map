{"version":3,"sources":["../node_modules/lodash/_memoizeCapped.js"],"names":["memoize","require","MAX_MEMOIZE_SIZE","result","cache","module"],"mappings":";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAArB,WAAqB,CAArB;AAEA;;;AACA,IAAIC,gBAAgB,GAApB,GAAA;AAEA;;;;;;;;;AAQA,SAAA,aAAA,CAAA,IAAA,EAA6B;AAC3B,MAAIC,MAAM,GAAGH,OAAO,CAAA,IAAA,EAAO,UAAA,GAAA,EAAc;AACvC,QAAII,KAAK,CAALA,IAAAA,KAAJ,gBAAA,EAAqC;AACnCA,MAAAA,KAAK,CAALA,KAAAA;AACD;;AACD,WAAA,GAAA;AAJF,GAAoB,CAApB;AAOA,MAAIA,KAAK,GAAGD,MAAM,CAAlB,KAAA;AACA,SAAA,MAAA;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"],"file":"_memoizeCapped.js"}