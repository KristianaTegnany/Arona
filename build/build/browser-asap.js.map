{"version":3,"sources":["../node_modules/asap/browser-asap.js"],"names":["rawAsap","require","freeTasks","pendingErrors","requestErrorThrow","module","rawTask","RawTask","asap"],"mappings":"AAAA,a,CAEA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAArB,OAAqB,CAArB,C,CACA;;;AACA,IAAIC,SAAS,GAAb,EAAA,C,CACA;AACA;;AACA,IAAIC,aAAa,GAAjB,EAAA;AACA,IAAIC,iBAAiB,GAAGJ,OAAO,CAAPA,wBAAAA,CAAxB,eAAwBA,CAAxB;;AAEA,SAAA,eAAA,GAA2B;AACvB,MAAIG,aAAa,CAAjB,MAAA,EAA0B;AACtB,UAAMA,aAAa,CAAnB,KAAMA,EAAN;AACH;AACJ;AAED;;;;;;;;;;AAQAE,MAAM,CAANA,OAAAA,GAAAA,IAAAA;;AACA,SAAA,IAAA,CAAA,IAAA,EAAoB;AAChB,MAAA,OAAA;;AACA,MAAIH,SAAS,CAAb,MAAA,EAAsB;AAClBI,IAAAA,OAAO,GAAGJ,SAAS,CAAnBI,GAAUJ,EAAVI;AADJ,GAAA,MAEO;AACHA,IAAAA,OAAO,GAAG,IAAVA,OAAU,EAAVA;AACH;;AACDA,EAAAA,OAAO,CAAPA,IAAAA,GAAAA,IAAAA;AACAN,EAAAA,OAAO,CAAPA,OAAO,CAAPA;EAGJ;AACA;;;AACA,SAAA,OAAA,GAAmB;AACf,OAAA,IAAA,GAAA,IAAA;EAGJ;AACA;;;AACAO,OAAO,CAAPA,SAAAA,CAAAA,IAAAA,GAAyB,YAAY;AACjC,MAAI;AACA,SAAA,IAAA,CAAA,IAAA;AADJ,GAAA,CAEE,OAAA,KAAA,EAAc;AACZ,QAAIC,IAAI,CAAR,OAAA,EAAkB;AACd;AACA;AACA;AACAA,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,KAAAA;AAJJ,KAAA,MAKO;AACH;AACA;AACA;AACAL,MAAAA,aAAa,CAAbA,IAAAA,CAAAA,KAAAA;AACAC,MAAAA,iBAAiB;AACpB;AAdL,GAAA,SAeU;AACN,SAAA,IAAA,GAAA,IAAA;AACAF,IAAAA,SAAS,CAACA,SAAS,CAAnBA,MAAS,CAATA,GAAAA,IAAAA;AACH;AAnBLK,CAAAA","sourcesContent":["\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n"],"file":"browser-asap.js"}