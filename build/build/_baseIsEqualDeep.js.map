{"version":3,"sources":["../node_modules/lodash/_baseIsEqualDeep.js"],"names":["Stack","require","equalArrays","equalByTag","equalObjects","getTag","isArray","isBuffer","isTypedArray","COMPARE_PARTIAL_FLAG","argsTag","arrayTag","objectTag","objectProto","Object","hasOwnProperty","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","stack","bitmask","objIsWrapped","othIsWrapped","objUnwrapped","object","othUnwrapped","other","equalFunc","module"],"mappings":"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","sourcesContent":["var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n"],"file":"_baseIsEqualDeep.js"}