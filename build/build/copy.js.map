{"version":3,"sources":["../node_modules/copy-concurrently/copy.js"],"names":["module","nodeFs","require","path","validate","stockWriteStreamAtomic","mkdirp","rimraf","isWindows","RunQueue","extend","Object","args","reject","resolve","opts","Promise","global","fs","promisify","rimrafAsync","queue","maxConcurrency","err","passThroughError","remove","unlink","chmod","stat","lstat","rmdir","readdir","glob","eexists","cmdOpts","fromStat","recurseDir","copyFile","eunsupported","from","recurseWith","chown","mkdirpAsync","mode","getuid","process","files","readlink","symlink","absoluteDest","relativeDest","linkFrom","isDir","destStat","type","writeStreamAtomic","writeOpts","uid","gid","errored"],"mappings":"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","sourcesContent":["'use strict'\nmodule.exports = copy\nmodule.exports.item = copyItem\nmodule.exports.recurse = recurseDir\nmodule.exports.symlink = copySymlink\nmodule.exports.file = copyFile\n\nvar nodeFs = require('fs')\nvar path = require('path')\nvar validate = require('aproba')\nvar stockWriteStreamAtomic = require('fs-write-stream-atomic')\nvar mkdirp = require('mkdirp')\nvar rimraf = require('rimraf')\nvar isWindows = require('./is-windows')\nvar RunQueue = require('run-queue')\nvar extend = Object.assign || require('util')._extend\n\nfunction promisify (Promise, fn) {\n  return function () {\n    var args = [].slice.call(arguments)\n    return new Promise(function (resolve, reject) {\n      return fn.apply(null, args.concat(function (err, value) {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(value)\n        }\n      }))\n    })\n  }\n}\n\nfunction copy (from, to, opts) {\n  validate('SSO|SS', arguments)\n  opts = extend({}, opts || {})\n\n  var Promise = opts.Promise || global.Promise\n  var fs = opts.fs || nodeFs\n\n  if (opts.isWindows == null) opts.isWindows = isWindows\n  if (!opts.Promise) opts.Promise = Promise\n  if (!opts.fs) opts.fs = fs\n  if (!opts.recurseWith) opts.recurseWith = copyItem\n  if (!opts.lstat) opts.lstat = promisify(opts.Promise, fs.lstat)\n  if (!opts.stat) opts.stat = promisify(opts.Promise, fs.stat)\n  if (!opts.chown) opts.chown = promisify(opts.Promise, fs.chown)\n  if (!opts.readdir) opts.readdir = promisify(opts.Promise, fs.readdir)\n  if (!opts.readlink) opts.readlink = promisify(opts.Promise, fs.readlink)\n  if (!opts.symlink) opts.symlink = promisify(opts.Promise, fs.symlink)\n  if (!opts.chmod) opts.chmod = promisify(opts.Promise, fs.chmod)\n\n  opts.top = from\n  opts.mkdirpAsync = promisify(opts.Promise, mkdirp)\n  var rimrafAsync = promisify(opts.Promise, rimraf)\n\n  var queue = new RunQueue({\n    maxConcurrency: opts.maxConcurrency,\n    Promise: Promise\n  })\n  opts.queue = queue\n\n  queue.add(0, copyItem, [from, to, opts])\n\n  return queue.run().catch(function (err) {\n    // if the target already exists don't clobber it\n    if (err.code === 'EEXIST' || err.code === 'EPERM') {\n      return passThroughError()\n    } else {\n      return remove(to).then(passThroughError, passThroughError)\n    }\n    function passThroughError () {\n      return Promise.reject(err)\n    }\n  })\n\n  function remove (target) {\n    var opts = {\n      unlink: fs.unlink,\n      chmod: fs.chmod,\n      stat: fs.stat,\n      lstat: fs.lstat,\n      rmdir: fs.rmdir,\n      readdir: fs.readdir,\n      glob: false\n    }\n    return rimrafAsync(target, opts)\n  }\n}\n\nfunction copyItem (from, to, opts) {\n  validate('SSO', [from, to, opts])\n  var fs = opts.fs || nodeFs\n  var Promise = opts.Promise || global.Promise\n  var lstat = opts.lstat || promisify(Promise, fs.lstat)\n\n  return lstat(to).then(function () {\n    return Promise.reject(eexists(from, to))\n  }, function (err) {\n    if (err && err.code !== 'ENOENT') return Promise.reject(err)\n    return lstat(from)\n  }).then(function (fromStat) {\n    var cmdOpts = extend(extend({}, opts), fromStat)\n    if (fromStat.isDirectory()) {\n      return recurseDir(from, to, cmdOpts)\n    } else if (fromStat.isSymbolicLink()) {\n      opts.queue.add(1, copySymlink, [from, to, cmdOpts])\n    } else if (fromStat.isFile()) {\n      return copyFile(from, to, cmdOpts)\n    } else if (fromStat.isBlockDevice()) {\n      return Promise.reject(eunsupported(from + \" is a block device, and we don't know how to copy those.\"))\n    } else if (fromStat.isCharacterDevice()) {\n      return Promise.reject(eunsupported(from + \" is a character device, and we don't know how to copy those.\"))\n    } else if (fromStat.isFIFO()) {\n      return Promise.reject(eunsupported(from + \" is a FIFO, and we don't know how to copy those.\"))\n    } else if (fromStat.isSocket()) {\n      return Promise.reject(eunsupported(from + \" is a socket, and we don't know how to copy those.\"))\n    } else {\n      return Promise.reject(eunsupported(\"We can't tell what \" + from + \" is and so we can't copy it.\"))\n    }\n  })\n}\n\nfunction recurseDir (from, to, opts) {\n  validate('SSO', [from, to, opts])\n  var recurseWith = opts.recurseWith || copyItem\n  var fs = opts.fs || nodeFs\n  var chown = opts.chown || promisify(Promise, fs.chown)\n  var readdir = opts.readdir || promisify(Promise, fs.readdir)\n  var mkdirpAsync = opts.mkdirpAsync || promisify(Promise, mkdirp)\n\n  return mkdirpAsync(to, {fs: fs, mode: opts.mode}).then(function () {\n    var getuid = opts.getuid || process.getuid\n    if (getuid && opts.uid != null && getuid() === 0) {\n      return chown(to, opts.uid, opts.gid)\n    }\n  }).then(function () {\n    return readdir(from)\n  }).then(function (files) {\n    files.forEach(function (file) {\n      opts.queue.add(0, recurseWith, [path.join(from, file), path.join(to, file), opts])\n    })\n  })\n}\n\nfunction copySymlink (from, to, opts) {\n  validate('SSO', [from, to, opts])\n  var fs = opts.fs || nodeFs\n  var readlink = opts.readlink || promisify(Promise, fs.readlink)\n  var stat = opts.stat || promisify(Promise, fs.symlink)\n  var symlink = opts.symlink || promisify(Promise, fs.symlink)\n  var Promise = opts.Promise || global.Promise\n\n  return readlink(from).then(function (fromDest) {\n    var absoluteDest = path.resolve(path.dirname(from), fromDest)\n    // Treat absolute paths that are inside the tree we're\n    // copying as relative. This necessary to properly support junctions\n    // on windows (which are always absolute) but is also DWIM with symlinks.\n    var relativeDest = path.relative(opts.top, absoluteDest)\n    var linkFrom = relativeDest.substr(0, 2) === '..' ? fromDest : path.relative(path.dirname(from), absoluteDest)\n    if (opts.isWindows) {\n      return stat(absoluteDest).catch(function () { return null }).then(function (destStat) {\n        var isDir = destStat && destStat.isDirectory()\n        var type = isDir ? 'dir' : 'file'\n        return symlink(linkFrom, to, type).catch(function (err) {\n          if (type === 'dir') {\n            return symlink(linkFrom, to, 'junction')\n          } else {\n            return Promise.reject(err)\n          }\n        })\n      })\n    } else {\n      return symlink(linkFrom, to)\n    }\n  })\n}\n\nfunction copyFile (from, to, opts) {\n  validate('SSO', [from, to, opts])\n  var fs = opts.fs || nodeFs\n  var writeStreamAtomic = opts.writeStreamAtomic || stockWriteStreamAtomic\n  var Promise = opts.Promise || global.Promise\n  var chmod = opts.chmod || promisify(Promise, fs.chmod)\n\n  var writeOpts = {}\n  var getuid = opts.getuid || process.getuid\n  if (getuid && opts.uid != null && getuid() === 0) {\n    writeOpts.chown = {\n      uid: opts.uid,\n      gid: opts.gid\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    var errored = false\n    function onError (err) {\n      errored = true\n      reject(err)\n    }\n    fs.createReadStream(from)\n      .once('error', onError)\n      .pipe(writeStreamAtomic(to, writeOpts))\n      .once('error', onError)\n      .once('close', function () {\n        if (errored) return\n        if (opts.mode != null) {\n          resolve(chmod(to, opts.mode))\n        } else {\n          resolve()\n        }\n      })\n  })\n}\n\nfunction eexists (from, to) {\n  var err = new Error('Could not move ' + from + ' to ' + to + ': destination already exists.')\n  err.code = 'EEXIST'\n  return err\n}\n\nfunction eunsupported (msg) {\n  var err = new Error(msg)\n  err.code = 'EUNSUPPORTED'\n  return err\n}\n"],"file":"copy.js"}