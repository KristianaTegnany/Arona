{"version":3,"sources":["../node_modules/semver/semver.js"],"names":["exports","module","process","debug","args","Array","console","MAX_LENGTH","MAX_SAFE_INTEGER","Number","MAX_SAFE_COMPONENT_LENGTH","re","src","t","R","tok","tildeTrimReplace","caretTrimReplace","comparatorTrimReplace","i","options","loose","includePrerelease","version","r","v","parse","s","m","num","SemVer","other","compareIdentifiers","a","b","isNaN","identifier","eq","v1","v2","prefix","defaultResult","key","numeric","anum","bnum","compare","versionA","versionB","neq","gt","gte","lt","lte","comp","ANY","Comparator","cmp","rangeTmp","satisfies","sameDirectionIncreasing","sameDirectionDecreasing","sameSemVer","differentDirectionsInclusive","oppositeDirectionsLessThan","oppositeDirectionsGreaterThan","range","c","Range","comps","hr","compRe","set","parseComparator","isSatisfiable","thisComparator","result","remainingComparators","comparators","testComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","id","replaceTilde","isX","ret","replaceCaret","M","replaceXRange","xM","xm","xp","anyX","gtlt","pr","p","from","to","testSet","allowed","max","maxSV","rangeObj","versions","min","minSV","minver","compver","comparator","outside","gtfn","ltefn","ltfn","ecomp","high","low","parsed","r1","r2","String","match","next"],"mappings":"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","sourcesContent":["exports = module.exports = SemVer\n\nvar debug\n/* istanbul ignore next */\nif (typeof process === 'object' &&\n    process.env &&\n    process.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0)\n    args.unshift('SEMVER')\n    console.log.apply(console, args)\n  }\n} else {\n  debug = function () {}\n}\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0'\n\nvar MAX_LENGTH = 256\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16\n\n// The actual regexps go on exports.re\nvar re = exports.re = []\nvar src = exports.src = []\nvar t = exports.tokens = {}\nvar R = 0\n\nfunction tok (n) {\n  t[n] = R++\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ntok('NUMERICIDENTIFIER')\nsrc[t.NUMERICIDENTIFIER] = '0|[1-9]\\\\d*'\ntok('NUMERICIDENTIFIERLOOSE')\nsrc[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+'\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ntok('NONNUMERICIDENTIFIER')\nsrc[t.NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ntok('MAINVERSION')\nsrc[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[t.NUMERICIDENTIFIER] + ')'\n\ntok('MAINVERSIONLOOSE')\nsrc[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ntok('PRERELEASEIDENTIFIER')\nsrc[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] +\n                            '|' + src[t.NONNUMERICIDENTIFIER] + ')'\n\ntok('PRERELEASEIDENTIFIERLOOSE')\nsrc[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[t.NONNUMERICIDENTIFIER] + ')'\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ntok('PRERELEASE')\nsrc[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))'\n\ntok('PRERELEASELOOSE')\nsrc[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ntok('BUILDIDENTIFIER')\nsrc[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+'\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ntok('BUILD')\nsrc[t.BUILD] = '(?:\\\\+(' + src[t.BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[t.BUILDIDENTIFIER] + ')*))'\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ntok('FULL')\ntok('FULLPLAIN')\nsrc[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] +\n                  src[t.PRERELEASE] + '?' +\n                  src[t.BUILD] + '?'\n\nsrc[t.FULL] = '^' + src[t.FULLPLAIN] + '$'\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ntok('LOOSEPLAIN')\nsrc[t.LOOSEPLAIN] = '[v=\\\\s]*' + src[t.MAINVERSIONLOOSE] +\n                  src[t.PRERELEASELOOSE] + '?' +\n                  src[t.BUILD] + '?'\n\ntok('LOOSE')\nsrc[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$'\n\ntok('GTLT')\nsrc[t.GTLT] = '((?:<|>)?=?)'\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ntok('XRANGEIDENTIFIERLOOSE')\nsrc[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*'\ntok('XRANGEIDENTIFIER')\nsrc[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\\\*'\n\ntok('XRANGEPLAIN')\nsrc[t.XRANGEPLAIN] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[t.PRERELEASE] + ')?' +\n                   src[t.BUILD] + '?' +\n                   ')?)?'\n\ntok('XRANGEPLAINLOOSE')\nsrc[t.XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[t.PRERELEASELOOSE] + ')?' +\n                        src[t.BUILD] + '?' +\n                        ')?)?'\n\ntok('XRANGE')\nsrc[t.XRANGE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAIN] + '$'\ntok('XRANGELOOSE')\nsrc[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAINLOOSE] + '$'\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ntok('COERCE')\nsrc[t.COERCE] = '(^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])'\ntok('COERCERTL')\nre[t.COERCERTL] = new RegExp(src[t.COERCE], 'g')\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ntok('LONETILDE')\nsrc[t.LONETILDE] = '(?:~>?)'\n\ntok('TILDETRIM')\nsrc[t.TILDETRIM] = '(\\\\s*)' + src[t.LONETILDE] + '\\\\s+'\nre[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g')\nvar tildeTrimReplace = '$1~'\n\ntok('TILDE')\nsrc[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$'\ntok('TILDELOOSE')\nsrc[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ntok('LONECARET')\nsrc[t.LONECARET] = '(?:\\\\^)'\n\ntok('CARETTRIM')\nsrc[t.CARETTRIM] = '(\\\\s*)' + src[t.LONECARET] + '\\\\s+'\nre[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g')\nvar caretTrimReplace = '$1^'\n\ntok('CARET')\nsrc[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$'\ntok('CARETLOOSE')\nsrc[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ntok('COMPARATORLOOSE')\nsrc[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + ')$|^$'\ntok('COMPARATOR')\nsrc[t.COMPARATOR] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.FULLPLAIN] + ')$|^$'\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ntok('COMPARATORTRIM')\nsrc[t.COMPARATORTRIM] = '(\\\\s*)' + src[t.GTLT] +\n                      '\\\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'\n\n// this one has to use the /g flag\nre[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g')\nvar comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ntok('HYPHENRANGE')\nsrc[t.HYPHENRANGE] = '^\\\\s*(' + src[t.XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[t.XRANGEPLAIN] + ')' +\n                   '\\\\s*$'\n\ntok('HYPHENRANGELOOSE')\nsrc[t.HYPHENRANGELOOSE] = '^\\\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[t.XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$'\n\n// Star ranges basically just allow anything at all.\ntok('STAR')\nsrc[t.STAR] = '(<|>)?=?\\\\s*\\\\*'\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i])\n  if (!re[i]) {\n    re[i] = new RegExp(src[i])\n  }\n}\n\nexports.parse = parse\nfunction parse (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  var r = options.loose ? re[t.LOOSE] : re[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nexports.valid = valid\nfunction valid (version, options) {\n  var v = parse(version, options)\n  return v ? v.version : null\n}\n\nexports.clean = clean\nfunction clean (version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\n\nexports.SemVer = SemVer\n\nfunction SemVer (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version\n    } else {\n      version = version.version\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options)\n  }\n\n  debug('SemVer', version, options)\n  this.options = options\n  this.loose = !!options.loose\n\n  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  this.raw = version\n\n  // these are actually numbers\n  this.major = +m[1]\n  this.minor = +m[2]\n  this.patch = +m[3]\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version')\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version')\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version')\n  }\n\n  // numberify any prerelease numeric ids\n  if (!m[4]) {\n    this.prerelease = []\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num\n        }\n      }\n      return id\n    })\n  }\n\n  this.build = m[5] ? m[5].split('.') : []\n  this.format()\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.')\n  }\n  return this.version\n}\n\nSemVer.prototype.toString = function () {\n  return this.version\n}\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other)\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return this.compareMain(other) || this.comparePre(other)\n}\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch)\n}\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0\n  }\n\n  var i = 0\n  do {\n    var a = this.prerelease[i]\n    var b = other.prerelease[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\nSemVer.prototype.compareBuild = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  var i = 0\n  do {\n    var a = this.build[i]\n    var b = other.build[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor = 0\n      this.major++\n      this.inc('pre', identifier)\n      break\n    case 'preminor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor++\n      this.inc('pre', identifier)\n      break\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0\n      this.inc('patch', identifier)\n      this.inc('pre', identifier)\n      break\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier)\n      }\n      this.inc('pre', identifier)\n      break\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0) {\n        this.major++\n      }\n      this.minor = 0\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++\n      }\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++\n      }\n      this.prerelease = []\n      break\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0]\n      } else {\n        var i = this.prerelease.length\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++\n            i = -2\n          }\n        }\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0)\n        }\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0]\n          }\n        } else {\n          this.prerelease = [identifier, 0]\n        }\n      }\n      break\n\n    default:\n      throw new Error('invalid increment argument: ' + release)\n  }\n  this.format()\n  this.raw = this.version\n  return this\n}\n\nexports.inc = inc\nfunction inc (version, release, loose, identifier) {\n  if (typeof (loose) === 'string') {\n    identifier = loose\n    loose = undefined\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\n\nexports.diff = diff\nfunction diff (version1, version2) {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    var v1 = parse(version1)\n    var v2 = parse(version2)\n    var prefix = ''\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre'\n      var defaultResult = 'prerelease'\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers\n\nvar numeric = /^[0-9]+$/\nfunction compareIdentifiers (a, b) {\n  var anum = numeric.test(a)\n  var bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers\nfunction rcompareIdentifiers (a, b) {\n  return compareIdentifiers(b, a)\n}\n\nexports.major = major\nfunction major (a, loose) {\n  return new SemVer(a, loose).major\n}\n\nexports.minor = minor\nfunction minor (a, loose) {\n  return new SemVer(a, loose).minor\n}\n\nexports.patch = patch\nfunction patch (a, loose) {\n  return new SemVer(a, loose).patch\n}\n\nexports.compare = compare\nfunction compare (a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose))\n}\n\nexports.compareLoose = compareLoose\nfunction compareLoose (a, b) {\n  return compare(a, b, true)\n}\n\nexports.compareBuild = compareBuild\nfunction compareBuild (a, b, loose) {\n  var versionA = new SemVer(a, loose)\n  var versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\n\nexports.rcompare = rcompare\nfunction rcompare (a, b, loose) {\n  return compare(b, a, loose)\n}\n\nexports.sort = sort\nfunction sort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(a, b, loose)\n  })\n}\n\nexports.rsort = rsort\nfunction rsort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(b, a, loose)\n  })\n}\n\nexports.gt = gt\nfunction gt (a, b, loose) {\n  return compare(a, b, loose) > 0\n}\n\nexports.lt = lt\nfunction lt (a, b, loose) {\n  return compare(a, b, loose) < 0\n}\n\nexports.eq = eq\nfunction eq (a, b, loose) {\n  return compare(a, b, loose) === 0\n}\n\nexports.neq = neq\nfunction neq (a, b, loose) {\n  return compare(a, b, loose) !== 0\n}\n\nexports.gte = gte\nfunction gte (a, b, loose) {\n  return compare(a, b, loose) >= 0\n}\n\nexports.lte = lte\nfunction lte (a, b, loose) {\n  return compare(a, b, loose) <= 0\n}\n\nexports.cmp = cmp\nfunction cmp (a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError('Invalid operator: ' + op)\n  }\n}\n\nexports.Comparator = Comparator\nfunction Comparator (comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp\n    } else {\n      comp = comp.value\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options)\n  }\n\n  debug('comparator', comp, options)\n  this.options = options\n  this.loose = !!options.loose\n  this.parse(comp)\n\n  if (this.semver === ANY) {\n    this.value = ''\n  } else {\n    this.value = this.operator + this.semver.version\n  }\n\n  debug('comp', this)\n}\n\nvar ANY = {}\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n  var m = comp.match(r)\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp)\n  }\n\n  this.operator = m[1] !== undefined ? m[1] : ''\n  if (this.operator === '=') {\n    this.operator = ''\n  }\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2]) {\n    this.semver = ANY\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose)\n  }\n}\n\nComparator.prototype.toString = function () {\n  return this.value\n}\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose)\n\n  if (this.semver === ANY || version === ANY) {\n    return true\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options)\n    } catch (er) {\n      return false\n    }\n  }\n\n  return cmp(version, this.operator, this.semver, this.options)\n}\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required')\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  var rangeTmp\n\n  if (this.operator === '') {\n    if (this.value === '') {\n      return true\n    }\n    rangeTmp = new Range(comp.value, options)\n    return satisfies(this.value, rangeTmp, options)\n  } else if (comp.operator === '') {\n    if (comp.value === '') {\n      return true\n    }\n    rangeTmp = new Range(this.value, options)\n    return satisfies(comp.semver, rangeTmp, options)\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>')\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<')\n  var sameSemVer = this.semver.version === comp.semver.version\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=')\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'))\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'))\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan\n}\n\nexports.Range = Range\nfunction Range (range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range\n    } else {\n      return new Range(range.raw, options)\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options)\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options)\n  }\n\n  this.options = options\n  this.loose = !!options.loose\n  this.includePrerelease = !!options.includePrerelease\n\n  // First, split based on boolean or ||\n  this.raw = range\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n    return this.parseRange(range.trim())\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length\n  })\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range)\n  }\n\n  this.format()\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim()\n  }).join('||').trim()\n  return this.range\n}\n\nRange.prototype.toString = function () {\n  return this.range\n}\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose\n  range = range.trim()\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n  range = range.replace(hr, hyphenReplace)\n  debug('hyphen replace', range)\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n  debug('comparator trim', range, re[t.COMPARATORTRIM])\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ')\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options)\n  }, this).join(' ').split(/\\s+/)\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe)\n    })\n  }\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options)\n  }, this)\n\n  return set\n}\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required')\n  }\n\n  return this.set.some(function (thisComparators) {\n    return (\n      isSatisfiable(thisComparators, options) &&\n      range.set.some(function (rangeComparators) {\n        return (\n          isSatisfiable(rangeComparators, options) &&\n          thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options)\n            })\n          })\n        )\n      })\n    )\n  })\n}\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nfunction isSatisfiable (comparators, options) {\n  var result = true\n  var remainingComparators = comparators.slice()\n  var testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators\nfunction toComparators (range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value\n    }).join(' ').trim().split(' ')\n  })\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator (comp, options) {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nfunction isX (id) {\n  return !id || id.toLowerCase() === 'x' || id === '*'\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options)\n  }).join(' ')\n}\n\nfunction replaceTilde (comp, options) {\n  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options)\n  }).join(' ')\n}\n\nfunction replaceCaret (comp, options) {\n  debug('caret', comp, options)\n  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nfunction replaceXRanges (comp, options) {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nfunction replaceXRange (comp, options) {\n  comp = comp.trim()\n  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    var xM = isX(M)\n    var xm = xM || isX(m)\n    var xp = xm || isX(p)\n    var anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p + pr\n    } else if (xm) {\n      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0' + pr +\n        ' <' + M + '.' + (+m + 1) + '.0' + pr\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars (comp, options) {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0'\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0'\n  } else {\n    from = '>=' + from\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0'\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0'\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr\n  } else {\n    to = '<=' + to\n  }\n\n  return (from + ' ' + to).trim()\n}\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options)\n    } catch (er) {\n      return false\n    }\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction testSet (set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n\nexports.satisfies = satisfies\nfunction satisfies (version, range, options) {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\n\nexports.maxSatisfying = maxSatisfying\nfunction maxSatisfying (versions, range, options) {\n  var max = null\n  var maxSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\n\nexports.minSatisfying = minSatisfying\nfunction minSatisfying (versions, range, options) {\n  var min = null\n  var minSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\n\nexports.minVersion = minVersion\nfunction minVersion (range, loose) {\n  range = new Range(range, loose)\n\n  var minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\n\nexports.validRange = validRange\nfunction validRange (range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr\nfunction ltr (version, range, options) {\n  return outside(version, range, '<', options)\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr\nfunction gtr (version, range, options) {\n  return outside(version, range, '>', options)\n}\n\nexports.outside = outside\nfunction outside (version, range, hilo, options) {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  var gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    var high = null\n    var low = null\n\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nexports.prerelease = prerelease\nfunction prerelease (version, options) {\n  var parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\n\nexports.intersects = intersects\nfunction intersects (r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce\nfunction coerce (version, options) {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  var match = null\n  if (!options.rtl) {\n    match = version.match(re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    var next\n    while ((next = re[t.COERCERTL].exec(version)) &&\n      (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n          next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    re[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(match[2] +\n    '.' + (match[3] || '0') +\n    '.' + (match[4] || '0'), options)\n}\n"],"file":"semver.js"}