{"version":3,"sources":["../node_modules/flat-cache/cache.js"],"names":["path","require","fs","utils","del","writeJSON","cache","load","me","cacheDir","loadFile","dir","fName","all","keys","Object","setKey","removeKey","getKey","_prune","obj","save","removeCacheFile","destroy","module","create","createFromFile","clearCacheById","filePath","clearAll"],"mappings":"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","sourcesContent":["var path = require( 'path' );\nvar fs = require( 'fs' );\nvar utils = require( './utils' );\nvar del = require( './del' );\nvar writeJSON = utils.writeJSON;\n\nvar cache = {\n  /**\n   * Load a cache identified by the given Id. If the element does not exists, then initialize an empty\n   * cache storage. If specified `cacheDir` will be used as the directory to persist the data to. If omitted\n   * then the cache module directory `./cache` will be used instead\n   *\n   * @method load\n   * @param docId {String} the id of the cache, would also be used as the name of the file cache\n   * @param [cacheDir] {String} directory for the cache entry\n   */\n  load: function ( docId, cacheDir ) {\n    var me = this;\n\n    me._visited = { };\n    me._persisted = { };\n    me._pathToFile = cacheDir ? path.resolve( cacheDir, docId ) : path.resolve( __dirname, './.cache/', docId );\n\n    if ( fs.existsSync( me._pathToFile ) ) {\n      me._persisted = utils.tryParse( me._pathToFile, { } );\n    }\n  },\n\n  /**\n   * Load the cache from the provided file\n   * @method loadFile\n   * @param  {String} pathToFile the path to the file containing the info for the cache\n   */\n  loadFile: function ( pathToFile ) {\n    var me = this;\n    var dir = path.dirname( pathToFile );\n    var fName = path.basename( pathToFile );\n\n    me.load( fName, dir );\n  },\n\n  /**\n   * Returns the entire persisted object\n   * @method all\n   * @returns {*}\n   */\n  all: function () {\n    return this._persisted;\n  },\n\n  keys: function () {\n    return Object.keys( this._persisted );\n  },\n  /**\n   * sets a key to a given value\n   * @method setKey\n   * @param key {string} the key to set\n   * @param value {object} the value of the key. Could be any object that can be serialized with JSON.stringify\n   */\n  setKey: function ( key, value ) {\n    this._visited[ key ] = true;\n    this._persisted[ key ] = value;\n  },\n  /**\n   * remove a given key from the cache\n   * @method removeKey\n   * @param key {String} the key to remove from the object\n   */\n  removeKey: function ( key ) {\n    delete this._visited[ key ]; // esfmt-ignore-line\n    delete this._persisted[ key ]; // esfmt-ignore-line\n  },\n  /**\n   * Return the value of the provided key\n   * @method getKey\n   * @param key {String} the name of the key to retrieve\n   * @returns {*} the value from the key\n   */\n  getKey: function ( key ) {\n    this._visited[ key ] = true;\n    return this._persisted[ key ];\n  },\n\n  /**\n   * Remove keys that were not accessed/set since the\n   * last time the `prune` method was called.\n   * @method _prune\n   * @private\n   */\n  _prune: function () {\n    var me = this;\n    var obj = { };\n\n    var keys = Object.keys( me._visited );\n\n    // no keys visited for either get or set value\n    if ( keys.length === 0 ) {\n      return;\n    }\n\n    keys.forEach( function ( key ) {\n      obj[ key ] = me._persisted[ key ];\n    } );\n\n    me._visited = { };\n    me._persisted = obj;\n  },\n\n  /**\n   * Save the state of the cache identified by the docId to disk\n   * as a JSON structure\n   * @param [noPrune=false] {Boolean} whether to remove from cache the non visited files\n   * @method save\n   */\n  save: function ( noPrune ) {\n    var me = this;\n\n    (!noPrune) && me._prune();\n    writeJSON( me._pathToFile, me._persisted );\n  },\n\n  /**\n   * remove the file where the cache is persisted\n   * @method removeCacheFile\n   * @return {Boolean} true or false if the file was successfully deleted\n   */\n  removeCacheFile: function () {\n    return del( this._pathToFile );\n  },\n  /**\n   * Destroy the file cache and cache content.\n   * @method destroy\n   */\n  destroy: function () {\n    var me = this;\n    me._visited = { };\n    me._persisted = { };\n\n    me.removeCacheFile();\n  }\n};\n\nmodule.exports = {\n  /**\n   * Alias for create. Should be considered depreacted. Will be removed in next releases\n   *\n   * @method load\n   * @param docId {String} the id of the cache, would also be used as the name of the file cache\n   * @param [cacheDir] {String} directory for the cache entry\n   * @returns {cache} cache instance\n   */\n  load: function ( docId, cacheDir ) {\n    return this.create( docId, cacheDir );\n  },\n\n  /**\n  * Load a cache identified by the given Id. If the element does not exists, then initialize an empty\n  * cache storage.\n  *\n  * @method create\n  * @param docId {String} the id of the cache, would also be used as the name of the file cache\n  * @param [cacheDir] {String} directory for the cache entry\n  * @returns {cache} cache instance\n  */\n  create: function ( docId, cacheDir ) {\n    var obj = Object.create( cache );\n    obj.load( docId, cacheDir );\n    return obj;\n  },\n\n  createFromFile: function ( filePath ) {\n    var obj = Object.create( cache );\n    obj.loadFile( filePath );\n    return obj;\n  },\n  /**\n   * Clear the cache identified by the given id. Caches stored in a different cache directory can be deleted directly\n   *\n   * @method clearCache\n   * @param docId {String} the id of the cache, would also be used as the name of the file cache\n   * @param cacheDir {String} the directory where the cache file was written\n   * @returns {Boolean} true if the cache folder was deleted. False otherwise\n   */\n  clearCacheById: function ( docId, cacheDir ) {\n    var filePath = cacheDir ? path.resolve( cacheDir, docId ) : path.resolve( __dirname, './.cache/', docId );\n    return del( filePath );\n  },\n  /**\n   * Remove all cache stored in the cache directory\n   * @method clearAll\n   * @returns {Boolean} true if the cache folder was deleted. False otherwise\n   */\n  clearAll: function ( cacheDir ) {\n    var filePath = cacheDir ? path.resolve( cacheDir ) : path.resolve( __dirname, './.cache/' );\n    return del( filePath );\n  }\n};\n"],"file":"cache.js"}