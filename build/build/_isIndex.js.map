{"version":3,"sources":["../node_modules/lodash/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","type","length","value","module"],"mappings":";;;;AAAA;AACA,IAAIA,gBAAgB,GAApB,gBAAA;AAEA;;AACA,IAAIC,QAAQ,GAAZ,kBAAA;AAEA;;;;;;;;;AAQA,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAAgC;AAC9B,MAAIC,IAAI,WAAR,KAAQ,CAAR;;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAANA,IAAAA,GAAAA,gBAAAA,GAATA,MAAAA;AAEA,SAAO,CAAC,CAAD,MAAA,KACJD,IAAI,IAAJA,QAAAA,IACEA,IAAI,IAAJA,QAAAA,IAAoBD,QAAQ,CAARA,IAAAA,CAFlB,KAEkBA,CAFlB,KAGAG,KAAK,GAAG,CAARA,CAHA,IAGcA,KAAK,GAALA,CAAAA,IAAdA,CAHA,IAGgCA,KAAK,GAH5C,MAAA;AAID;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,OAAAA","sourcesContent":["/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n"],"file":"_isIndex.js"}