{"version":3,"sources":["../node_modules/lodash/_equalByTag.js"],"names":["Symbol","require","Uint8Array","eq","equalArrays","mapToArray","setToArray","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","symbolValueOf","object","other","equalFunc","convert","isPartial","bitmask","stacked","stack","result","module"],"mappings":"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","sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"],"file":"_equalByTag.js"}