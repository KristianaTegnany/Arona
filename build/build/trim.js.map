{"version":3,"sources":["../node_modules/lodash/trim.js"],"names":["baseToString","require","castSlice","charsEndIndex","charsStartIndex","stringToArray","toString","reTrim","string","guard","chars","strSymbols","chrSymbols","start","end","module"],"mappings":";;AAAA,IAAIA,YAAY,GAAGC,OAAO,CAA1B,iBAA0B,CAA1B;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,cACuB,CADvB;AAAA,IAEIE,aAAa,GAAGF,OAAO,CAF3B,kBAE2B,CAF3B;AAAA,IAGIG,eAAe,GAAGH,OAAO,CAH7B,oBAG6B,CAH7B;AAAA,IAIII,aAAa,GAAGJ,OAAO,CAJ3B,kBAI2B,CAJ3B;AAAA,IAKIK,QAAQ,GAAGL,OAAO,CALtB,YAKsB,CALtB;AAOA;;;AACA,IAAIM,MAAM,GAAV,YAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAA,IAAA,CAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAoC;AAClCC,EAAAA,MAAM,GAAGF,QAAQ,CAAjBE,MAAiB,CAAjBA;;AACA,MAAIA,MAAM,KAAKC,KAAK,IAAIC,KAAK,KAA7B,SAAU,CAAV,EAA8C;AAC5C,WAAOF,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAP,EAAOA,CAAP;AACD;;AACD,MAAI,CAAA,MAAA,IAAW,EAAEE,KAAK,GAAGV,YAAY,CAArC,KAAqC,CAAtB,CAAf,EAA+C;AAC7C,WAAA,MAAA;AACD;;AACD,MAAIW,UAAU,GAAGN,aAAa,CAA9B,MAA8B,CAA9B;AAAA,MACIO,UAAU,GAAGP,aAAa,CAD9B,KAC8B,CAD9B;AAAA,MAEIQ,KAAK,GAAGT,eAAe,CAAA,UAAA,EAF3B,UAE2B,CAF3B;AAAA,MAGIU,GAAG,GAAGX,aAAa,CAAA,UAAA,EAAbA,UAAa,CAAbA,GAHV,CAAA;AAKA,SAAOD,SAAS,CAAA,UAAA,EAAA,KAAA,EAATA,GAAS,CAATA,CAAAA,IAAAA,CAAP,EAAOA,CAAP;AACD;;AAEDa,MAAM,CAANA,OAAAA,GAAAA,IAAAA","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;\n"],"file":"trim.js"}