{"version":3,"sources":["../node_modules/lodash/_updateWrapDetails.js"],"names":["arrayEach","require","arrayIncludes","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","WRAP_FLIP_FLAG","wrapFlags","value","pair","bitmask","details","module"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAvB,cAAuB,CAAvB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAD3B,kBAC2B,CAD3B;AAGA;;;AACA,IAAIE,cAAc,GAAlB,CAAA;AAAA,IACIC,kBAAkB,GADtB,CAAA;AAAA,IAEIC,eAAe,GAFnB,CAAA;AAAA,IAGIC,qBAAqB,GAHzB,EAAA;AAAA,IAIIC,iBAAiB,GAJrB,EAAA;AAAA,IAKIC,uBAAuB,GAL3B,EAAA;AAAA,IAMIC,aAAa,GANjB,GAAA;AAAA,IAOIC,eAAe,GAPnB,GAAA;AAAA,IAQIC,cAAc,GARlB,GAAA;AAUA;;AACA,IAAIC,SAAS,GAAG,CACd,CAAA,KAAA,EADc,aACd,CADc,EAEd,CAAA,MAAA,EAFc,cAEd,CAFc,EAGd,CAAA,SAAA,EAHc,kBAGd,CAHc,EAId,CAAA,OAAA,EAJc,eAId,CAJc,EAKd,CAAA,YAAA,EALc,qBAKd,CALc,EAMd,CAAA,MAAA,EANc,cAMd,CANc,EAOd,CAAA,SAAA,EAPc,iBAOd,CAPc,EAQd,CAAA,cAAA,EARc,uBAQd,CARc,EASd,CAAA,OAAA,EATF,eASE,CATc,CAAhB;AAYA;;;;;;;;;AAQA,SAAA,iBAAA,CAAA,OAAA,EAAA,OAAA,EAA6C;AAC3CZ,EAAAA,SAAS,CAAA,SAAA,EAAY,UAAA,IAAA,EAAe;AAClC,QAAIa,KAAK,GAAG,OAAOC,IAAI,CAAvB,CAAuB,CAAvB;;AACA,QAAKC,OAAO,GAAGD,IAAI,CAAf,CAAe,CAAdC,IAAsB,CAACb,aAAa,CAAA,OAAA,EAAzC,KAAyC,CAAzC,EAA2D;AACzDc,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,KAAAA;AACD;AAJHhB,GAAS,CAATA;AAMA,SAAOgB,OAAO,CAAd,IAAOA,EAAP;AACD;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,iBAAAA","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n"],"file":"_updateWrapDetails.js"}