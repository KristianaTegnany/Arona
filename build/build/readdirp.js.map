{"version":3,"sources":["../node_modules/readdirp/readdirp.js"],"names":["fs","require","path","micromatch","toString","Object","obj","errors","readdirResult","directories","files","aborted","paused","isUndefined","api","stream","callback1","callback2","handleError","handleFatalError","allProcessed","opts","statfn","fileProcessed","f","some","filters","isFunction","isString","entryInfo","filter","Array","total","entries","processed","entryInfos","callProcessed","relDir","fullPath","relPath","name","parentDir","fullParentDir","stat","args","setImmediate","readdirRec","callCurrentDirProcessed","processDir","subdirs","ei","isCorrectType","pendingSubdirs","depth","subdir","normalizeFilter","realRoot","module"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fs        =  require('graceful-fs')\n  , path      =  require('path')\n  , micromatch =  require('micromatch').isMatch\n  , toString  =  Object.prototype.toString\n  ;\n\n\n// Standard helpers\nfunction isFunction (obj) {\n  return toString.call(obj) === '[object Function]';\n}\n\nfunction isString (obj) {\n  return toString.call(obj) === '[object String]';\n}\n\nfunction isUndefined (obj) {\n  return obj === void 0;\n}\n\n/**\n * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.\n * @param { Object }   opts     Options to specify root (start directory), filters and recursion depth\n * @param { function } callback1  When callback2 is given calls back for each processed file - function (fileInfo) { ... },\n *                                when callback2 is not given, it behaves like explained in callback2\n * @param { function } callback2  Calls back once all files have been processed with an array of errors and file infos\n *                                function (err, fileInfos) { ... }\n */\nfunction readdir(opts, callback1, callback2) {\n  var stream\n    , handleError\n    , handleFatalError\n    , errors = []\n    , readdirResult = {\n        directories: []\n      , files: []\n    }\n    , fileProcessed\n    , allProcessed\n    , realRoot\n    , aborted = false\n    , paused = false\n    ;\n\n  // If no callbacks were given we will use a streaming interface\n  if (isUndefined(callback1)) {\n    var api          =  require('./stream-api')();\n    stream           =  api.stream;\n    callback1        =  api.processEntry;\n    callback2        =  api.done;\n    handleError      =  api.handleError;\n    handleFatalError =  api.handleFatalError;\n\n    stream.on('close', function () { aborted = true; });\n    stream.on('pause', function () { paused = true; });\n    stream.on('resume', function () { paused = false; });\n  } else {\n    handleError      =  function (err) { errors.push(err); };\n    handleFatalError =  function (err) {\n      handleError(err);\n      allProcessed(errors, null);\n    };\n  }\n\n  if (isUndefined(opts)){\n    handleFatalError(new Error (\n      'Need to pass at least one argument: opts! \\n' +\n      'https://github.com/paulmillr/readdirp#options'\n      )\n    );\n    return stream;\n  }\n\n  opts.root            =  opts.root            || '.';\n  opts.fileFilter      =  opts.fileFilter      || function() { return true; };\n  opts.directoryFilter =  opts.directoryFilter || function() { return true; };\n  opts.depth           =  typeof opts.depth === 'undefined' ? 999999999 : opts.depth;\n  opts.entryType       =  opts.entryType       || 'files';\n\n  var statfn = opts.lstat === true ? fs.lstat.bind(fs) : fs.stat.bind(fs);\n\n  if (isUndefined(callback2)) {\n    fileProcessed = function() { };\n    allProcessed = callback1;\n  } else {\n    fileProcessed = callback1;\n    allProcessed = callback2;\n  }\n\n  function normalizeFilter (filter) {\n\n    if (isUndefined(filter)) return undefined;\n\n    function isNegated (filters) {\n\n      function negated(f) {\n        return f.indexOf('!') === 0;\n      }\n\n      var some = filters.some(negated);\n      if (!some) {\n        return false;\n      } else {\n        if (filters.every(negated)) {\n          return true;\n        } else {\n          // if we detect illegal filters, bail out immediately\n          throw new Error(\n            'Cannot mix negated with non negated glob filters: ' + filters + '\\n' +\n            'https://github.com/paulmillr/readdirp#filters'\n          );\n        }\n      }\n    }\n\n    // Turn all filters into a function\n    if (isFunction(filter)) {\n\n      return filter;\n\n    } else if (isString(filter)) {\n\n      return function (entryInfo) {\n        return micromatch(entryInfo.name, filter.trim());\n      };\n\n    } else if (filter && Array.isArray(filter)) {\n\n      if (filter) filter = filter.map(function (f) {\n        return f.trim();\n      });\n\n      return isNegated(filter) ?\n        // use AND to concat multiple negated filters\n        function (entryInfo) {\n          return filter.every(function (f) {\n            return micromatch(entryInfo.name, f);\n          });\n        }\n        :\n        // use OR to concat multiple inclusive filters\n        function (entryInfo) {\n          return filter.some(function (f) {\n            return micromatch(entryInfo.name, f);\n          });\n        };\n    }\n  }\n\n  function processDir(currentDir, entries, callProcessed) {\n    if (aborted) return;\n    var total = entries.length\n      , processed = 0\n      , entryInfos = []\n      ;\n\n    fs.realpath(currentDir, function(err, realCurrentDir) {\n      if (aborted) return;\n      if (err) {\n        handleError(err);\n        callProcessed(entryInfos);\n        return;\n      }\n\n      var relDir = path.relative(realRoot, realCurrentDir);\n\n      if (entries.length === 0) {\n        callProcessed([]);\n      } else {\n        entries.forEach(function (entry) {\n\n          var fullPath = path.join(realCurrentDir, entry)\n            , relPath  = path.join(relDir, entry);\n\n          statfn(fullPath, function (err, stat) {\n            if (err) {\n              handleError(err);\n            } else {\n              entryInfos.push({\n                  name          :  entry\n                , path          :  relPath   // relative to root\n                , fullPath      :  fullPath\n\n                , parentDir     :  relDir    // relative to root\n                , fullParentDir :  realCurrentDir\n\n                , stat          :  stat\n              });\n            }\n            processed++;\n            if (processed === total) callProcessed(entryInfos);\n          });\n        });\n      }\n    });\n  }\n\n  function readdirRec(currentDir, depth, callCurrentDirProcessed) {\n    var args = arguments;\n    if (aborted) return;\n    if (paused) {\n      setImmediate(function () {\n        readdirRec.apply(null, args);\n      })\n      return;\n    }\n\n    fs.readdir(currentDir, function (err, entries) {\n      if (err) {\n        handleError(err);\n        callCurrentDirProcessed();\n        return;\n      }\n\n      processDir(currentDir, entries, function(entryInfos) {\n\n        var subdirs = entryInfos\n          .filter(function (ei) { return ei.stat.isDirectory() && opts.directoryFilter(ei); });\n\n        subdirs.forEach(function (di) {\n          if(opts.entryType === 'directories' || opts.entryType === 'both' || opts.entryType === 'all') {\n            fileProcessed(di);\n          }\n          readdirResult.directories.push(di);\n        });\n\n        entryInfos\n          .filter(function(ei) {\n            var isCorrectType = opts.entryType === 'all' ?\n              !ei.stat.isDirectory() : ei.stat.isFile() || ei.stat.isSymbolicLink();\n            return isCorrectType && opts.fileFilter(ei);\n          })\n          .forEach(function (fi) {\n            if(opts.entryType === 'files' || opts.entryType === 'both' || opts.entryType === 'all') {\n              fileProcessed(fi);\n            }\n            readdirResult.files.push(fi);\n          });\n\n        var pendingSubdirs = subdirs.length;\n\n        // Be done if no more subfolders exist or we reached the maximum desired depth\n        if(pendingSubdirs === 0 || depth === opts.depth) {\n          callCurrentDirProcessed();\n        } else {\n          // recurse into subdirs, keeping track of which ones are done\n          // and call back once all are processed\n          subdirs.forEach(function (subdir) {\n            readdirRec(subdir.fullPath, depth + 1, function () {\n              pendingSubdirs = pendingSubdirs - 1;\n              if(pendingSubdirs === 0) {\n                callCurrentDirProcessed();\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n\n  // Validate and normalize filters\n  try {\n    opts.fileFilter = normalizeFilter(opts.fileFilter);\n    opts.directoryFilter = normalizeFilter(opts.directoryFilter);\n  } catch (err) {\n    // if we detect illegal filters, bail out immediately\n    handleFatalError(err);\n    return stream;\n  }\n\n  // If filters were valid get on with the show\n  fs.realpath(opts.root, function(err, res) {\n    if (err) {\n      handleFatalError(err);\n      return stream;\n    }\n\n    realRoot = res;\n    readdirRec(opts.root, 0, function () {\n      // All errors are collected into the errors array\n      if (errors.length > 0) {\n        allProcessed(errors, readdirResult);\n      } else {\n        allProcessed(null, readdirResult);\n      }\n    });\n  });\n\n  return stream;\n}\n\nmodule.exports = readdir;\n"],"file":"readdirp.js"}