{"version":3,"sources":["../node_modules/lodash/forOwnRight.js"],"names":["baseForOwnRight","require","castFunction","object","module"],"mappings":";;AAAA,IAAIA,eAAe,GAAGC,OAAO,CAA7B,oBAA6B,CAA7B;AAAA,IACIC,YAAY,GAAGD,OAAO,CAD1B,iBAC0B,CAD1B;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAA,WAAA,CAAA,MAAA,EAAA,QAAA,EAAuC;AACrC,SAAOE,MAAM,IAAIH,eAAe,CAAA,MAAA,EAASE,YAAY,CAArD,QAAqD,CAArB,CAAhC;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,WAAAA","sourcesContent":["var baseForOwnRight = require('./_baseForOwnRight'),\n    castFunction = require('./_castFunction');\n\n/**\n * This method is like `_.forOwn` except that it iterates over properties of\n * `object` in the opposite order.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwnRight(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n */\nfunction forOwnRight(object, iteratee) {\n  return object && baseForOwnRight(object, castFunction(iteratee));\n}\n\nmodule.exports = forOwnRight;\n"],"file":"forOwnRight.js"}