{"version":3,"sources":["../node_modules/lodash/_baseSortedIndexBy.js"],"names":["isSymbol","require","MAX_ARRAY_LENGTH","MAX_ARRAY_INDEX","nativeFloor","Math","nativeMin","value","iteratee","low","high","array","valIsNaN","valIsNull","valIsSymbol","valIsUndefined","mid","computed","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","setLow","retHighest","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,YAAsB,CAAtB;AAEA;;;AACA,IAAIC,gBAAgB,GAApB,UAAA;AAAA,IACIC,eAAe,GAAGD,gBAAgB,GADtC,CAAA;AAGA;;AACA,IAAIE,WAAW,GAAGC,IAAI,CAAtB,KAAA;AAAA,IACIC,SAAS,GAAGD,IAAI,CADpB,GAAA;AAGA;;;;;;;;;;;;;;AAaA,SAAA,iBAAA,CAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,UAAA,EAA+D;AAC7DE,EAAAA,KAAK,GAAGC,QAAQ,CAAhBD,KAAgB,CAAhBA;AAEA,MAAIE,GAAG,GAAP,CAAA;AAAA,MACIC,IAAI,GAAGC,KAAK,IAALA,IAAAA,GAAAA,CAAAA,GAAoBA,KAAK,CADpC,MAAA;AAAA,MAEIC,QAAQ,GAAGL,KAAK,KAFpB,KAAA;AAAA,MAGIM,SAAS,GAAGN,KAAK,KAHrB,IAAA;AAAA,MAIIO,WAAW,GAAGd,QAAQ,CAJ1B,KAI0B,CAJ1B;AAAA,MAKIe,cAAc,GAAGR,KAAK,KAL1B,SAAA;;AAOA,SAAOE,GAAG,GAAV,IAAA,EAAmB;AACjB,QAAIO,GAAG,GAAGZ,WAAW,CAAC,CAACK,GAAG,GAAJ,IAAA,IAAtB,CAAqB,CAArB;AAAA,QACIQ,QAAQ,GAAGT,QAAQ,CAACG,KAAK,CAD7B,GAC6B,CAAN,CADvB;AAAA,QAEIO,YAAY,GAAGD,QAAQ,KAF3B,SAAA;AAAA,QAGIE,SAAS,GAAGF,QAAQ,KAHxB,IAAA;AAAA,QAIIG,cAAc,GAAGH,QAAQ,KAJ7B,QAAA;AAAA,QAKII,WAAW,GAAGrB,QAAQ,CAL1B,QAK0B,CAL1B;;AAOA,QAAA,QAAA,EAAc;AACZ,UAAIsB,MAAM,GAAGC,UAAU,IAAvB,cAAA;AADF,KAAA,MAEO,IAAA,cAAA,EAAoB;AACzBD,MAAAA,MAAM,GAAGF,cAAc,KAAKG,UAAU,IAAtCD,YAAuB,CAAvBA;AADK,KAAA,MAEA,IAAA,SAAA,EAAe;AACpBA,MAAAA,MAAM,GAAGF,cAAc,IAAdA,YAAAA,KAAmCG,UAAU,IAAI,CAA1DD,SAASF,CAATE;AADK,KAAA,MAEA,IAAA,WAAA,EAAiB;AACtBA,MAAAA,MAAM,GAAGF,cAAc,IAAdA,YAAAA,IAAkC,CAAlCA,SAAAA,KAAiDG,UAAU,IAAI,CAAxED,WAASF,CAATE;AADK,KAAA,MAEA,IAAIH,SAAS,IAAb,WAAA,EAA8B;AACnCG,MAAAA,MAAM,GAANA,KAAAA;AADK,KAAA,MAEA;AACLA,MAAAA,MAAM,GAAGC,UAAU,GAAIN,QAAQ,IAAZ,KAAA,GAA0BA,QAAQ,GAArDK,KAAAA;AACD;;AACD,QAAA,MAAA,EAAY;AACVb,MAAAA,GAAG,GAAGO,GAAG,GAATP,CAAAA;AADF,KAAA,MAEO;AACLC,MAAAA,IAAI,GAAJA,GAAAA;AACD;AACF;;AACD,SAAOJ,SAAS,CAAA,IAAA,EAAhB,eAAgB,CAAhB;AACD;;AAEDkB,MAAM,CAANA,OAAAA,GAAAA,iBAAAA","sourcesContent":["var isSymbol = require('./isSymbol');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n * which invokes `iteratee` for `value` and each element of `array` to compute\n * their sort ranking. The iteratee is invoked with one argument; (value).\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndexBy(array, value, iteratee, retHighest) {\n  value = iteratee(value);\n\n  var low = 0,\n      high = array == null ? 0 : array.length,\n      valIsNaN = value !== value,\n      valIsNull = value === null,\n      valIsSymbol = isSymbol(value),\n      valIsUndefined = value === undefined;\n\n  while (low < high) {\n    var mid = nativeFloor((low + high) / 2),\n        computed = iteratee(array[mid]),\n        othIsDefined = computed !== undefined,\n        othIsNull = computed === null,\n        othIsReflexive = computed === computed,\n        othIsSymbol = isSymbol(computed);\n\n    if (valIsNaN) {\n      var setLow = retHighest || othIsReflexive;\n    } else if (valIsUndefined) {\n      setLow = othIsReflexive && (retHighest || othIsDefined);\n    } else if (valIsNull) {\n      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n    } else if (valIsSymbol) {\n      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n    } else if (othIsNull || othIsSymbol) {\n      setLow = false;\n    } else {\n      setLow = retHighest ? (computed <= value) : (computed < value);\n    }\n    if (setLow) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return nativeMin(high, MAX_ARRAY_INDEX);\n}\n\nmodule.exports = baseSortedIndexBy;\n"],"file":"_baseSortedIndexBy.js"}