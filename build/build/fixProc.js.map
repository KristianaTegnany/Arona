{"version":3,"sources":["../node_modules/parse-asn1/fixProc.js"],"names":["findProc","startRegex","fullRegex","evp","require","ciphers","Buffer","module","key","okey","match","match2","decrypted","suite","iv","cipherText","cipherKey","parseInt","out","cipher","tag","data"],"mappings":";;AAAA;AACA,IAAIA,QAAQ,GAAZ,0HAAA;AACA,IAAIC,UAAU,GAAd,6CAAA;AACA,IAAIC,SAAS,GAAb,mFAAA;;AACA,IAAIC,GAAG,GAAGC,OAAO,CAAjB,gBAAiB,CAAjB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAArB,gBAAqB,CAArB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAPA,aAAO,CAAPA,CAAb,MAAA;;AACAG,MAAM,CAANA,OAAAA,GAAiB,UAAA,IAAA,EAAA,QAAA,EAA0B;AACzC,MAAIC,GAAG,GAAGC,IAAI,CAAd,QAAUA,EAAV;AACA,MAAIC,KAAK,GAAGF,GAAG,CAAHA,KAAAA,CAAZ,QAAYA,CAAZ;AACA,MAAA,SAAA;;AACA,MAAI,CAAJ,KAAA,EAAY;AACV,QAAIG,MAAM,GAAGH,GAAG,CAAHA,KAAAA,CAAb,SAAaA,CAAb;AACAI,IAAAA,SAAS,GAAG,IAAA,MAAA,CAAWD,MAAM,CAANA,CAAM,CAANA,CAAAA,OAAAA,CAAAA,SAAAA,EAAX,EAAWA,CAAX,EAAZC,QAAY,CAAZA;AAFF,GAAA,MAGO;AACL,QAAIC,KAAK,GAAG,QAAQH,KAAK,CAAzB,CAAyB,CAAzB;AACA,QAAII,EAAE,GAAGR,MAAM,CAANA,IAAAA,CAAYI,KAAK,CAAjBJ,CAAiB,CAAjBA,EAAT,KAASA,CAAT;AACA,QAAIS,UAAU,GAAGT,MAAM,CAANA,IAAAA,CAAYI,KAAK,CAALA,CAAK,CAALA,CAAAA,OAAAA,CAAAA,SAAAA,EAAZJ,EAAYI,CAAZJ,EAAjB,QAAiBA,CAAjB;AACA,QAAIU,SAAS,GAAGb,GAAG,CAAA,QAAA,EAAWW,EAAE,CAAFA,KAAAA,CAAAA,CAAAA,EAAX,CAAWA,CAAX,EAA2BG,QAAQ,CAACP,KAAK,CAAN,CAAM,CAAN,EAAtCP,EAAsC,CAAnC,CAAHA,CAAhB,GAAA;AACA,QAAIe,GAAG,GAAP,EAAA;AACA,QAAIC,MAAM,GAAGd,OAAO,CAAPA,gBAAAA,CAAAA,KAAAA,EAAAA,SAAAA,EAAb,EAAaA,CAAb;AACAa,IAAAA,GAAG,CAAHA,IAAAA,CAASC,MAAM,CAANA,MAAAA,CAATD,UAASC,CAATD;AACAA,IAAAA,GAAG,CAAHA,IAAAA,CAASC,MAATD,SAASC,EAATD;AACAN,IAAAA,SAAS,GAAGN,MAAM,CAANA,MAAAA,CAAZM,GAAYN,CAAZM;AACD;;AACD,MAAIQ,GAAG,GAAGZ,GAAG,CAAHA,KAAAA,CAAAA,UAAAA,EAAV,CAAUA,CAAV;AACA,SAAO;AACLY,IAAAA,GAAG,EADE,GAAA;AAELC,IAAAA,IAAI,EAAET;AAFD,GAAP;AAnBFL,CAAAA","sourcesContent":["// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = new Buffer(match2[2].replace(/[\\r\\n]/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = Buffer.from(match[2], 'hex')\n    var cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1]\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n"],"file":"fixProc.js"}