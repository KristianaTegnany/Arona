{"version":3,"sources":["../node_modules/lodash/toArray.js"],"names":["Symbol","require","copyArray","getTag","isArrayLike","isString","iteratorToArray","mapToArray","setToArray","stringToArray","values","mapTag","setTag","symIterator","value","tag","func","module"],"mappings":";;AAAA,IAAIA,OAAM,GAAGC,OAAO,CAApB,WAAoB,CAApB;AAAA,IACIC,SAAS,GAAGD,OAAO,CADvB,cACuB,CADvB;AAAA,IAEIE,MAAM,GAAGF,OAAO,CAFpB,WAEoB,CAFpB;AAAA,IAGIG,WAAW,GAAGH,OAAO,CAHzB,eAGyB,CAHzB;AAAA,IAIII,QAAQ,GAAGJ,OAAO,CAJtB,YAIsB,CAJtB;AAAA,IAKIK,eAAe,GAAGL,OAAO,CAL7B,oBAK6B,CAL7B;AAAA,IAMIM,UAAU,GAAGN,OAAO,CANxB,eAMwB,CANxB;AAAA,IAOIO,UAAU,GAAGP,OAAO,CAPxB,eAOwB,CAPxB;AAAA,IAQIQ,aAAa,GAAGR,OAAO,CAR3B,kBAQ2B,CAR3B;AAAA,IASIS,MAAM,GAAGT,OAAO,CATpB,UASoB,CATpB;AAWA;;;AACA,IAAIU,MAAM,GAAV,cAAA;AAAA,IACIC,MAAM,GADV,cAAA;AAGA;;AACA,IAAIC,WAAW,GAAGb,OAAM,GAAGA,OAAM,CAAT,QAAA,GAAxB,SAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAA,OAAA,CAAA,KAAA,EAAwB;AACtB,MAAI,CAAJ,KAAA,EAAY;AACV,WAAA,EAAA;AACD;;AACD,MAAII,WAAW,CAAf,KAAe,CAAf,EAAwB;AACtB,WAAOC,QAAQ,CAARA,KAAQ,CAARA,GAAkBI,aAAa,CAA/BJ,KAA+B,CAA/BA,GAAyCH,SAAS,CAAzD,KAAyD,CAAzD;AACD;;AACD,MAAIW,WAAW,IAAIC,KAAK,CAAxB,WAAwB,CAAxB,EAAuC;AACrC,WAAOR,eAAe,CAACQ,KAAK,CAA5B,WAA4B,CAALA,EAAD,CAAtB;AACD;;AACD,MAAIC,GAAG,GAAGZ,MAAM,CAAhB,KAAgB,CAAhB;AAAA,MACIa,IAAI,GAAGD,GAAG,IAAHA,MAAAA,GAAAA,UAAAA,GAA8BA,GAAG,IAAHA,MAAAA,GAAAA,UAAAA,GADzC,MAAA;AAGA,SAAOC,IAAI,CAAX,KAAW,CAAX;AACD;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,OAAAA","sourcesContent":["var Symbol = require('./_Symbol'),\n    copyArray = require('./_copyArray'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    iteratorToArray = require('./_iteratorToArray'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray'),\n    stringToArray = require('./_stringToArray'),\n    values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\nmodule.exports = toArray;\n"],"file":"toArray.js"}