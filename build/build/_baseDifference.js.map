{"version":3,"sources":["../node_modules/lodash/_baseDifference.js"],"names":["SetCache","require","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","LARGE_ARRAY_SIZE","index","includes","isCommon","length","array","result","valuesLength","values","outer","value","computed","iteratee","comparator","valuesIndex","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,aAAsB,CAAtB;AAAA,IACIC,aAAa,GAAGD,OAAO,CAD3B,kBAC2B,CAD3B;AAAA,IAEIE,iBAAiB,GAAGF,OAAO,CAF/B,sBAE+B,CAF/B;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAHtB,aAGsB,CAHtB;AAAA,IAIII,SAAS,GAAGJ,OAAO,CAJvB,cAIuB,CAJvB;AAAA,IAKIK,QAAQ,GAAGL,OAAO,CALtB,aAKsB,CALtB;AAOA;;;AACA,IAAIM,gBAAgB,GAApB,GAAA;AAEA;;;;;;;;;;;;AAWA,SAAA,cAAA,CAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAA,UAAA,EAA6D;AAC3D,MAAIC,KAAK,GAAG,CAAZ,CAAA;AAAA,MACIC,QAAQ,GADZ,aAAA;AAAA,MAEIC,QAAQ,GAFZ,IAAA;AAAA,MAGIC,MAAM,GAAGC,KAAK,CAHlB,MAAA;AAAA,MAIIC,MAAM,GAJV,EAAA;AAAA,MAKIC,YAAY,GAAGC,MAAM,CALzB,MAAA;;AAOA,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,MAAA;AACD;;AACD,MAAA,QAAA,EAAc;AACZA,IAAAA,MAAM,GAAGX,QAAQ,CAAA,MAAA,EAASC,SAAS,CAAnCU,QAAmC,CAAlB,CAAjBA;AACD;;AACD,MAAA,UAAA,EAAgB;AACdN,IAAAA,QAAQ,GAARA,iBAAAA;AACAC,IAAAA,QAAQ,GAARA,KAAAA;AAFF,GAAA,MAIK,IAAIK,MAAM,CAANA,MAAAA,IAAJ,gBAAA,EAAuC;AAC1CN,IAAAA,QAAQ,GAARA,QAAAA;AACAC,IAAAA,QAAQ,GAARA,KAAAA;AACAK,IAAAA,MAAM,GAAG,IAAA,QAAA,CAATA,MAAS,CAATA;AACD;;AACDC,EAAAA,KAAK,EACL,OAAO,EAAA,KAAA,GAAP,MAAA,EAAyB;AACvB,QAAIC,KAAK,GAAGL,KAAK,CAAjB,KAAiB,CAAjB;AAAA,QACIM,QAAQ,GAAGC,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,GAA2BA,QAAQ,CADlD,KACkD,CADlD;AAGAF,IAAAA,KAAK,GAAIG,UAAU,IAAIH,KAAK,KAApB,CAACG,GAAD,KAACA,GAATH,CAAAA;;AACA,QAAIP,QAAQ,IAAIQ,QAAQ,KAAxB,QAAA,EAAuC;AACrC,UAAIG,WAAW,GAAf,YAAA;;AACA,aAAOA,WAAP,EAAA,EAAsB;AACpB,YAAIN,MAAM,CAANA,WAAM,CAANA,KAAJ,QAAA,EAAsC;AACpC,mBAAA,KAAA;AACD;AACF;;AACDF,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AAPF,KAAA,MASK,IAAI,CAACJ,QAAQ,CAAA,MAAA,EAAA,QAAA,EAAb,UAAa,CAAb,EAA6C;AAChDI,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AACD;AACF;;AACD,SAAA,MAAA;AACD;;AAEDS,MAAM,CAANA,OAAAA,GAAAA,cAAAA","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"],"file":"_baseDifference.js"}