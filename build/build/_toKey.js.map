{"version":3,"sources":["../node_modules/lodash/_toKey.js"],"names":["isSymbol","require","INFINITY","result","value","module"],"mappings":";;AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAtB,YAAsB,CAAtB;AAEA;;;AACA,IAAIC,QAAQ,GAAG,IAAf,CAAA;AAEA;;;;;;;;AAOA,SAAA,KAAA,CAAA,KAAA,EAAsB;AACpB,MAAI,OAAA,KAAA,IAAA,QAAA,IAA4BF,QAAQ,CAAxC,KAAwC,CAAxC,EAAiD;AAC/C,WAAA,KAAA;AACD;;AACD,MAAIG,MAAM,GAAIC,KAAK,GAAnB,EAAA;AACA,SAAQD,MAAM,IAANA,GAAAA,IAAkB,IAAD,KAAC,IAAc,CAAjC,QAACA,GAAD,IAACA,GAAR,MAAA;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,KAAAA","sourcesContent":["var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n"],"file":"_toKey.js"}