{"version":3,"sources":["../node_modules/lodash/_isFlattenable.js"],"names":["Symbol","require","isArguments","isArray","spreadableSymbol","value","module"],"mappings":";;AAAA,IAAIA,OAAM,GAAGC,OAAO,CAApB,WAAoB,CAApB;AAAA,IACIC,WAAW,GAAGD,OAAO,CADzB,eACyB,CADzB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAFrB,WAEqB,CAFrB;AAIA;;;AACA,IAAIG,gBAAgB,GAAGJ,OAAM,GAAGA,OAAM,CAAT,kBAAA,GAA7B,SAAA;AAEA;;;;;;;;AAOA,SAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,SAAOG,OAAO,CAAPA,KAAO,CAAPA,IAAkBD,WAAW,CAA7BC,KAA6B,CAA7BA,IACL,CAAC,EAAEC,gBAAgB,IAAhBA,KAAAA,IAA6BC,KAAK,CADvC,gBACuC,CAApC,CADH;AAED;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n"],"file":"_isFlattenable.js"}