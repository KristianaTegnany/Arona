{"version":3,"sources":["../node_modules/lodash/_createRecurry.js"],"names":["isLaziable","require","setData","setWrapToString","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","isCurry","bitmask","newHolders","newHoldersRight","newPartials","newPartialsRight","newData","result","wrapFunc","module"],"mappings":";;AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAxB,eAAwB,CAAxB;AAAA,IACIC,OAAO,GAAGD,OAAO,CADrB,YACqB,CADrB;AAAA,IAEIE,eAAe,GAAGF,OAAO,CAF7B,oBAE6B,CAF7B;AAIA;;;AACA,IAAIG,cAAc,GAAlB,CAAA;AAAA,IACIC,kBAAkB,GADtB,CAAA;AAAA,IAEIC,qBAAqB,GAFzB,CAAA;AAAA,IAGIC,eAAe,GAHnB,CAAA;AAAA,IAIIC,iBAAiB,GAJrB,EAAA;AAAA,IAKIC,uBAAuB,GAL3B,EAAA;AAOA;;;;;;;;;;;;;;;;;;AAiBA,SAAA,aAAA,CAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAA6G;AAC3G,MAAIC,OAAO,GAAGC,OAAO,GAArB,eAAA;AAAA,MACIC,UAAU,GAAGF,OAAO,GAAA,OAAA,GADxB,SAAA;AAAA,MAEIG,eAAe,GAAGH,OAAO,GAAA,SAAA,GAF7B,OAAA;AAAA,MAGII,WAAW,GAAGJ,OAAO,GAAA,QAAA,GAHzB,SAAA;AAAA,MAIIK,gBAAgB,GAAGL,OAAO,GAAA,SAAA,GAJ9B,QAAA;AAMAC,EAAAA,OAAO,IAAKD,OAAO,GAAA,iBAAA,GAAnBC,uBAAAA;AACAA,EAAAA,OAAO,IAAI,EAAED,OAAO,GAAA,uBAAA,GAApBC,iBAAW,CAAXA;;AAEA,MAAI,EAAEA,OAAO,GAAb,qBAAI,CAAJ,EAAwC;AACtCA,IAAAA,OAAO,IAAI,EAAEP,cAAc,GAA3BO,kBAAW,CAAXA;AACD;;AACD,MAAIK,OAAO,GAAG,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,MAAA,EAAA,GAAA,EAAd,KAAc,CAAd;AAKA,MAAIC,MAAM,GAAGC,QAAQ,CAARA,KAAAA,CAAAA,SAAAA,EAAb,OAAaA,CAAb;;AACA,MAAIlB,UAAU,CAAd,IAAc,CAAd,EAAsB;AACpBE,IAAAA,OAAO,CAAA,MAAA,EAAPA,OAAO,CAAPA;AACD;;AACDe,EAAAA,MAAM,CAANA,WAAAA,GAAAA,WAAAA;AACA,SAAOd,eAAe,CAAA,MAAA,EAAA,IAAA,EAAtB,OAAsB,CAAtB;AACD;;AAEDgB,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["var isLaziable = require('./_isLaziable'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nmodule.exports = createRecurry;\n"],"file":"_createRecurry.js"}