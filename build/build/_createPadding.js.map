{"version":3,"sources":["../node_modules/lodash/_createPadding.js"],"names":["baseRepeat","require","baseToString","castSlice","hasUnicode","stringSize","stringToArray","nativeCeil","Math","chars","charsLength","result","length","module"],"mappings":";;AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAxB,eAAwB,CAAxB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAD1B,iBAC0B,CAD1B;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAFvB,cAEuB,CAFvB;AAAA,IAGIG,UAAU,GAAGH,OAAO,CAHxB,eAGwB,CAHxB;AAAA,IAIII,UAAU,GAAGJ,OAAO,CAJxB,eAIwB,CAJxB;AAAA,IAKIK,aAAa,GAAGL,OAAO,CAL3B,kBAK2B,CAL3B;AAOA;;;AACA,IAAIM,UAAU,GAAGC,IAAI,CAArB,IAAA;AAEA;;;;;;;;;;AASA,SAAA,aAAA,CAAA,MAAA,EAAA,KAAA,EAAsC;AACpCC,EAAAA,KAAK,GAAGA,KAAK,KAALA,SAAAA,GAAAA,GAAAA,GAA4BP,YAAY,CAAhDO,KAAgD,CAAhDA;AAEA,MAAIC,WAAW,GAAGD,KAAK,CAAvB,MAAA;;AACA,MAAIC,WAAW,GAAf,CAAA,EAAqB;AACnB,WAAOA,WAAW,GAAGV,UAAU,CAAA,KAAA,EAAb,MAAa,CAAb,GAAlB,KAAA;AACD;;AACD,MAAIW,MAAM,GAAGX,UAAU,CAAA,KAAA,EAAQO,UAAU,CAACK,MAAM,GAAGP,UAAU,CAA7D,KAA6D,CAApB,CAAlB,CAAvB;AACA,SAAOD,UAAU,CAAVA,KAAU,CAAVA,GACHD,SAAS,CAACG,aAAa,CAAd,MAAc,CAAd,EAAA,CAAA,EAATH,MAAS,CAATA,CAAAA,IAAAA,CADGC,EACHD,CADGC,GAEHO,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAFJ,MAEIA,CAFJ;AAGD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["var baseRepeat = require('./_baseRepeat'),\n    baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\nmodule.exports = createPadding;\n"],"file":"_createPadding.js"}