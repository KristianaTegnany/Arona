{"version":3,"sources":["../node_modules/which/which.js"],"names":["module","which","isWindows","process","path","require","COLON","isexe","er","colon","opt","pathEnv","pathExt","pathExtExe","cmd","env","ext","extExe","cb","info","getPathInfo","found","i","getNotFoundError","pathPart","p","ii","F","E","l","j","ll","cur","is"],"mappings":"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","sourcesContent":["module.exports = which\nwhich.sync = whichSync\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar path = require('path')\nvar COLON = isWindows ? ';' : ':'\nvar isexe = require('isexe')\n\nfunction getNotFoundError (cmd) {\n  var er = new Error('not found: ' + cmd)\n  er.code = 'ENOENT'\n\n  return er\n}\n\nfunction getPathInfo (cmd, opt) {\n  var colon = opt.colon || COLON\n  var pathEnv = opt.path || process.env.PATH || ''\n  var pathExt = ['']\n\n  pathEnv = pathEnv.split(colon)\n\n  var pathExtExe = ''\n  if (isWindows) {\n    pathEnv.unshift(process.cwd())\n    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')\n    pathExt = pathExtExe.split(colon)\n\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/))\n    pathEnv = ['']\n\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  }\n}\n\nfunction which (cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  ;(function F (i, l) {\n    if (i === l) {\n      if (opt.all && found.length)\n        return cb(null, found)\n      else\n        return cb(getNotFoundError(cmd))\n    }\n\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    ;(function E (ii, ll) {\n      if (ii === ll) return F(i + 1, l)\n      var ext = pathExt[ii]\n      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {\n        if (!er && is) {\n          if (opt.all)\n            found.push(p + ext)\n          else\n            return cb(null, p + ext)\n        }\n        return E(ii + 1, ll)\n      })\n    })(0, pathExt.length)\n  })(0, pathEnv.length)\n}\n\nfunction whichSync (cmd, opt) {\n  opt = opt || {}\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  for (var i = 0, l = pathEnv.length; i < l; i ++) {\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j ++) {\n      var cur = p + pathExt[j]\n      var is\n      try {\n        is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n"],"file":"which.js"}