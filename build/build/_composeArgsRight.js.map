{"version":3,"sources":["../node_modules/lodash/_composeArgsRight.js"],"names":["nativeMax","Math","argsIndex","argsLength","args","holdersIndex","holdersLength","holders","rightIndex","rightLength","partials","rangeLength","result","Array","isUncurried","offset","module"],"mappings":";;AAAA;AACA,IAAIA,SAAS,GAAGC,IAAI,CAApB,GAAA;AAEA;;;;;;;;;;;;AAWA,SAAA,gBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAA8D;AAC5D,MAAIC,SAAS,GAAG,CAAhB,CAAA;AAAA,MACIC,UAAU,GAAGC,IAAI,CADrB,MAAA;AAAA,MAEIC,YAAY,GAAG,CAFnB,CAAA;AAAA,MAGIC,aAAa,GAAGC,OAAO,CAH3B,MAAA;AAAA,MAIIC,UAAU,GAAG,CAJjB,CAAA;AAAA,MAKIC,WAAW,GAAGC,QAAQ,CAL1B,MAAA;AAAA,MAMIC,WAAW,GAAGX,SAAS,CAACG,UAAU,GAAX,aAAA,EAN3B,CAM2B,CAN3B;AAAA,MAOIS,MAAM,GAAGC,KAAK,CAACF,WAAW,GAP9B,WAOkB,CAPlB;AAAA,MAQIG,WAAW,GAAG,CARlB,SAAA;;AAUA,SAAO,EAAA,SAAA,GAAP,WAAA,EAAkC;AAChCF,IAAAA,MAAM,CAANA,SAAM,CAANA,GAAoBR,IAAI,CAAxBQ,SAAwB,CAAxBA;AACD;;AACD,MAAIG,MAAM,GAAV,SAAA;;AACA,SAAO,EAAA,UAAA,GAAP,WAAA,EAAmC;AACjCH,IAAAA,MAAM,CAACG,MAAM,GAAbH,UAAM,CAANA,GAA8BF,QAAQ,CAAtCE,UAAsC,CAAtCA;AACD;;AACD,SAAO,EAAA,YAAA,GAAP,aAAA,EAAuC;AACrC,QAAIE,WAAW,IAAIZ,SAAS,GAA5B,UAAA,EAA2C;AACzCU,MAAAA,MAAM,CAACG,MAAM,GAAGR,OAAO,CAAvBK,YAAuB,CAAjB,CAANA,GAAyCR,IAAI,CAACF,SAA9CU,EAA6C,CAA7CA;AACD;AACF;;AACD,SAAA,MAAA;AACD;;AAEDI,MAAM,CAANA,OAAAA,GAAAA,gBAAAA","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n"],"file":"_composeArgsRight.js"}