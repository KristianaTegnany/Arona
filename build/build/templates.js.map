{"version":3,"sources":["../node_modules/chalk/templates.js"],"names":["TEMPLATE_REGEX","STYLE_REGEX","STRING_REGEX","ESCAPE_REGEX","ESCAPES","c","String","parseInt","results","chunks","args","isNaN","Number","matches","chunk","escape","unescape","name","parseArguments","enabled","layer","style","current","styleName","Object","Array","module","styles","tmp","str","buildStyle","inverse","parseStyle","errMsg","length"],"mappings":"AAAA;;AACA,IAAMA,cAAc,GAApB,sIAAA;AACA,IAAMC,WAAW,GAAjB,gCAAA;AACA,IAAMC,YAAY,GAAlB,kCAAA;AACA,IAAMC,YAAY,GAAlB,yCAAA;AAEA,IAAMC,OAAO,GAAG,IAAA,GAAA,CAAQ,CACvB,CAAA,GAAA,EADuB,IACvB,CADuB,EAEvB,CAAA,GAAA,EAFuB,IAEvB,CAFuB,EAGvB,CAAA,GAAA,EAHuB,IAGvB,CAHuB,EAIvB,CAAA,GAAA,EAJuB,IAIvB,CAJuB,EAKvB,CAAA,GAAA,EALuB,IAKvB,CALuB,EAMvB,CAAA,GAAA,EANuB,IAMvB,CANuB,EAOvB,CAAA,GAAA,EAPuB,IAOvB,CAPuB,EAQvB,CAAA,IAAA,EARuB,IAQvB,CARuB,EASvB,CAAA,GAAA,EATuB,MASvB,CATuB,EAUvB,CAAA,GAAA,EAVD,MAUC,CAVuB,CAAR,CAAhB;;AAaA,SAAA,QAAA,CAAA,CAAA,EAAqB;AACpB,MAAKC,CAAC,CAADA,CAAC,CAADA,KAAAA,GAAAA,IAAgBA,CAAC,CAADA,MAAAA,KAAjB,CAACA,IAAoCA,CAAC,CAADA,CAAC,CAADA,KAAAA,GAAAA,IAAgBA,CAAC,CAADA,MAAAA,KAAzD,CAAA,EAA0E;AACzE,WAAOC,MAAM,CAANA,YAAAA,CAAoBC,QAAQ,CAACF,CAAC,CAADA,KAAAA,CAAD,CAACA,CAAD,EAAnC,EAAmC,CAA5BC,CAAP;AACA;;AAED,SAAOF,OAAO,CAAPA,GAAAA,CAAAA,CAAAA,KAAP,CAAA;AACA;;AAED,SAAA,cAAA,CAAA,IAAA,EAAA,IAAA,EAAoC;AACnC,MAAMI,OAAO,GAAb,EAAA;AACA,MAAMC,MAAM,GAAGC,IAAI,CAAJA,IAAAA,GAAAA,KAAAA,CAAf,UAAeA,CAAf;AACA,MAAA,OAAA;AAHmC;AAAA;AAAA;;AAAA;AAKnC,yBAAA,MAAA,8HAA4B;AAAA,UAA5B,KAA4B;;AAC3B,UAAI,CAACC,KAAK,CAAV,KAAU,CAAV,EAAmB;AAClBH,QAAAA,OAAO,CAAPA,IAAAA,CAAaI,MAAM,CAAnBJ,KAAmB,CAAnBA;AADD,OAAA,MAEO,IAAKK,OAAO,GAAGC,KAAK,CAALA,KAAAA,CAAf,YAAeA,CAAf,EAA2C;AACjDN,QAAAA,OAAO,CAAPA,IAAAA,CAAaK,OAAO,CAAPA,CAAO,CAAPA,CAAAA,OAAAA,CAAAA,YAAAA,EAAiC,UAAA,CAAA,EAAA,MAAA,EAAA,GAAA;AAAA,iBAAoBE,MAAM,GAAGC,QAAQ,CAAX,MAAW,CAAX,GAAxER,GAA8C;AAAA,SAAjCK,CAAbL;AADM,OAAA,MAEA;AACN,cAAM,IAAA,KAAA,kDAAoDM,KAApD,yBAAN,IAAM,QAAN;AACA;AACD;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAenC,SAAA,OAAA;AACA;;AAED,SAAA,UAAA,CAAA,KAAA,EAA2B;AAC1Bb,EAAAA,WAAW,CAAXA,SAAAA,GAAAA,CAAAA;AAEA,MAAMO,OAAO,GAAb,EAAA;AACA,MAAA,OAAA;;AAEA,SAAO,CAACK,OAAO,GAAGZ,WAAW,CAAXA,IAAAA,CAAX,KAAWA,CAAX,MAAP,IAAA,EAAqD;AACpD,QAAMgB,IAAI,GAAGJ,OAAO,CAApB,CAAoB,CAApB;;AAEA,QAAIA,OAAO,CAAX,CAAW,CAAX,EAAgB;AACf,UAAMH,IAAI,GAAGQ,cAAc,CAAA,IAAA,EAAOL,OAAO,CAAzC,CAAyC,CAAd,CAA3B;AACAL,MAAAA,OAAO,CAAPA,IAAAA,CAAa,CAAA,IAAA,EAAA,MAAA,CAAbA,IAAa,CAAbA;AAFD,KAAA,MAGO;AACNA,MAAAA,OAAO,CAAPA,IAAAA,CAAa,CAAbA,IAAa,CAAbA;AACA;AACD;;AAED,SAAA,OAAA;AACA;;AAED,SAAA,UAAA,CAAA,KAAA,EAAA,MAAA,EAAmC;AAClC,MAAMW,OAAO,GAAb,EAAA;AADkC;AAAA;AAAA;;AAAA;AAGlC,0BAAA,MAAA,mIAA4B;AAAA,UAA5B,KAA4B;AAAA;AAAA;AAAA;;AAAA;AAC3B,8BAAoBC,KAAK,CAAzB,MAAA,mIAAkC;AAAA,cAAlC,KAAkC;AACjCD,UAAAA,OAAO,CAACE,KAAK,CAAbF,CAAa,CAAN,CAAPA,GAAoBC,KAAK,CAALA,OAAAA,GAAAA,IAAAA,GAAuBC,KAAK,CAALA,KAAAA,CAA3CF,CAA2CE,CAA3CF;AACA;AAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI3B;AAPiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASlC,MAAIG,OAAO,GAAX,KAAA;;AACA,kCAAwBE,MAAM,CAANA,IAAAA,CAAxB,OAAwBA,CAAxB,kCAA8C;AAAzC,QAAMD,SAAX,mBAAK;;AACJ,QAAIE,KAAK,CAALA,OAAAA,CAAcN,OAAO,CAAzB,SAAyB,CAArBM,CAAJ,EAAuC;AACtC,UAAI,EAAEF,SAAS,IAAf,OAAI,CAAJ,EAA6B;AAC5B,cAAM,IAAA,KAAA,gCAAN,SAAM,EAAN;AACA;;AAED,UAAIJ,OAAO,CAAPA,SAAO,CAAPA,CAAAA,MAAAA,GAAJ,CAAA,EAAmC;AAClCG,QAAAA,OAAO,GAAGA,OAAO,CAAPA,SAAO,CAAPA,CAAAA,KAAAA,CAAAA,OAAAA,EAAkCH,OAAO,CAAnDG,SAAmD,CAAzCA,CAAVA;AADD,OAAA,MAEO;AACNA,QAAAA,OAAO,GAAGA,OAAO,CAAjBA,SAAiB,CAAjBA;AACA;AACD;AACD;;AAED,SAAA,OAAA;AACA;;AAEDI,MAAM,CAANA,OAAAA,GAAiB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAChC,MAAMC,MAAM,GAAZ,EAAA;AACA,MAAMlB,MAAM,GAAZ,EAAA;AACA,MAAIK,KAAK,GAHuB,EAGhC,CAHgC,CAKhC;;AACAc,EAAAA,GAAG,CAAHA,OAAAA,CAAAA,cAAAA,EAA4B,UAAA,CAAA,EAAA,UAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAA+C;AAC1E,QAAA,UAAA,EAAgB;AACfd,MAAAA,KAAK,CAALA,IAAAA,CAAWE,QAAQ,CAAnBF,UAAmB,CAAnBA;AADD,KAAA,MAEO,IAAA,KAAA,EAAW;AACjB,UAAMe,GAAG,GAAGf,KAAK,CAALA,IAAAA,CAAZ,EAAYA,CAAZ;AACAA,MAAAA,KAAK,GAALA,EAAAA;AACAL,MAAAA,MAAM,CAANA,IAAAA,CAAYkB,MAAM,CAANA,MAAAA,KAAAA,CAAAA,GAAAA,GAAAA,GAA4BG,UAAU,CAAA,KAAA,EAAVA,MAAU,CAAVA,CAAxCrB,GAAwCqB,CAAxCrB;AACAkB,MAAAA,MAAM,CAANA,IAAAA,CAAY;AAACI,QAAAA,OAAD,EAACA,OAAD;AAAUJ,QAAAA,MAAM,EAAEK,UAAU,CAAA,KAAA;AAA5B,OAAZL;AAJM,KAAA,MAKA,IAAA,KAAA,EAAW;AACjB,UAAIA,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB;AACxB,cAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AACA;;AAEDlB,MAAAA,MAAM,CAANA,IAAAA,CAAYqB,UAAU,CAAA,KAAA,EAAVA,MAAU,CAAVA,CAA0BhB,KAAK,CAALA,IAAAA,CAAtCL,EAAsCK,CAA1BgB,CAAZrB;AACAK,MAAAA,KAAK,GAALA,EAAAA;AACAa,MAAAA,MAAM,CAANA,GAAAA;AAPM,KAAA,MAQA;AACNb,MAAAA,KAAK,CAALA,IAAAA,CAAAA,GAAAA;AACA;AAlBFc,GAAAA;AAqBAnB,EAAAA,MAAM,CAANA,IAAAA,CAAYK,KAAK,CAALA,IAAAA,CAAZL,EAAYK,CAAZL;;AAEA,MAAIkB,MAAM,CAANA,MAAAA,GAAJ,CAAA,EAAuB;AACtB,QAAMM,MAAM,+CAAwCN,MAAM,CAACO,MAA/C,6BAAwEP,MAAM,CAANA,MAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAApF,GAAY,WAAZ;AACA,UAAM,IAAA,KAAA,CAAN,MAAM,CAAN;AACA;;AAED,SAAOlB,MAAM,CAANA,IAAAA,CAAP,EAAOA,CAAP;AAlCDiB,CAAAA","sourcesContent":["'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n"],"file":"templates.js"}