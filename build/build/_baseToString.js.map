{"version":3,"sources":["../node_modules/lodash/_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","symbolToString","result","value","module"],"mappings":";;AAAA,IAAIA,OAAM,GAAGC,OAAO,CAApB,WAAoB,CAApB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CADtB,aACsB,CADtB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAFrB,WAEqB,CAFrB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAHtB,YAGsB,CAHtB;AAKA;;;AACA,IAAII,QAAQ,GAAG,IAAf,CAAA;AAEA;;AACA,IAAIC,WAAW,GAAGN,OAAM,GAAGA,OAAM,CAAT,SAAA,GAAxB,SAAA;AAAA,IACIO,cAAc,GAAGD,WAAW,GAAGA,WAAW,CAAd,QAAA,GADhC,SAAA;AAGA;;;;;;;;;AAQA,SAAA,YAAA,CAAA,KAAA,EAA6B;AAC3B;AACA,MAAI,OAAA,KAAA,IAAJ,QAAA,EAA8B;AAC5B,WAAA,KAAA;AACD;;AACD,MAAIH,OAAO,CAAX,KAAW,CAAX,EAAoB;AAClB;AACA,WAAOD,QAAQ,CAAA,KAAA,EAARA,YAAQ,CAARA,GAAP,EAAA;AACD;;AACD,MAAIE,QAAQ,CAAZ,KAAY,CAAZ,EAAqB;AACnB,WAAOG,cAAc,GAAGA,cAAc,CAAdA,IAAAA,CAAH,KAAGA,CAAH,GAArB,EAAA;AACD;;AACD,MAAIC,MAAM,GAAIC,KAAK,GAAnB,EAAA;AACA,SAAQD,MAAM,IAANA,GAAAA,IAAkB,IAAD,KAAC,IAAc,CAAjC,QAACA,GAAD,IAACA,GAAR,MAAA;AACD;;AAEDE,MAAM,CAANA,OAAAA,GAAAA,YAAAA","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"],"file":"_baseToString.js"}