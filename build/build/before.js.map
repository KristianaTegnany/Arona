{"version":3,"sources":["../node_modules/lodash/before.js"],"names":["toInteger","require","FUNC_ERROR_TEXT","n","result","func","module"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAvB,aAAuB,CAAvB;AAEA;;;AACA,IAAIC,eAAe,GAAnB,qBAAA;AAEA;;;;;;;;;;;;;;;;;;AAiBA,SAAA,MAAA,CAAA,CAAA,EAAA,IAAA,EAAyB;AACvB,MAAA,MAAA;;AACA,MAAI,OAAA,IAAA,IAAJ,UAAA,EAA+B;AAC7B,UAAM,IAAA,SAAA,CAAN,eAAM,CAAN;AACD;;AACDC,EAAAA,CAAC,GAAGH,SAAS,CAAbG,CAAa,CAAbA;AACA,SAAO,YAAW;AAChB,QAAI,EAAA,CAAA,GAAJ,CAAA,EAAa;AACXC,MAAAA,MAAM,GAAGC,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAATD,SAASC,CAATD;AACD;;AACD,QAAID,CAAC,IAAL,CAAA,EAAY;AACVE,MAAAA,IAAI,GAAJA,SAAAA;AACD;;AACD,WAAA,MAAA;AAPF,GAAA;AASD;;AAEDC,MAAM,CAANA,OAAAA,GAAAA,MAAAA","sourcesContent":["var toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that invokes `func`, with the `this` binding and arguments\n * of the created function, while it's called less than `n` times. Subsequent\n * calls to the created function return the result of the last `func` invocation.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {number} n The number of calls at which `func` is no longer invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * jQuery(element).on('click', _.before(5, addContactToList));\n * // => Allows adding up to 4 contacts to the list.\n */\nfunction before(n, func) {\n  var result;\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  n = toInteger(n);\n  return function() {\n    if (--n > 0) {\n      result = func.apply(this, arguments);\n    }\n    if (n <= 1) {\n      func = undefined;\n    }\n    return result;\n  };\n}\n\nmodule.exports = before;\n"],"file":"before.js"}