{"version":3,"sources":["../node_modules/zip-folder/tests.js"],"names":["tmp","require","fs","path","unzip","zipFolder","txtFileName","txtFileContents","zipFileName","emptyDirectory","dirName","dirFiles","readdirSync","forEach","f","entryPath","join","fileStats","statSync","isFile","unlink","module","exports","setUp","callback","tmpSrcDir","Dir","writePath","writeFileSync","tmpZipFile","File","tmpZipExtractionDir","tearDown","rmdir","itCreatesTheZipFile","test","ok","existsSync","done","theZipFileIsValid","expect","dstPath","createReadStream","pipe","Extract","on","dirList","length","theZipFileContainsTheRightFiles","txtFilePath","equals","readFileSync"],"mappings":"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","sourcesContent":["var tmp = require('temporary');\nvar fs = require('fs');\nvar path = require('path');\nvar unzip = require('unzip');\nvar zipFolder = require('./index');\n\nvar txtFileName = 'file.txt';\nvar txtFileContents = 'this is a text file';\nvar zipFileName = 'archive.zip';\n\nfunction emptyDirectory(dirName) {\n\tvar dirFiles = fs.readdirSync(dirName);\n\tdirFiles.forEach(function(f) {\n\t\tvar entryPath = path.join(dirName, f);\n\t\tvar fileStats = fs.statSync(entryPath);\n\t\tif(fileStats.isFile()) {\n\t\t\tfs.unlink(entryPath);\n\t\t} else {\n\t\t\temptyDirectory(entryPath);\n\t\t}\n\t});\n}\n\nmodule.exports = {\n\tsetUp: function(callback) {\n\t\tthis.tmpSrcDir = new tmp.Dir();\n\n\t\tvar writePath = this.tmpSrcDir.path;\n\n\t\tfs.writeFileSync(path.join(writePath, txtFileName), txtFileContents);\n\t\tthis.txtFileName = txtFileName;\n\t\tthis.txtFileContents = txtFileContents;\n\n\t\tthis.tmpZipFile = new tmp.File();\n\t\tthis.tmpZipExtractionDir = new tmp.Dir();\n\n\t\tzipFolder(writePath, this.tmpZipFile.path, function() {\n\n\t\t\tcallback();\n\n\t\t});\n\t\t\n\t},\n\n\ttearDown: function(callback) {\n\t\t\n\t\temptyDirectory(this.tmpSrcDir.path);\n\t\tthis.tmpSrcDir.rmdir();\n\n\t\temptyDirectory(this.tmpZipExtractionDir.path);\n\t\tthis.tmpZipExtractionDir.rmdir();\n\t\t\n\t\tthis.tmpZipFile.unlink();\n\t\t\n\t\tcallback();\n\t},\n\n\t// Ensure the zip has been created\n\titCreatesTheZipFile: function(test) {\n\t\ttest.ok(fs.existsSync(this.tmpZipFile.path), 'zip exists');\n\t\ttest.done();\n\t},\n\n\t// Assume the zip is valid if it can be unzipped\n\t// and the unzipped contents are not empty\n\ttheZipFileIsValid: function(test) {\n\n\t\ttest.expect(1);\n\n\t\tvar dstPath = this.tmpZipExtractionDir.path;\n\n\t\tfs.createReadStream(this.tmpZipFile.path)\n\t\t\t.pipe(unzip.Extract({ path: dstPath }))\n\t\t\t.on('close', function() {\n\t\t\t\tvar dirList = fs.readdirSync(dstPath);\n\t\t\t\ttest.ok(dirList.length > 0, 'the zip contains files');\n\t\t\t\ttest.done();\n\t\t\t});\n\n\t},\n\t\n\ttheZipFileContainsTheRightFiles: function(test) {\n\n\t\tvar dstPath = this.tmpZipExtractionDir.path;\n\t\tvar txtFileName = this.txtFileName;\n\t\tvar txtFilePath = path.join(dstPath, txtFileName);\n\t\tvar txtFileContents = this.txtFileContents;\n\n\t\tfs.createReadStream(this.tmpZipFile.path)\n\t\t\t.pipe(unzip.Extract({ path: dstPath }))\n\t\t\t.on('close', function() {\n\t\t\t\t\n\t\t\t\ttest.ok(fs.existsSync(txtFilePath), 'txt file exists');\n\t\t\t\ttest.equals(fs.readFileSync(txtFilePath), txtFileContents, 'contents are the same we put in');\n\t\t\t\ttest.done();\n\t\t\t});\n\n\t}\n};\n"],"file":"tests.js"}